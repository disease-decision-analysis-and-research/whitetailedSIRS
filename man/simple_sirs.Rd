% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simple_sirs.R
\name{simple_sirs}
\alias{simple_sirs}
\title{Simple function to generate SIRS model projections}
\usage{
simple_sirs(time, state, parameters)
}
\arguments{
\item{time}{vector of values for which to generate the projection (length in
days).}

\item{state}{initial state for compartment populations. This should be a
named vector for starting values of S_wild, I_wild, R_wild, S_captive,
I_captive, R_captive.}

\item{parameters}{list of parameters to generate projection. The parameters
should include transmission parameters, immunity and recovery rates, and
proportion of infected humans.

@details \code{simple_sirs}does not allow individuals to move from Susceptible to Recovered compartment by means of boosting, and contains parameters not included in the primary analysis. Use \code{Epi_sirs} and \code{Epi_sirs_with_cumulative} instead.}
}
\value{
when used with the \code{deSolve::ode()} function, it will return a
dataframe with the proportion of individuals in each of the SIR
compartments at each time point.
}
\description{
\code{simple_sirs} is written to work alongside the \code{deSolve::ode()} function, and
it will return an object with the proportion of individuals found in each of
the SIR compartments at each of the specified time points. No longer relevant for epidemiological model or alternative testing.
}
\examples{
# prepare the input parameters:
example_inits <- c(S_wild = 1, I_wild = 0,
                   R_wild = 0, S_captive = 1,
                   I_captive = 0, R_captive = 0)

# set the time to run
example_times <-  seq(0, 500, by = 1)
# Set parameters of transmission, immunity, recovery

example_params <- c(alpha_immunity = 0.03,
                    beta_aero_ww = 0.01,
                    beta_aero_cw = 0.01,
                    beta_aero_cc = 0.02,
                    beta_aero_hw = 0.01,
                    beta_aero_hc = 0.2,
                    beta_dc_ww = 0.01,
                    beta_dc_cw = 0.01,
                    beta_dc_cc = 0.01,
                    phi_cw = 0,
                    phi_wc = 0,
                    gamma_recov = 0.01,
                    I_human = 0.05)

# run the ode function:

deSolve::ode(y = example_inits, times = example_times, parms = example_params, func = whitetailedSIRS::simple_sirs)


}
