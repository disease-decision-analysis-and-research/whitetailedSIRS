[{"path":"/articles/Connected_Systems.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SARS-CoV-2 introduction and spread in connected systems","text":"previous vignettes, focused simulating outbreaks particular scenario focused wild captive deer populations. vignette, can test connected systems (wild captive separated fence line) differ outbreak characteristics, compared isolated scenarios. scenarios connected, may differences prevalence, incidence proportion, persistence due fence line interactions. analysis corresponds Objective 5 Rosenblatt et al. Prep. systems considered combinations wild captive scenarios detailed vignette simulating outbreaks, including: Captive deer outdoor ranch facilitates connected wild deer rural setting; Captive deer outdoor ranch facilitates connected wild deer suburban setting; Captive deer intensive, predominantly indoor facilitates connected wild deer rural setting; Captive deer intensive, predominantly indoor facilitates connected wild deer suburban setting; , use framework used previous vignettes: Set number simulations Draw random sample parameters used estimate infection probabilities, contact rates, important parameters. Derive parameters used SIRS ODE equation set Define initial SIR compartment sizes Solve SIRS ODE equations calculate daily compartment sizes Calculate average daily prevalence, probability persistence, incidence proportion. Note calculate FOI \\(R_0\\) vignette, metrics specific scenarios, overall system.","code":""},{"path":"/articles/Connected_Systems.html","id":"set-number-of-simulations-to-run-and-context-of-simulation","dir":"Articles","previous_headings":"","what":"1. Set number of simulations to run and context of simulation","title":"SARS-CoV-2 introduction and spread in connected systems","text":"","code":"set.seed(23) nsamples <- 1000"},{"path":"/articles/Connected_Systems.html","id":"sample-parameters-for-simulations","dir":"Articles","previous_headings":"","what":"2. Sample parameters for simulations","title":"SARS-CoV-2 introduction and spread in connected systems","text":"load dataset remind R many iterations run context (nsamples). set seed consistent results, identify human prevalence duration projection (days). set parameters used consistently across simulations vignette. bring expert-elicited parameters used previous vignettes: define common parameter values systems: also fix parameters key SIRS ODE, including recovery rate infection, rate immunity loss, human prevalence.","code":"#Bring in estimates from expert elicitation elicitation_data <- draw_elicitation_samples(nsamples = nsamples) #Parameters commonly used across projections nWild <- rpois(nsamples,1000) #Abundance A_w <- 100 #Area habitat <- \"med\" #Habitat classification  C_nu_human <- rnorm(n = nsamples, mean = 10^5.6, sd = 10^1.2)#viral load in humans (genomic copies per ml) C_nu_deer <- 10^5.6 * get_EE_param_vals(data = elicitation_data, my_param = \"Viral Load\") #viral load in deer saliva, relative to humans (genomic copies per ml)  r_deer <- get_EE_param_vals(data = elicitation_data, my_param = \"Dose-Response\")# Dose response coefficient for deer and SARS-CoV-2  epsilon_dc <- get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\") #Probability of direct contact between deer, given proximity.  sigma_dc_deer_deer_null <- calc_sigma_dc(C_nu = C_nu_deer, nsamples = nsamples) #Infection probability of 0.1 ml of saliva being transferred between deer on contact  t_contact_deer_deer_null <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer Proximity Duration (minutes)\") #Estimate duration of deer-deer proximity event... #Fixed parameters gamma_recov <- rep(1/6, nsamples) alpha_immunity_null <- 1 / get_EE_param_vals(data = elicitation_data, my_param = 'Temporary Immunity') I_human_null <- 0.05"},{"path":"/articles/Connected_Systems.html","id":"system-parameters","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"System parameters","title":"SARS-CoV-2 introduction and spread in connected systems","text":", combine wild scenario captive scenario, fence line separating populations. combination, define new parameters defined previously. work combinations, fewer parameters added exist earlier combinations.","code":""},{"path":"/articles/Connected_Systems.html","id":"captive-deer-in-outdoor-ranch-facilties-connected-to-wild-rural-deer","dir":"Articles","previous_headings":"2. Sample parameters for simulations > System parameters","what":"Captive deer in outdoor ranch facilties connected to wild, rural deer","title":"SARS-CoV-2 introduction and spread in connected systems","text":"","code":"#Ranch side of the fence...  #Deer-to-deer proximity rate in ranch context, mimicking wild proximity rates with the influence of baiting (events per day). omega_cc_ranch <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   #Probability of infection given that duration of proximity event. sigma_aero_deer_deer_null <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples)   #Estimate duration of human-deer proximity event in ranch facility context. t_contact_deer_human_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")   #Human-to-deer proximity rate in ranch context, mimicking suburban proximitty rates (events per day). omega_hc_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120   #Infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_ranch <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_ranch / 60,                                         r = r_deer, nsamples = nsamples)  #Deer-to-deer proximity rate along fenceline (events per day). omega_cw <- 0.00072 / get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\")   #On the wild side of the fence  #Deer-to-deer proximity rate omega_ww <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild)  #Duration of human-deer proximity event t_contact_deer_human_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Rural (minutes)\")  #Human-to-deer proximity rate omega_hw_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") /120  #Infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_rural <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_rural / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))"},{"path":"/articles/Connected_Systems.html","id":"captive-deer-in-outdoor-ranch-facilties-connected-to-wild-suburban-deer","dir":"Articles","previous_headings":"2. Sample parameters for simulations > System parameters","what":"Captive deer in outdoor ranch facilties connected to wild, suburban deer","title":"SARS-CoV-2 introduction and spread in connected systems","text":"modify ’s happening wild side fence suburban context, can keep captive side parameterized describe outdoor ranch facility scenario.","code":"#Duration of human-deer proximity event t_contact_deer_human_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Suburban (minutes)\")  #Human-to-deer proximity rate omega_hw_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120  #Infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_suburban <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_suburban / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))"},{"path":"/articles/Connected_Systems.html","id":"captive-deer-in-intensive-facilties-connected-to-wild-rural-deer","dir":"Articles","previous_headings":"2. Sample parameters for simulations > System parameters","what":"Captive deer in intensive facilties connected to wild, rural deer","title":"SARS-CoV-2 introduction and spread in connected systems","text":"Since defined parameter sets wild scenarios, modify ’s happening captive side fence.","code":"#Deer-to-deer proximity rate in ranch context, mimicking wild proximity rates with the influence of baiting (events per day). omega_cc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Deer Proximity Rate, Captive (per day)\")  #Probability of infection given that duration of proximity event. sigma_aero_deer_deer_intensive <- calc_sigma_aero(C_nu = C_nu_deer,                                             t_contact = t_contact_deer_deer_null / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  #Human-to-deer proximity rate in intensive facilities. omega_hc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120  #Duration of human-deer proximity event t_contact_deer_human_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")   #Infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_intensive <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                              t_contact = t_contact_deer_human_intensive / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))"},{"path":"/articles/Connected_Systems.html","id":"captive-deer-in-intensive-facilties-connected-to-wild-suburban-deer","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"Captive deer in intensive facilties connected to wild, suburban deer","title":"SARS-CoV-2 introduction and spread in connected systems","text":"final combination intensive captive facilities wild, suburban scenarios require additional parameters, can go ahead derive parameters system.","code":""},{"path":"/articles/Connected_Systems.html","id":"derive-parameters-used-the-sirs-ode-equation-set","dir":"Articles","previous_headings":"","what":"3. Derive parameters used the SIRS ODE equation set","title":"SARS-CoV-2 introduction and spread in connected systems","text":"","code":"ranch_rural.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  ranch_suburban.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  intensive_rural.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  intensive_suburban.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))"},{"path":"/articles/Connected_Systems.html","id":"define-initial-sir-compartment-sizes","dir":"Articles","previous_headings":"","what":"4. Define initial SIR compartment sizes","title":"SARS-CoV-2 introduction and spread in connected systems","text":"Next, define initial compartment sizes used systems.","code":"inits.fall <- initial_compartments(draws = nsamples) #Calculate initial distributions of animals across SIR compartments inits.steady <- initial_compartments(draws = nsamples, steady = TRUE) #Calculate initial distributions of animals across SIR compartments, excluding solving cumulative cases."},{"path":"/articles/Connected_Systems.html","id":"solve-the-sirs-ode-equations-and-calculate-daily-compartment-sizes","dir":"Articles","previous_headings":"","what":"5. Solve the SIRS ODE equations and calculate daily compartment sizes","title":"SARS-CoV-2 introduction and spread in connected systems","text":"now define duration simulation, solve SIRS ODE equations based parameter estimates. Calculate average daily prevalence, probability persistence, incidence proportion. whitetailedSIRS::SIRS_analysis_by_context, compute average prevalence, cumulative infections, persistence system (captive:wild scenario combination).","code":"times <- seq(0, 120, by = 1)  proj_ranch_rural <- run(iter = nsamples, initial_compartments = inits.fall, initial_compartments_steady = inits.steady, params = ranch_rural.params, times = times, name = \"Outdoor ranch and rural system\")  proj_ranch_suburban <- run(iter = nsamples, initial_compartments = inits.fall, initial_compartments_steady = inits.steady, params = ranch_suburban.params, times = times, name = \"Outdoor ranch and suburban system\")  proj_intensive_rural <- run(iter = nsamples, initial_compartments = inits.fall, initial_compartments_steady = inits.steady, params = intensive_rural.params, times = times, name = \"Intensive facility and rural system\")  proj_intensive_suburban <- run(iter = nsamples, initial_compartments = inits.fall, initial_compartments_steady = inits.steady, params = intensive_suburban.params, times = times, name = \"Intensive facility and suburban system\") persist.threshold <- 0.001 #Set prevalence threshold  #Ranch and rural system proj_ranch_rural %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(proj_ranch_rural$Context)[1],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%    summarize(Wild = mean(I_wild), Captive = mean(I_captive), Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative)) %>%     mutate(., Context = factor(Context, levels = c(\"Outdoor ranch and rural system\"))) %>%    arrange(., run_id) -> Prev_cumulative_ranch_rural_system_df #> `summarise()` has grouped output by 'Context'. You can override using the #> `.groups` argument.  proj_ranch_rural %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(proj_ranch_rural$Context)[1],nsamples))) %>%   mutate(., Persist_wild = I_wild > persist.threshold, Persist_captive = I_captive > persist.threshold) %>%    mutate(., Context = factor(Context, levels = c(\"Outdoor ranch and rural system\"))) %>%    select(., run_id, Context, Persist_wild, Persist_captive) %>%     merge(Prev_cumulative_ranch_rural_system_df,.) %>%        arrange(., run_id)-> Prev_cumulative_persist_ranch_rural_system_df  #Ranch and suburban system proj_ranch_suburban %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(proj_ranch_suburban$Context)[1],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%    summarize(Wild = mean(I_wild), Captive = mean(I_captive), Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative)) %>%     mutate(., Context = factor(Context, levels = c(\"Outdoor ranch and suburban system\"))) %>%    arrange(., run_id) -> Prev_cumulative_ranch_suburban_system_df #> `summarise()` has grouped output by 'Context'. You can override using the #> `.groups` argument.  proj_ranch_suburban %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(proj_ranch_suburban$Context)[1],nsamples))) %>%   mutate(., Persist_wild = I_wild > persist.threshold, Persist_captive = I_captive > persist.threshold) %>%    mutate(., Context = factor(Context, levels = c(\"Outdoor ranch and suburban system\"))) %>%    select(., run_id, Context, Persist_wild, Persist_captive) %>%     merge(Prev_cumulative_ranch_suburban_system_df,.) %>%        arrange(., run_id)-> Prev_cumulative_persist_ranch_suburban_system_df  #Intensive facility and rural system proj_intensive_rural %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(proj_intensive_rural$Context)[1],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%    summarize(Wild = mean(I_wild), Captive = mean(I_captive), Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative)) %>%     mutate(., Context = factor(Context, levels = c(\"Intensive facility and rural system\"))) %>%    arrange(., run_id) -> Prev_cumulative_intensive_rural_system_df #> `summarise()` has grouped output by 'Context'. You can override using the #> `.groups` argument.  proj_intensive_rural %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(proj_intensive_rural$Context)[1],nsamples))) %>%   mutate(., Persist_wild = I_wild > persist.threshold, Persist_captive = I_captive > persist.threshold) %>%    mutate(., Context = factor(Context, levels = c(\"Intensive facility and rural system\"))) %>%    select(., run_id, Context, Persist_wild, Persist_captive) %>%     merge(Prev_cumulative_intensive_rural_system_df,.) %>%        arrange(., run_id)-> Prev_cumulative_persist_intensive_rural_system_df  #Ranch and suburban system proj_intensive_suburban %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(proj_intensive_suburban$Context)[1],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%    summarize(Wild = mean(I_wild), Captive = mean(I_captive), Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative)) %>%     mutate(., Context = factor(Context, levels = c(\"Intensive facility and suburban system\"))) %>%    arrange(., run_id) -> Prev_cumulative_intensive_suburban_system_df #> `summarise()` has grouped output by 'Context'. You can override using the #> `.groups` argument.  proj_intensive_suburban %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(proj_intensive_suburban$Context)[1],nsamples))) %>%   mutate(., Persist_wild = I_wild > persist.threshold, Persist_captive = I_captive > persist.threshold) %>%    mutate(., Context = factor(Context, levels = c(\"Intensive facility and suburban system\"))) %>%    select(., run_id, Context, Persist_wild, Persist_captive) %>%     merge(Prev_cumulative_intensive_suburban_system_df,.) %>%        arrange(., run_id)-> Prev_cumulative_persist_intensive_suburban_system_df"},{"path":"/articles/Connected_Systems.html","id":"compare-outbreak-metrics-to-simulations-with-isolated-scenarios","dir":"Articles","previous_headings":"","what":"7. Compare outbreak metrics to simulations with isolated scenarios","title":"SARS-CoV-2 introduction and spread in connected systems","text":", take results whitetailedSIRS::SIRS_analysis_by_contexts calculate differences prevalence, cumulative infections, persistence fence line interactions can occur. First, read scenario results format match combined systems. Next, calculate differences prevalence, persistence, incidence proportions scenarios broader systems. , go system system: can combine summarize differences outbreak metrics. resulting table follows format table 2 Rosenblatt et al. Prep.","code":"#Read in scenario results for comparison with system results df <- whitetailedSIRS::scenario_results  df %>%     mutate(., run_id = case_when(Context == \"Outdoor ranch\" ~ run_id-0,       Context == \"Intensive facility\" ~ run_id-(nsamples*1),       Context == \"Wild, rural\" ~ run_id-(nsamples*2),       Context == \"Wild, suburban\" ~ run_id-(nsamples*3),)) -> df_to_match #Ranch, rural Prev_cumulative_persist_ranch_rural_system_df %>%     merge(., df_to_match[which(df_to_match$Context== \"Outdoor ranch\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"System_wild_prevalence\" = \"Wild\", \"System_captive_prevalence\" = \"Captive\", \"System_wild_cumulative\" = \"Cumulative_wild_infections\", \"System_captive_cumulative\" = \"Cumulative_captive_infections\",\"System_wild_persistence\" = \"Persist_wild\", \"System_captive_persistence\" = \"Persist_captive\", \"Context_captive_prevalence\" = \"Prevalence\", \"Context_captive_persistence\" = \"Persist\", \"Context_captive_cumulative\" = \"Cumulative_infections\") %>%     merge(., df_to_match[which(df_to_match$Context== \"Wild, rural\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"Context_wild_prevalence\" = \"Prevalence\", \"Context_wild_persistence\" = \"Persist\", \"Context_wild_cumulative\" = \"Cumulative_infections\") %>%     mutate(., Change_Prev_Wild = System_wild_prevalence - Context_wild_prevalence,            Change_Prev_Captive = System_captive_prevalence - Context_captive_prevalence,            Proportional_Change_Prev_Wild = Change_Prev_Wild/Context_wild_prevalence,            Proportional_Change_Prev_Captive = Change_Prev_Captive/Context_captive_prevalence,            Change_Cumulative_Wild = System_wild_cumulative - Context_wild_cumulative,            Change_Cumulative_Captive = System_captive_cumulative - Context_captive_cumulative,            Change_Persist_Wild = System_wild_persistence - Context_wild_persistence,            Change_Persist_Captive = System_captive_persistence - Context_captive_persistence) %>%     select(., Context, Change_Prev_Wild, Change_Prev_Captive, Proportional_Change_Prev_Wild, Proportional_Change_Prev_Captive, Change_Cumulative_Wild, Change_Cumulative_Captive, Change_Persist_Wild, Change_Persist_Captive) %>%     rename(., System = Context) -> ranch_rural_results  #Ranch, suburban Prev_cumulative_persist_ranch_suburban_system_df %>%     merge(., df_to_match[which(df_to_match$Context== \"Outdoor ranch\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"System_wild_prevalence\" = \"Wild\", \"System_captive_prevalence\" = \"Captive\", \"System_wild_cumulative\" = \"Cumulative_wild_infections\", \"System_captive_cumulative\" = \"Cumulative_captive_infections\",\"System_wild_persistence\" = \"Persist_wild\", \"System_captive_persistence\" = \"Persist_captive\", \"Context_captive_prevalence\" = \"Prevalence\", \"Context_captive_persistence\" = \"Persist\", \"Context_captive_cumulative\" = \"Cumulative_infections\") %>%     merge(., df_to_match[which(df_to_match$Context== \"Wild, suburban\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"Context_wild_prevalence\" = \"Prevalence\", \"Context_wild_persistence\" = \"Persist\", \"Context_wild_cumulative\" = \"Cumulative_infections\") %>%     mutate(., Change_Prev_Wild = System_wild_prevalence - Context_wild_prevalence,            Change_Prev_Captive = System_captive_prevalence - Context_captive_prevalence,            Proportional_Change_Prev_Wild = Change_Prev_Wild/Context_wild_prevalence,            Proportional_Change_Prev_Captive = Change_Prev_Captive/Context_captive_prevalence,            Change_Cumulative_Wild = System_wild_cumulative - Context_wild_cumulative,            Change_Cumulative_Captive = System_captive_cumulative - Context_captive_cumulative,            Change_Persist_Wild = System_wild_persistence - Context_wild_persistence,            Change_Persist_Captive = System_captive_persistence - Context_captive_persistence) %>%     select(., Context, Change_Prev_Wild, Change_Prev_Captive, Proportional_Change_Prev_Wild, Proportional_Change_Prev_Captive, Change_Cumulative_Wild, Change_Cumulative_Captive, Change_Persist_Wild, Change_Persist_Captive) %>%     rename(., System = Context) -> ranch_suburban_results  #Intensive, rural Prev_cumulative_persist_intensive_rural_system_df %>%     merge(., df_to_match[which(df_to_match$Context== \"Intensive facility\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"System_wild_prevalence\" = \"Wild\", \"System_captive_prevalence\" = \"Captive\", \"System_wild_cumulative\" = \"Cumulative_wild_infections\", \"System_captive_cumulative\" = \"Cumulative_captive_infections\",\"System_wild_persistence\" = \"Persist_wild\", \"System_captive_persistence\" = \"Persist_captive\", \"Context_captive_prevalence\" = \"Prevalence\", \"Context_captive_persistence\" = \"Persist\", \"Context_captive_cumulative\" = \"Cumulative_infections\") %>%     merge(., df_to_match[which(df_to_match$Context== \"Wild, rural\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"Context_wild_prevalence\" = \"Prevalence\", \"Context_wild_persistence\" = \"Persist\", \"Context_wild_cumulative\" = \"Cumulative_infections\") %>%     mutate(., Change_Prev_Wild = System_wild_prevalence - Context_wild_prevalence,            Change_Prev_Captive = System_captive_prevalence - Context_captive_prevalence,            Proportional_Change_Prev_Wild = Change_Prev_Wild/Context_wild_prevalence,            Proportional_Change_Prev_Captive = Change_Prev_Captive/Context_captive_prevalence,            Change_Cumulative_Wild = System_wild_cumulative - Context_wild_cumulative,            Change_Cumulative_Captive = System_captive_cumulative - Context_captive_cumulative,            Change_Persist_Wild = System_wild_persistence - Context_wild_persistence,            Change_Persist_Captive = System_captive_persistence - Context_captive_persistence) %>%     select(., Context, Change_Prev_Wild, Change_Prev_Captive, Proportional_Change_Prev_Wild, Proportional_Change_Prev_Captive, Change_Cumulative_Wild, Change_Cumulative_Captive, Change_Persist_Wild, Change_Persist_Captive) %>%     rename(., System = Context) -> intensive_rural_results  #Intensive, suburban Prev_cumulative_persist_intensive_suburban_system_df %>%     merge(., df_to_match[which(df_to_match$Context== \"Intensive facility\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"System_wild_prevalence\" = \"Wild\", \"System_captive_prevalence\" = \"Captive\", \"System_wild_cumulative\" = \"Cumulative_wild_infections\", \"System_captive_cumulative\" = \"Cumulative_captive_infections\",\"System_wild_persistence\" = \"Persist_wild\", \"System_captive_persistence\" = \"Persist_captive\", \"Context_captive_prevalence\" = \"Prevalence\", \"Context_captive_persistence\" = \"Persist\", \"Context_captive_cumulative\" = \"Cumulative_infections\") %>%     merge(., df_to_match[which(df_to_match$Context== \"Wild, suburban\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"Context_wild_prevalence\" = \"Prevalence\", \"Context_wild_persistence\" = \"Persist\", \"Context_wild_cumulative\" = \"Cumulative_infections\") %>%     mutate(., Change_Prev_Wild = System_wild_prevalence - Context_wild_prevalence,            Change_Prev_Captive = System_captive_prevalence - Context_captive_prevalence,            Proportional_Change_Prev_Wild = Change_Prev_Wild/Context_wild_prevalence,            Proportional_Change_Prev_Captive = Change_Prev_Captive/Context_captive_prevalence,            Change_Cumulative_Wild = System_wild_cumulative - Context_wild_cumulative,            Change_Cumulative_Captive = System_captive_cumulative - Context_captive_cumulative,            Change_Persist_Wild = System_wild_persistence - Context_wild_persistence,            Change_Persist_Captive = System_captive_persistence - Context_captive_persistence) %>%     select(., Context, Change_Prev_Wild, Change_Prev_Captive, Proportional_Change_Prev_Wild, Proportional_Change_Prev_Captive, Change_Cumulative_Wild, Change_Cumulative_Captive, Change_Persist_Wild, Change_Persist_Captive) %>%     rename(., System = Context) -> intensive_suburban_results sirs_results_systems <- rbind(ranch_suburban_results,intensive_suburban_results,ranch_rural_results,intensive_rural_results)  sirs_results_systems %>%     group_by(., System) %>%     summarise(., Wild_Prevalence_Change = paste0(round(median(Change_Prev_Wild)*100,4), \" (\", round(quantile(Change_Prev_Wild,probs = 0.1)*100,4), \"-\",round(quantile(Change_Prev_Wild,probs = 0.9)*100,4),\")\"), Captive_Prevalence_Change = paste0(round(median(Change_Prev_Captive)*100,4), \" (\", round(quantile(Change_Prev_Captive,probs = 0.1)*100,4), \"-\",round(quantile(Change_Prev_Captive,probs = 0.9)*100,4),\")\"),               Wild_Prevalence_Proportional_Change = paste0(round(median(Proportional_Change_Prev_Wild)*100,4), \" (\", round(quantile(Proportional_Change_Prev_Wild,probs = 0.1)*100,4), \"-\",round(quantile(Proportional_Change_Prev_Wild,probs = 0.9)*100,4),\")\"), Proportional_Captive_Prevalence_Change = paste0(round(median(Proportional_Change_Prev_Captive)*100,4), \" (\", round(quantile(Proportional_Change_Prev_Captive,probs = 0.1)*100,4), \"-\",round(quantile(Proportional_Change_Prev_Captive,probs = 0.9)*100,4),\")\"),              Wild_Incidence_Change = paste0(round(median(Change_Cumulative_Wild)*100,4), \" (\", round(quantile(Change_Cumulative_Wild,probs = 0.1)*100,4), \"-\",round(quantile(Change_Cumulative_Wild,probs = 0.9)*100,4),\")\"), Captive_Incidence_Change = paste0(round(median(Change_Cumulative_Captive)*100,4), \" (\", round(quantile(Change_Cumulative_Captive,probs = 0.1)*100,4), \"-\",round(quantile(Change_Cumulative_Captive,probs = 0.9)*100,4),\")\"),               Wild_Persist_Change = paste0(round(binom.confint(sum(Change_Persist_Wild),nsamples,methods = \"exact\")$mean,2), \" (\", round(binom.confint(sum(Change_Persist_Wild),nsamples,methods = \"exact\", conf.level = 0.80)$lower,4), \"-\", round(binom.confint(sum(Change_Persist_Wild),nsamples,methods = \"exact\", conf.level = 0.80)$upper,4), \")\"),              Captive_Persist_Change = sum(Change_Persist_Captive)) ->fence_effect  fence_effect %>%   kbl() %>%   kable_paper(\"hover\", full_width = T)"},{"path":"/articles/Connected_Systems.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"SARS-CoV-2 introduction and spread in connected systems","text":"vignette detailed simulations connected wild captive scenarios, refered systems. compared outbreaks systems outbreaks discrete scenarios. , better understand role fence line interactions wild captive deer populations spread establishment SARS-CoV-2 white-tailed deer. next vignette runs similar process, runs multiple parameter sets mimic range management alternatives potentially mitigate introduction, spread, establishment SARS-CoV-2 deer.","code":""},{"path":"/articles/Connected_Systems.html","id":"literature-cited","dir":"Articles","previous_headings":"","what":"Literature Cited","title":"SARS-CoV-2 introduction and spread in connected systems","text":"Rosenblatt, E., J.D. Cook, G.V. Direnzo, E.H.C. Grant, F. Arce, K. Pepin, F.J. Rudolph, M.C. Runge, S. Shriner, D. Walsh, B.. Mosher. Prep. Epidemiological modeling SARS-CoV-2 white-tailed deer (Odocoileus virginianus) reveals conditions introduction widespread transmission.","code":""},{"path":"/articles/Introduction.html","id":"welcome-to-whitetailedsirs","dir":"Articles","previous_headings":"","what":"Welcome to whitetailedSIRS!","title":"Introduction","text":"goal package provide source code functionality projecting outbreaks SARS-CoV-2 wild captive white-tailed deer. Since detection SARS-CoV-2 late 2019 ensuing Covid-19 pandemic, various monitoring efforts documented active infections white-tailed deer populations across North America. Multiple spillover events humans deer attributed source infections, growing evidence spillback deer humans possible occurred. Given widespread detection past active infections deer, zoonotic potential SARS-CoV-2 return human populations time non-human host, great interest better understanding outbreak dynamics white-tailed deer. package developed (1) describe degree introduction spread SARS-CoV-2 simulated white-tailed deer populations, (2) estimate average prevalence, cumulative proportion deer infected, probability long-term persistence simulations, (3) allow users simulate different management interventions estimate impacts outbreak dynamics. ’s current form, whitetailedSIRS vignettes support two manuscripts detailing epidemiology SARS-CoV-2 white-tailed deer (Rosenblatt et al. Prep) various decision alternatives influence outbreak dynamics deer herds (Cook et al. prep). learn rationale analytical approaches used, strongly suggest users read two paper. Users can uses package vignettes develop epidemiological simulations. version 1.0.0, provide useful functions workflow suggestions, encourage users develop applications. Future versions grow tools allow quick comparisons Structured-Decision-Making (SDM) framework.","code":""},{"path":"/articles/Introduction.html","id":"general-approach","dir":"Articles","previous_headings":"","what":"General Approach","title":"Introduction","text":"foundational concept package Susceptible-Infected-Recovered (SIR) epidemiological models. models, individuals can (S)usceptible infection SARS-CoV-2, ()nfected SARS-CoV-2 therefore infectious individuals, (R)ecovered individuals longer infections benefit immunity reinfection. Individuals transition S compartments based various transmission risks (\\(\\beta\\)), R compartments based long individuals take mount immune response cease infectious (\\(\\gamma\\)). case SARS-CoV-2 white-tailed deer, added transition R S compartments due waning acquired immunity previous infection (\\(\\alpha\\)). Therefore, referring SIRS epidemiological model package incorporate detail temporary immunity (Figure 1). Figure 1:  SIRS ordinary differential equations (ODE) work behind scenes calculate disease spreads given simulation. two included package support manuscripts previously mentioned, including: simple_sirs() - SIRS ode equation projecting S, , R compartment sizes daily basis simple_sirs_with_cumulative() - SIRS ode equation projecting S, , R compartment sizes daily basis, calculating cumulative proportion individuals infected course simulation. two sirs equations differ applications, explored greater detail sir_model_description vignette.","code":""},{"path":"/articles/Introduction.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Introduction","text":"bulk functions code whitetailedSIRS package deal estimating various parameters required calculate transmission probabilities, recovery rates, immunity loss rates. derived probabilities rates integrated ODE equations, allowing calculation outbreak characteristics. user see typical workflow calculations rates: draw_elicitation_samples() draws user-defined number random samples parametric error distributions set parameters. error distributions characterized distributions aggregated across multiple experts, detailed Rosenblatt et al. Prep. get_EE_param_vals() extracts random samples drawn draw_elicitation_samples() particular parameter. calc_contact_rate() uses established contact rate model calculate deer-deer proximity rates wild deer captive deer kept wild densities. proximity rates based assumptions habitat availability, deer density, effects density-dependence. calc_sigma_aero() calculates probability infection SARS-CoV-2 transmission via aerosols. function considers duration contact viral emission probability calculation, can used deer--deer human--deer contexts. cal_sigma_dc() calculates probability infection SARS-CoV-2 transmission via fluids transferred upon contact. function considers viral load volume transferred probability calculation, can used deer--deer human--deer contexts. alternative() calculates final set derived parameters integrated ODE equations transmission risks (\\(\\beta\\)), recovery rates (\\(\\gamma\\)), immunity loss rates (\\(\\alpha\\)). function run last step, output contains parameter values needed step 3. initial_compartments() defines starting proportion deer compartment, wild captive populations. one population interest user, can set compartments 0 population. run() takes initial compartments (output initial_compartments()), SIR ODE equations (established simple_sirs() simple_sirs_with_cumulative()), epidemiological parameters (output object alternative()), projects daily compartment sizes given preconditions. workflow can integrate multiple scenarios sets parameters, can run iterative manner explores uncertainty various parameter sets.","code":""},{"path":"/articles/Introduction.html","id":"outputs","dir":"Articles","previous_headings":"","what":"Outputs","title":"Introduction","text":"current version (1.0.0), reported metrics describe outbreaks derived vignettes, yet integrated functions. Generally speaking, user see following metrics describe aspects simulated SARS-CoV-2 outbreak white-tailed deer: Force--Infection: Degree introduction humans deer Basic reproductive Number (\\(R_0\\)): Number secondary infections resulting infected deer Average daily prevalence: Average daily proportion deer infected compartment Persistence: Logical (TRUE/FALSE) value indicating >0.1% deer infected ODE system equilibrium. Incidence proportion: total proportion population infected simulation.","code":""},{"path":"/articles/Introduction.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Introduction","text":"Next, can look description epidemiological model used explore outbreak dynamics simulated white-tailed deer populations. Click advance SIRS model description vignette.","code":""},{"path":"/articles/Introduction.html","id":"literature-cited","dir":"Articles","previous_headings":"","what":"Literature Cited","title":"Introduction","text":"Cook, J.D., E. Rosenblatt, G.V. Direnzo, E.H.C. Grant, B.. Mosher, F. Arce, S. Christensen, R. Ghai, M.C. Runge. Prep. Using decision science evaluate risk management SARS-CoV-2 zoonotic transmission humans white-tailed deer. Rosenblatt, E., J.D. Cook, G.V. Direnzo, E.H.C. Grant, F. Arce, K. Pepin, F.J. Rudolph, M.C. Runge, S. Shriner, D. Walsh, B.. Mosher. Prep. Epidemiological modeling SARS-CoV-2 white-tailed deer (Odocoileus virginianus) reveals conditions introduction widespread transmission.","code":""},{"path":"/articles/Management_Alternatives_Systems.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction:","title":"Evaluation of management alternatives across systems","text":"vignette, run outbreak simulations estimate effects various management alternatives dynamics SARS-CoV-2 outbreak wild captive white-tailed deer. considered captive:wild systems separated fence. management alternatives may implemented wild captive populations, one scenario. focus 11 alternatives, ranging across agriculture, public health, wildlife sectors. alternatives detailed Cook et al. Prep.. alternatives (parameter changes) include: Local reductions wild deer populations agency culling hunter harvest (Reduce wild deer densities 10% 25%) Prohibit deer feeding baiting reduce congregations wild deer (Remove inflation factor proximity rates due bait supplemental feeding) Pause/reduce research permits work wild deer susceptible wildlife/animal species (Reduce human-wild deer interaction) Encourage limiting human-deer interactions including participating conduct attracts wildlife (Proportionally reduce human-deer proximity rates reflecting rural:suburban rates) Encourage (train proper) use enhanced personal protective equipment interactions captive wild deer (Integrate effects masks aerosol transmission humans deer) Animal vaccination requirement (captive deer start simulations recovered; captive deer start simulations recovered boosted immunity wanes) Upgrade fences double fences prevent transmission captive wild deer (Transmission captive wild deer set zero) Increase ventilation indoor, intensive facilities (Increase air exchange rate) detail alternatives systems can implemented: evaluate effects interventions, follow analytical framework vignettes. looking multiple systems, work flow differ little vignette. Steps include: Set number simulations run Sample parameters simulations Establish systems test alternatives Combine summarize results across alternatives systems Impact cross-sector collaborations (multiple alternatives implemented concert).","code":"ActionTable <- data.frame(Alternative = c(\"Reduce wild density by 10%\", \"Reduce wild density by 25%\", \"Eliminate baiting\", \"Pause Research\", \"Restrict human interactions with deer\",\"PPE, Wild\" , \"PPE, Captive\", \"PPE, Both\", \"Vaccinate captive deer\", \"Vaccinate and boost captive deer\", \"Double-fence captive facilities\", \"Increase air exchange rate in intensive facilities\"), Sector = c(\"Wildlife\", \"Wildlife\", \"Wildlife\", \"Wildlife\", \"Public Health\",\"Public Health\",\"Public Health\",\"Public Health\", \"Agriculture\", \"Agriculture\",\"Agriculture\", \"Agriculture\"), Ranch_Rural_System = c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE), Ranch_Suburban_System = c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,FALSE), Intensive_Facility_Rural_System = c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE), Intensive_Facility_Suburban_System = c(TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE,TRUE))  ActionTable %>%   kbl() %>%   kable_paper(\"hover\", full_width = F)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"set-number-of-simulations-to-run","dir":"Articles","previous_headings":"","what":"1. Set number of simulations to run","title":"Evaluation of management alternatives across systems","text":"Like vignettes, set seed sample size. use small sample size ease vignette loading. also define length simulation .","code":""},{"path":[]},{"path":"/articles/Management_Alternatives_Systems.html","id":"common-parameters","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"Common Parameters","title":"Evaluation of management alternatives across systems","text":"bring elicitation data various parameters included simulations. can define number parameters used every system want test alternatives.","code":""},{"path":"/articles/Management_Alternatives_Systems.html","id":"scenario-parameters","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"Scenario parameters","title":"Evaluation of management alternatives across systems","text":", define parameter values used baseline projection system:","code":""},{"path":"/articles/Management_Alternatives_Systems.html","id":"captive-deer-in-outdoor-ranch-facilities","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Scenario parameters","what":"Captive deer in outdoor ranch facilities","title":"Evaluation of management alternatives across systems","text":"","code":"#Ranch Parameters #Deer-to-deer proximity rate in ranch context, mimicing wild proximity rates with the influence of baiting (events per day). omega_cc_ranch <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   #Human-to-deer proximity rate in ranch context, mimicing suburban proximitty rates (events per day). omega_hc_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120   #Estimate duration of human-deer proximity event t_contact_deer_human_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")   #Estimate probability of infection from deer-deer proximity given that duration of proximity event. sigma_aero_deer_deer_ranch <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples)   #Calculate infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_ranch <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_ranch / 60,                                         r = r_deer, nsamples = nsamples)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"captive-deer-in-intensive-facilities","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Scenario parameters","what":"Captive deer in intensive facilities","title":"Evaluation of management alternatives across systems","text":"","code":"#Deer-to-deer proximity rate in intensive context (events per day). omega_cc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Deer Proximity Rate, Captive (per day)\")   #Human-to-deer proximity rate in intensive context (events per day). omega_hc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Captive (per 120 days)\") /120   #Estimate duration of human-deer proximity event t_contact_deer_human_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")  #Estimate probability of infection from deer-deer proximity given that duration of proximity event. sigma_aero_deer_deer_intensive <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  #Calculate infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_intensive <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_intensive / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))"},{"path":"/articles/Management_Alternatives_Systems.html","id":"wild-deer-in-a-suburban-setting","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Scenario parameters","what":"Wild deer in a suburban setting","title":"Evaluation of management alternatives across systems","text":"","code":"#Deer-to-deer proximity rate (events per day). omega_ww_suburban <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  #Human-to-deer proximity rate (events per day). omega_hw_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120  #Estimate duration of human-deer proximity event t_contact_deer_human_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Suburban (minutes)\")  #Estimate probability of infection from deer-deer proximity given that duration of proximity event. sigma_aero_deer_deer_suburban <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  #Calculate infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_suburban <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_suburban / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))"},{"path":"/articles/Management_Alternatives_Systems.html","id":"wild-deer-in-a-rural-setting","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Scenario parameters","what":"Wild deer in a rural setting","title":"Evaluation of management alternatives across systems","text":"","code":"#Deer-to-deer proximity rate (events per day). omega_ww_rural <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  #Human-to-deer proximity rate (events per day). omega_hw_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") /120  #Estimate duration of human-deer proximity event t_contact_deer_human_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Rural (minutes)\")  #Estimate probability of infection from deer-deer proximity given that duration of proximity event. sigma_aero_deer_deer_rural <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  #Calculate infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_rural <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_rural / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))"},{"path":"/articles/Management_Alternatives_Systems.html","id":"establish-systems-and-test-alternatives","dir":"Articles","previous_headings":"","what":"3.Establish Systems and Test Alternatives","title":"Evaluation of management alternatives across systems","text":"define captive-wild system, simulate SARS-CoV-2 outbreaks interventions, apply 12 candidate interventions altering relevant parameter. 13 simulations (1 action + 12 interventions) combined one data frame end code chunk.","code":""},{"path":"/articles/Management_Alternatives_Systems.html","id":"combined-system-of-outdoor-ranch-facilities-and-wild-deer-in-a-suburban-setting","dir":"Articles","previous_headings":"3.Establish Systems and Test Alternatives","what":"Combined system of outdoor ranch facilities and wild deer in a suburban setting","title":"Evaluation of management alternatives across systems","text":"","code":"ranch_suburban.inits.fall <- initial_compartments(draws = nsamples) ranch_suburban.inits.steady <- initial_compartments(draws = nsamples, steady = TRUE)   ranch_suburban.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_null <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params, times = times, name = \"Baseline\")  #Alternatives #1. 10% density reduction omega_ww_alt1_density.red.10 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.9)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   ranch_suburban.params_alt1 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt1_density.red.10, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt1 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt1, times = times, name = \"Reduce wild density by 10%\")  #2. 25% density reduction omega_ww_alt2_density.red.25 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  ranch_suburban.params_alt2 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt2_density.red.25, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt2 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt2, times = times, name = \"Reduce wild density by 25%\")  #3. Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  ranch_suburban.params_alt3 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt3 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt3, times = times, name = \"Eliminate baiting\")  #4. Pause research (assuming random 1-50% of human-wild deer interaction) omega_hw_alt4_pause.research <- omega_hw_suburban*runif(nsamples, min = 0.5, max = 0.99) #reduce human deer proximity rate in the wild up to 50%  ranch_suburban.params_alt4 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_alt4_pause.research, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt4 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt4, times = times, name = \"Pause Research\")  #5. Require PPE for humans in wild settings sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_suburban/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  ranch_suburban.params_alt5 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt5 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt5, times = times, name = \"PPE, Wild\")  #6. Require PPE for humans in captive settings sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_ranch/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  ranch_suburban.params_alt6 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt6 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt6, times = times, name = \"PPE, Captive\")  #7. Require PPE for humans in wild and captive settings (use derived parameters from 5 and 6)  ranch_suburban.params_alt7 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt7 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt7, times = times, name = \"PPE, Both\")  #8. Vaccinate captive deer (start with r_captive = 1) ranch_suburban.inits_alt8 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) ranch_suburban.inits_alt8.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  proj_ranch_suburban_alt8 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits_alt8, initial_compartments_steady = ranch_suburban.inits_alt8.steady,params = ranch_suburban.params, times = times, name = \"Vaccinate captive deer\")  #9. Vaccinate and boost captive deer (start with r_captive = 1) ranch_suburban.inits_alt9 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) ranch_suburban.inits_alt9.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  boost_alt9 <- rep(0.9,nsamples)  ranch_suburban.params_alt9 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)   proj_ranch_suburban_alt9 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits_alt9, initial_compartments_steady = ranch_suburban.inits_alt9.steady, params = ranch_suburban.params_alt9, times = times, name = \"Vaccinate and boost captive deer\")  #10. Double fence captive facilities omega_cw_alt10 <- rep(0, nsamples)  ranch_suburban.params_alt10 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw_alt10, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_ranch_suburban_alt10 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt10, times = times, name = \"Double-fence captive facilities\")  #11. Restrict human interaction (using proportional reduction from suburban to rural) human_restrictions <- (get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") / 120)/(get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") / 120)  ranch_suburban.params_alt11 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban*human_restrictions, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_ranch_suburban_alt11 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt11, times = times, name = \"Restrict human interactions\")  #12. Improve indoor facility air exchange (does not apply to outdoor ranch facilities)  proj_ranch_suburban <- rbind(proj_ranch_suburban_null, proj_ranch_suburban_alt1, proj_ranch_suburban_alt2, proj_ranch_suburban_alt3, proj_ranch_suburban_alt4, proj_ranch_suburban_alt5, proj_ranch_suburban_alt6, proj_ranch_suburban_alt7, proj_ranch_suburban_alt8, proj_ranch_suburban_alt9, proj_ranch_suburban_alt10, proj_ranch_suburban_alt11)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"calcualte-prevalence-cumulative-infections-and-persistence-for-interventions-in-the-outdoor-ranch-wild-suburban-system","dir":"Articles","previous_headings":"3.Establish Systems and Test Alternatives > Combined system of outdoor ranch facilities and wild deer in a suburban setting","what":"Calcualte prevalence, cumulative infections, and persistence for interventions in the outdoor ranch : wild, suburban system","title":"Evaluation of management alternatives across systems","text":"can see result processing, dataframe listing outbreak metrics iterations management alternative (including default baseline). repeat systems, use summary functions compare effect alternative baseline, system.","code":"persist.threshold <- 0.001  proj_ranch_suburban %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_ranch_suburban_df  proj_ranch_suburban %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Outdoor ranch and suburban deer\",nrow(.)), Alternative = c(rep(unique(proj_ranch_suburban$Context)[1],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[2],length(times)*nsamples), rep(unique(proj_ranch_suburban$Context)[3],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[4],length(times)*nsamples), rep(unique(proj_ranch_suburban$Context)[5],length(times)*nsamples), rep(unique(proj_ranch_suburban$Context)[6],length(times)*nsamples), rep(unique(proj_ranch_suburban$Context)[7],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[8],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[9],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[10],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[11],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[12],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_ranch_suburban_df, by = \"run_id\")-> alternatives_for_ranch_suburban_complex head(alternatives_for_ranch_suburban_complex) #>   run_id                         Complex Alternative     meanWild  meanCaptive #> 1      1 Outdoor ranch and suburban deer    Baseline 6.676796e-02 0.0688039960 #> 2      2 Outdoor ranch and suburban deer    Baseline 9.735172e-05 0.0000827675 #> 3      3 Outdoor ranch and suburban deer    Baseline 5.937537e-02 0.0598487381 #> 4      4 Outdoor ranch and suburban deer    Baseline 3.225770e-05 0.0002175466 #> 5      5 Outdoor ranch and suburban deer    Baseline 4.790617e-02 0.0479719483 #> 6      6 Outdoor ranch and suburban deer    Baseline 2.432780e-02 0.0266367681 #>   cumulativeWild cumulativeCaptive persistWild persistCaptive #> 1    1.397087341       1.435637721        TRUE           TRUE #> 2    0.002060018       0.001751416       FALSE          FALSE #> 3    1.236692239       1.246979083        TRUE           TRUE #> 4    0.000686242       0.004626696       FALSE          FALSE #> 5    0.967220064       0.968339379        TRUE           TRUE #> 6    0.537436553       0.573908352        TRUE           TRUE"},{"path":"/articles/Management_Alternatives_Systems.html","id":"combined-system-of-outdoor-ranch-facilities-and-wild-deer-in-a-rural-setting","dir":"Articles","previous_headings":"3.Establish Systems and Test Alternatives","what":"Combined system of outdoor ranch facilities and wild deer in a rural setting","title":"Evaluation of management alternatives across systems","text":"","code":"ranch_rural.inits.fall <- initial_compartments(draws = nsamples) ranch_rural.inits.steady <- initial_compartments(draws = nsamples, steady = TRUE)  ranch_rural.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_null <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params, times = times, name = \"Baseline\")  #Alternatives #1. 10% density reduction omega_ww_alt1_density.red.10 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.9)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   ranch_rural.params_alt1 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt1_density.red.10, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt1 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt1, times = times, name = \"Reduce wild density by 10%\")  #2. 25% density reduction omega_ww_alt2_density.red.25 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  ranch_rural.params_alt2 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt2_density.red.25, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt2 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt2, times = times, name = \"Reduce wild density by 25%\")  #3. Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  ranch_rural.params_alt3 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt3 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt3, times = times, name = \"Eliminate baiting\")  #4. Pause research (assuming random 1-50% of human-wild deer interaction) omega_hw_alt4_pause.research <- omega_hw_rural*runif(nsamples, min = 0.5, max = 0.99) #reduce human deer proximity rate in the wild up to 50%  ranch_rural.params_alt4 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_alt4_pause.research, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt4 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt4, times = times, name = \"Pause Research\")  #5. Require PPE for humans in wild settings sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_rural/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  ranch_rural.params_alt5 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt5 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt5, times = times, name = \"PPE, Wild\")  #6. Require PPE for humans in captive settings sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_ranch/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  ranch_rural.params_alt6 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt6 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt6, times = times, name = \"PPE, Captive\")  #7. Require PPE for humans in wild and captive settings (use derived parameters from 5 and 6)  ranch_rural.params_alt7 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt7 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt7, times = times, name = \"PPE, Both\")  #8. Vaccinate captive deer (start with r_captive = 1) ranch_rural.inits_alt8 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) ranch_rural.inits_alt8_steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = T)  proj_ranch_rural_alt8 <- run(iter = nsamples, initial_compartments = ranch_rural.inits_alt8, initial_compartments_steady = ranch_rural.inits_alt8_steady, params = ranch_rural.params, times = times, name = \"Vaccinate captive deer\")  #9. Vaccinate and boost captive deer (start with r_captive = 1) ranch_rural.inits_alt9 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) ranch_rural.inits_alt9_steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = T)   boost_alt9 <- rep(0.9,nsamples)  ranch_rural.params_alt9 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)   proj_ranch_rural_alt9 <- run(iter = nsamples, initial_compartments = ranch_rural.inits_alt9, initial_compartments_steady = ranch_rural.inits_alt9_steady, params = ranch_rural.params_alt9, times = times, name = \"Vaccinate and boost captive deer\")  #10. Double fence captive facilities omega_cw_alt10 <- rep(0, nsamples)  ranch_rural.params_alt10 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw_alt10, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_ranch_rural_alt10 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt10, times = times, name = \"Double-fence captive facilities\")  #11. Restrict human interaction (using proportional reduction from suburban to rural) human_restrictions <- (get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") / 120)/(get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") / 120)  ranch_rural.params_alt11 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural*human_restrictions, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_ranch_rural_alt11 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt11, times = times, name = \"Restrict human interactions\")  #12. Improve indoor facility air exchange (does not apply to outdoor ranch facilities)  proj_ranch_rural <- rbind(proj_ranch_rural_null, proj_ranch_rural_alt1, proj_ranch_rural_alt2, proj_ranch_rural_alt3, proj_ranch_rural_alt4, proj_ranch_rural_alt5, proj_ranch_rural_alt6, proj_ranch_rural_alt7, proj_ranch_rural_alt8, proj_ranch_rural_alt9, proj_ranch_rural_alt10, proj_ranch_rural_alt11)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"calculate-prevalence-cumulative-infections-and-persistence-for-interventions-in-the-outdoor-ranch-wild-rural-system","dir":"Articles","previous_headings":"3.Establish Systems and Test Alternatives > Combined system of outdoor ranch facilities and wild deer in a rural setting","what":"Calculate prevalence, cumulative infections, and persistence for interventions in the outdoor ranch : wild, rural system","title":"Evaluation of management alternatives across systems","text":"","code":"persist.threshold <- 0.001  proj_ranch_rural %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_ranch_rural_df  proj_ranch_rural %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Outdoor ranch and rural deer\",nrow(.)), Alternative = c(rep(unique(proj_ranch_rural$Context)[1],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[2],length(times)*nsamples), rep(unique(proj_ranch_rural$Context)[3],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[4],length(times)*nsamples), rep(unique(proj_ranch_rural$Context)[5],length(times)*nsamples), rep(unique(proj_ranch_rural$Context)[6],length(times)*nsamples), rep(unique(proj_ranch_rural$Context)[7],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[8],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[9],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[10],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[11],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[12],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_ranch_rural_df, by = \"run_id\")-> alternatives_for_ranch_rural_complex"},{"path":"/articles/Management_Alternatives_Systems.html","id":"combined-system-of-intensive-captive-facilities-and-wild-deer-in-a-suburban-setting","dir":"Articles","previous_headings":"3.Establish Systems and Test Alternatives","what":"Combined system of intensive captive facilities and wild deer in a suburban setting","title":"Evaluation of management alternatives across systems","text":"","code":"intensive_suburban.inits.fall <- initial_compartments(draws = nsamples) intensive_suburban.inits.steady <- initial_compartments(draws = nsamples, steady = TRUE)   intensive_suburban.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_null <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params, times = times, name = \"Baseline\")  #Alternatives #1. 10% density reduction omega_ww_alt1_density.red.10 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.9)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   intensive_suburban.params_alt1 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt1_density.red.10, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt1 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt1, times = times, name = \"Reduce wild density by 10%\")  #2. 25% density reduction omega_ww_alt2_density.red.25 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  intensive_suburban.params_alt2 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt2_density.red.25, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt2 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt2, times = times, name = \"Reduce wild density by 25%\")  #3. Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  intensive_suburban.params_alt3 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt3 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt3, times = times, name = \"Eliminate baiting\")  #4. Pause research (assuming random 1-50% of human-wild deer interaction) omega_hw_alt4_pause.research <- omega_hw_suburban*runif(nsamples, min = 0.5, max = 0.99) #reduce human deer proximity rate in the wild up to 50%  intensive_suburban.params_alt4 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_alt4_pause.research, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt4 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt4, times = times, name = \"Pause Research\")  #5. Require PPE for humans in wild settings sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_suburban/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  intensive_suburban.params_alt5 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt5 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt5, times = times, name = \"PPE, Wild\")  #6. Require PPE for humans in captive settings sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_intensive/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  intensive_suburban.params_alt6 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt6 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt6, times = times, name = \"PPE, Captive\")  #7. Require PPE for humans in wild and captive settings (use derived parameters from 5 and 6)  intensive_suburban.params_alt7 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt7 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params =  intensive_suburban.params_alt7, times = times, name = \"PPE, Both\")  #8. Vaccinate captive deer (start with r_captive = 1) intensive_suburban.inits_alt8.fall <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) intensive_suburban.inits_alt8.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  proj_intensive_suburban_alt8 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits_alt8.fall, initial_compartments_steady = intensive_suburban.inits_alt8.steady, params = intensive_suburban.params, times = times, name = \"Vaccinate captive deer\")  #9. Vaccinate and boost captive deer (start with r_captive = 1) intensive_suburban.inits_alt9.fall <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) intensive_suburban.inits_alt9.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  boost_alt9 <- rep(0.9,nsamples)  intensive_suburban.params_alt9 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)   proj_intensive_suburban_alt9 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits_alt9.fall, initial_compartments_steady = intensive_suburban.inits_alt9.steady, params = intensive_suburban.params_alt9, times = times, name = \"Vaccinate and boost captive deer\")  #10. Double fence captive facilities omega_cw_alt10 <- rep(0, nsamples)  intensive_suburban.params_alt10 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw_alt10, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_suburban_alt10 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt10, times = times, name = \"Double-fence captive facilities\")  #11. Restrict human interaction (using proportional reduction from suburban to rural) human_restrictions <- (get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") / 120)/(get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") / 120)  intensive_suburban.params_alt11 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban*human_restrictions, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_suburban_alt11 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt11, times = times, name = \"Restrict human interactions\")  #12. Improve indoor facility air exchange sigma_aero_deer_human_intensive_alt12 <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_intensive/60, r = r_deer, nsamples = nsamples)  sigma_aero_deer_deer_intensive_alt12 <- calc_sigma_aero(C_nu = C_nu_deer, t_contact = t_contact_deer_deer_null/60, r = r_deer, nsamples = nsamples)  intensive_suburban.params_alt12 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive_alt12, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive_alt12, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_suburban_alt12 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt12, times = times, name = \"Improve indoor facility air quality\")  proj_intensive_suburban <- rbind(proj_intensive_suburban_null, proj_intensive_suburban_alt1, proj_intensive_suburban_alt2, proj_intensive_suburban_alt3, proj_intensive_suburban_alt4, proj_intensive_suburban_alt5, proj_intensive_suburban_alt6, proj_intensive_suburban_alt7, proj_intensive_suburban_alt8, proj_intensive_suburban_alt9, proj_intensive_suburban_alt10, proj_intensive_suburban_alt11, proj_intensive_suburban_alt12)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"calculate-prevalence-cumulative-infections-and-persistence-for-interventions-in-the-intensive-facility-wild-suburban-system","dir":"Articles","previous_headings":"3.Establish Systems and Test Alternatives > Combined system of intensive captive facilities and wild deer in a suburban setting","what":"Calculate prevalence, cumulative infections, and persistence for interventions in the intensive facility : wild, suburban system","title":"Evaluation of management alternatives across systems","text":"","code":"persist.threshold <- 0.001  proj_intensive_suburban %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_intensive_suburban_df   proj_intensive_suburban %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Intensive facility and suburban deer\",nrow(.)), Alternative = c(rep(unique(proj_intensive_suburban$Context)[1],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[2],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[3],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[4],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[5],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[6],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[7],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[8],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[9],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[10],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[11],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[12],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[13],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%    merge(.,Persist_intensive_suburban_df, by = \"run_id\") -> alternatives_for_intensive_suburban_complex"},{"path":"/articles/Management_Alternatives_Systems.html","id":"combined-system-of-intensive-captive-facilities-and-wild-deer-in-a-rural-setting","dir":"Articles","previous_headings":"3.Establish Systems and Test Alternatives","what":"Combined system of intensive captive facilities and wild deer in a rural setting","title":"Evaluation of management alternatives across systems","text":"","code":"intensive_rural.inits.fall <- initial_compartments(draws = nsamples) intensive_rural.inits.steady <- initial_compartments(draws = nsamples, steady = TRUE)   intensive_rural.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_null <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params, times = times, name = \"Baseline\")  #Alternatives #1. 10% density reduction omega_ww_alt1_density.red.10 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.9)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   intensive_rural.params_alt1 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt1_density.red.10, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt1 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt1, times = times, name = \"Reduce wild density by 10%\")  #2. 25% density reduction omega_ww_alt2_density.red.25 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  intensive_rural.params_alt2 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt2_density.red.25, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt2 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt2, times = times, name = \"Reduce wild density by 25%\")  #3. Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  intensive_rural.params_alt3 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt3 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt3, times = times, name = \"Eliminate baiting\")  #4. Pause research (assuming random 1-50% of human-wild deer interaction) omega_hw_alt4_pause.research <- omega_hw_rural*runif(nsamples, min = 0.5, max = 0.99) #reduce human deer proximity rate in the wild up to 50%  intensive_rural.params_alt4 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_alt4_pause.research, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt4 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt4, times = times, name = \"Pause Research\")  #5. Require PPE for humans in wild settings sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_rural/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  intensive_rural.params_alt5 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt5 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt5, times = times, name = \"PPE, Wild\")  #6. Require PPE for humans in captive settings sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_intensive/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  intensive_rural.params_alt6 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt6 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt6, times = times, name = \"PPE, Captive\")  #7. Require PPE for humans in wild and captive settings (use derived parameters from 5 and 6)  intensive_rural.params_alt7 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt7 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt7, times = times, name = \"PPE, Both\")  #8. Vaccinate captive deer (start with r_captive = 1) intensive_rural.inits.fall_alt8 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) intensive_rural.inits.steady_alt8 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  proj_intensive_rural_alt8 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall_alt8, initial_compartments_steady = intensive_rural.inits.steady_alt8, params = intensive_rural.params, times = times, name = \"Vaccinate captive deer\")  #9. Vaccinate and boost captive deer (start with r_captive = 1) intensive_rural.inits.fall_alt9 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) intensive_rural.inits.steady_alt9 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  boost_alt9 <- rep(0.9,nsamples)  intensive_rural.params_alt9 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)   proj_intensive_rural_alt9 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall_alt9, initial_compartments_steady = intensive_rural.inits.steady_alt9, params = intensive_rural.params_alt9, times = times, name = \"Vaccinate and boost captive deer\")  #10. Double fence captive facilities omega_cw_alt10 <- rep(0, nsamples)  intensive_rural.params_alt10 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw_alt10, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_rural_alt10 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt10, times = times, name = \"Double-fence captive facilities\")  #11. Restrict human interaction (using proportional reduction from suburban to rural) human_restrictions <- (get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") / 120)/(get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") / 120)  intensive_rural.params_alt11 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural*human_restrictions, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_rural_alt11 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt11, times = times, name = \"Restrict human interactions\")  #12. Improve indoor facility air exchange sigma_aero_deer_human_intensive_alt12 <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_intensive/60, r = r_deer, nsamples = nsamples)  sigma_aero_deer_deer_intensive_alt12 <- calc_sigma_aero(C_nu = C_nu_deer, t_contact = t_contact_deer_deer_null/60, r = r_deer, nsamples = nsamples)  intensive_rural.params_alt12 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive_alt12, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive_alt12, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_rural_alt12 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt12, times = times, name = \"Improve indoor facility air quality\")  proj_intensive_rural <- rbind(proj_intensive_rural_null, proj_intensive_rural_alt1, proj_intensive_rural_alt2, proj_intensive_rural_alt3, proj_intensive_rural_alt4, proj_intensive_rural_alt5, proj_intensive_rural_alt6, proj_intensive_rural_alt7, proj_intensive_rural_alt8, proj_intensive_rural_alt9, proj_intensive_rural_alt10, proj_intensive_rural_alt11, proj_intensive_rural_alt12)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"calculate-prevalence-cumulative-infections-and-persistence-for-interventions-in-the-intensive-facility-wild-rural-system","dir":"Articles","previous_headings":"3.Establish Systems and Test Alternatives > Combined system of intensive captive facilities and wild deer in a rural setting","what":"Calculate prevalence, cumulative infections, and persistence for interventions in the intensive facility : wild, rural system","title":"Evaluation of management alternatives across systems","text":"","code":"persist.threshold <- 0.001  proj_intensive_rural %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_intensive_rural_df  proj_intensive_rural %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Intensive facility and rural deer\",nrow(.)), Alternative = c(rep(unique(proj_intensive_rural$Context)[1],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[2],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[3],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[4],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[5],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[6],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[7],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[8],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[9],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[10],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[11],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[12],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[13],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%    merge(.,Persist_intensive_rural_df, by = \"run_id\") -> alternatives_for_intensive_rural_complex"},{"path":"/articles/Management_Alternatives_Systems.html","id":"combine-and-summarize-results","dir":"Articles","previous_headings":"","what":"4.Combine and summarize results","title":"Evaluation of management alternatives across systems","text":", combine results alternatives, combinations captive wild scenarios (systems). results saved package’s data folder, can accessed whitetailedSIRS::alternatives_across_systems.","code":"alternatives_across_systems <- rbind(alternatives_for_ranch_suburban_complex, alternatives_for_ranch_rural_complex, alternatives_for_intensive_suburban_complex, alternatives_for_intensive_rural_complex)  alternatives_across_systems %>%     group_by(., Complex, Alternative) %>%     summarize(., Wild_Cumulative = median(cumulativeWild), Captive_Cumulative = median(cumulativeCaptive)) #> `summarise()` has grouped output by 'Complex'. You can override using the #> `.groups` argument. #> # A tibble: 50 × 4 #> # Groups:   Complex [4] #>    Complex                        Alternative Wild_Cumulative Captive_Cumulative #>    <chr>                          <chr>                 <dbl>              <dbl> #>  1 Intensive facility and rural … Baseline            0.861                 1.47 #>  2 Intensive facility and rural … Double-fen…         0.494                 1.47 #>  3 Intensive facility and rural … Eliminate …         0.00270               1.47 #>  4 Intensive facility and rural … Improve in…         0.832                 1.14 #>  5 Intensive facility and rural … PPE, Both           0.856                 1.46 #>  6 Intensive facility and rural … PPE, Capti…         0.857                 1.46 #>  7 Intensive facility and rural … PPE, Wild           0.861                 1.47 #>  8 Intensive facility and rural … Pause Rese…         0.861                 1.47 #>  9 Intensive facility and rural … Reduce wil…         0.783                 1.47 #> 10 Intensive facility and rural … Reduce wil…         0.521                 1.47 #> # ℹ 40 more rows"},{"path":"/articles/Management_Alternatives_Systems.html","id":"impact-of-cross-sector-collaboration","dir":"Articles","previous_headings":"","what":"5.Impact of Cross-Sector Collaboration","title":"Evaluation of management alternatives across systems","text":"Finally, simulated SARS-CoV-2 outbreaks system multiple alternatives applied. , implement effective alternative sector (agriculture, public health, wildlife) concert understand cumulative effects coordinated actions across sectors. results final simulation stored whitetailedSIRS::cross_sector_results. can take results compare baseline results, well single management alternatives.","code":"#Vaccinate.. cross_sector.inits.fall <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) cross_sector.inits.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  #...and boost boost_alt9 <- rep(0.9,nsamples)  #PPE for all interactions sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_ranch/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_rural/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  #Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  #Ranch and suburban complex ranch_suburban_cross_sector.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)  proj_ranch_suburban_cross_sector <- run(iter = nsamples, initial_compartments = cross_sector.inits.fall, initial_compartments_steady = cross_sector.inits.steady, params =  ranch_suburban_cross_sector.params, times = times, name = \"Cross-Sector Collaboration: Vaccinate and Boost, PPE for all interactions, and eliminating baiting\")  proj_ranch_suburban_cross_sector %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_ranch_suburban_cross_sector_df  proj_ranch_suburban_cross_sector %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Ranch and suburban deer\",nrow(.)), Alternative = c(rep(unique(proj_ranch_suburban_cross_sector$Context)[1],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_ranch_suburban_cross_sector_df, by = \"run_id\") -> cross_sector_for_ranch_suburban_complex #> `summarise()` has grouped output by 'Complex', 'Alternative'. You can override #> using the `.groups` argument.  #Ranch and rural complex ranch_rural_cross_sector.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)  proj_ranch_rural_cross_sector <- run(iter = nsamples, initial_compartments = cross_sector.inits.fall, initial_compartments_steady = cross_sector.inits.steady, params = ranch_rural_cross_sector.params, times = times, name = \"Cross-Sector Collaboration: Vaccinate and Boost, PPE for all interactions, and eliminating baiting\")  proj_ranch_rural_cross_sector %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_ranch_rural_cross_sector_df  proj_ranch_rural_cross_sector %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Ranch and rural deer\",nrow(.)), Alternative = c(rep(unique(proj_ranch_rural_cross_sector$Context)[1],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%    merge(.,Persist_ranch_rural_cross_sector_df, by = \"run_id\")-> cross_sector_for_ranch_rural_complex #> `summarise()` has grouped output by 'Complex', 'Alternative'. You can override #> using the `.groups` argument.  #Intensive facility and suburban complex intensive_suburban_cross_sector.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)  proj_intensive_suburban_cross_sector <- run(iter = nsamples, initial_compartments = cross_sector.inits.fall, initial_compartments_steady = cross_sector.inits.steady, params = intensive_suburban_cross_sector.params, times = times, name = \"Cross-Sector Collaboration: Vaccinate and Boost, PPE for all interactions, and eliminating baiting\")  proj_intensive_suburban_cross_sector %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_intensive_suburban_cross_sector_df  proj_intensive_suburban_cross_sector %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Intensive facility and suburban deer\",nrow(.)), Alternative = c(rep(unique(proj_intensive_suburban_cross_sector$Context)[1],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_intensive_suburban_cross_sector_df, by = \"run_id\")-> cross_sector_for_intensive_suburban_complex #> `summarise()` has grouped output by 'Complex', 'Alternative'. You can override #> using the `.groups` argument.  #Intensive facility and rural complex intensive_rural_cross_sector.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)  proj_intensive_rural_cross_sector <- run(iter = nsamples, initial_compartments = cross_sector.inits.fall, initial_compartments_steady = cross_sector.inits.steady, params = intensive_rural_cross_sector.params, times = times, name = \"Cross-Sector Collaboration: Vaccinate and Boost, PPE for all interactions, and eliminating baiting\")  proj_intensive_rural_cross_sector %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_intensive_rural_cross_sector_df  proj_intensive_rural_cross_sector %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Intensive facility and rural deer\",nrow(.)), Alternative = c(rep(unique(proj_intensive_rural_cross_sector$Context)[1],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_intensive_rural_cross_sector_df, by = \"run_id\")-> cross_sector_for_intensive_rural_complex #> `summarise()` has grouped output by 'Complex', 'Alternative'. You can override #> using the `.groups` argument.   cross_sector_results <- rbind(cross_sector_for_ranch_suburban_complex, cross_sector_for_ranch_rural_complex, cross_sector_for_intensive_suburban_complex, cross_sector_for_intensive_rural_complex)  cross_sector_results %>%     group_by(Complex) %>%     summarize(., prevalenceWild = median(meanWild), prevalenceCaptive = median(meanCaptive), cumulativeWild = median(cumulativeWild), cumulativeCaptive = median(cumulativeCaptive), meanPersistWild = (sum(persistWild)/nsamples), meanPersistCaptive= (sum(persistCaptive)/nsamples)) #> # A tibble: 4 × 7 #>   Complex      prevalenceWild prevalenceCaptive cumulativeWild cumulativeCaptive #>   <chr>                 <dbl>             <dbl>          <dbl>             <dbl> #> 1 Intensive f…     0.00000147       0.000000661      0.0000313        0.0000140  #> 2 Intensive f…     0.00000523       0.000000682      0.000113         0.0000143  #> 3 Ranch and r…     0.00000147       0.000000101      0.0000313        0.00000226 #> 4 Ranch and s…     0.00000522       0.000000107      0.000113         0.00000226 #> # ℹ 2 more variables: meanPersistWild <dbl>, meanPersistCaptive <dbl>"},{"path":"/articles/Management_Alternatives_Systems.html","id":"literature-cited","dir":"Articles","previous_headings":"","what":"Literature Cited","title":"Evaluation of management alternatives across systems","text":"Cook, J.D., E. Rosenblatt, G.V. Direnzo, E.H.C. Grant, B.. Mosher, F. Arce, S. Christensen, R. Ghai, M.C. Runge. Prep. Using decision science evaluate risk management SARS-CoV-2 zoonotic transmission humans white-tailed deer.","code":""},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"vignette details analysis used study differences outbreak dynamics four scenarios SARS-CoV-2 transmission among white-tailed deer populations (Rosenblatt et al. Prep.). Briefly, study evaluates risk deer face direct transmission humans different scenarios. disease introduced, study also describes outbreak dynamics within deer population. use whitetailedSIRS functions workflow mimic previous vignette demonstrating versitility whitetailedSIRS package. output vignette used visualize differences vignette whitetailedSIRS::Visualize_by_context. , general approach simulating SARS-CoV-2 outbreaks : Set number simulations Draw random sample parameters used estimate infection probabilities, contact rates, important parameters. Derive parameters used SIRS ODE equation set Define initial SIR compartment sizes Solve SIRS ODE equations calculate daily compartment sizes Calculate risk introduction magnitude spread given parameters Calculate average daily prevalence, probability persistence, incidence proportion.","code":""},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"set-number-of-simulations-to-run-and-context-of-simulation","dir":"Articles","previous_headings":"","what":"1. Set number of simulations to run and context of simulation","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"purpose study, Rosenblatt et al. (Prep) focused four scenarios simulated SARS-CoV-2 introduction outbreak. simulations occur isolation, meaning outbreak spread captive wild wild captive. Animals scenario either captive wild. Combined systems address “Connected systems” vignette. Wild deer rural conditions: scenario, wild deer free-ranging area rural human density (3.1 humans/km2). assumed deer context subject regulated hunting either using still-hunting, ground blind treestand approaches. also assumed baiting backyard feeding illegal may still occur. used Habib et al.’s (2011) proximity rate model. estimated duration deer-deer proximity events, rates duration human-deer proximity events using expert elicitation. Wild deer suburban conditions: Wild deer free-ranging area suburban human density (100 humans/km2). Deer--deer proximity rates derived using parameters used rural setting. primary difference context wild, rural context higher human--deer proximity rates longer duration proximity events estimated expert elicitation. Outdoor captive ranch: modeled population captive deer housed outdoor ranching facility. assumed proximity rates deer context estimated wild contexts, increase proximity rates due supplemental feeding. assume proximity rates humans deer context estimated wild, suburban context, duration proximity events longer, reflecting typical captive facility. Intensive captive facility: considered captive deer held facility focused captive breeding exposition. Deer facility predominantly indoors high stocking densities low indoor air exchange rates (AER; 1-hr). estimated proximity rates duration proximity using expert elicitation. set seed results repeatable, set number samples desired amount (nsamples). example, run 100 simulations.","code":"set.seed(23) nsamples <- 100"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"sample-parameters-for-simulations","dir":"Articles","previous_headings":"","what":"2. Sample parameters for simulations","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Next, draw assortment parameters solve SIRS ODE equations SARS-CoV-2 outbreak. read , see SIR model description example vignettes understand workflow . Following Rosenblatt et al. (Prep), four contexts defined, including outdoor captive ranch, intensive captive facility, wild deer rural conditions, wild deer suburban conditions. RMD file, scenarios simulated independently .","code":"elicitation_data <- whitetailedSIRS::draw_elicitation_samples(nsamples = nsamples)"},{"path":[]},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"proximity-rates","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Outdoor captive ranch","what":"Proximity Rates","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Proximity rates derived rate model developed Habib et al. (2011), function habitat conditions (habitat) density (nwild/A_W). uses Habib et al. (2011) model analysis, fixed density 10 deer per sq km habitat 26% wooded habitat (classified calc_contact_rate function type_contact = “med”). also used expert elicitation estimates probability direct contact fluid transmission. Next, define various proximity rates ranch context. Object names reflect parameters must included SIRS ODE solver (e.g. omega_ww_ranch, set 0).","code":"nWild <- rpois(nsamples,1000) #Abundance A_w <- 100 #Area habitat <- \"med\" #Habitat classification sigma_season <- 1 #Season adjustment for proximity rate  epsilon_dc <- get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\") #Probability of direct contact between deer, given proximity. omega_ww_ranch <- rep(0, nsamples) #Deer-to-deer proximity rate in wild (set to 0; events per day). omega_cw_null <- rep(0, nsamples) #Deer-to-deer proximity rate along fenceline (set to 0; events per day). omega_cc_ranch <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild, rho_attractant = get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17) #Deer-to-deer proximity rate in ranch context, mimicing wild proximity rates with the influence of baiting (events per day).  omega_hw_ranch <- rep(0, nsamples) #Human-to-deer proximity rate in wild (set to 0; events per day). omega_hc_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 #Human-to-deer proximity rate in ranch context, mimicing suburban proximitty rates (events per day)."},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"infection-probabilities","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Outdoor captive ranch","what":"Infection probabilities","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"calculate infection probabilities three transmission pathways - aerosol transmission deer--deer, fluid transmission deer--deer, aerosol transmission human--deer. , use various package functions define parameters estimate infection probability given proximity contact.","code":"C_nu_human <- rnorm(n = nsamples, mean = 10^5.6, sd = 10^1.2)#viral load in humans (genomic copies per ml) C_nu_deer <- 10^5.6 * get_EE_param_vals(data = elicitation_data, my_param = \"Viral Load\") #viral load in deer saliva, relative to humans (genomic copies per ml)  r_deer <- get_EE_param_vals(data = elicitation_data, my_param = \"Dose-Response\")# Dose response coefficient for deer and SARS-CoV-2 #Infection probability calculation of aerosol transmission from deer-to-deer t_contact_deer_deer_null <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer Proximity Duration (minutes)\") #Estimate duration of proximity event... sigma_aero_deer_deer_ranch <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples) #...and estimate probability of infection given that duration of proximity event.  sigma_aero_deer_deer_wild_null <- rep(0, nsamples) #Estimate infection probability in out in the wild as 0 (needs to be included for SIRS ODE equations)  #Infection probability of 0.1 ml of saliva being transferred between deer on contact sigma_dc_deer_deer_null <- calc_sigma_dc(C_nu = C_nu_deer, nsamples = nsamples) #Calculate infection probability  #Infection probability calculation of aerosol transmission from humans-to-deer t_contact_deer_human_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\") #Estimate duration of human-deer proximity event in ranch facility context... sigma_aero_deer_human_ranch <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_ranch / 60,                                         r = r_deer, nsamples = nsamples)#... and calculate infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_wild_null <- rep(0, nsamples)#Estimate human-to-deer infection probability out in the wild as 0 (needs to be included for SIRS ODE equations)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"intensive-captive-facility","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"Intensive captive facility","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":", list additional parameters used “Intensive captive facility” scenario. Note scenario use objects defined earlier RMarkdown.","code":"omega_ww_intensive <- rep(0, nsamples) omega_cc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Deer Proximity Rate, Captive (per day)\") omega_hw_intensive <- rep(0, nsamples) omega_hc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120  sigma_aero_deer_deer_intensive <- calc_sigma_aero(C_nu = C_nu_deer,                                             t_contact = t_contact_deer_deer_null / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  t_contact_deer_human_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")   sigma_aero_deer_human_intensive <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                              t_contact = t_contact_deer_human_intensive / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"wild-deer-in-rural-conditions","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"Wild deer in rural conditions","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":", list additional parameters used “Wild deer rural conditions” scenario. Note scenario use objects defined earlier RMarkdown.","code":"omega_ww_rural <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild) omega_cc_rural <- rep(0, nsamples) omega_hw_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") /120 omega_hc_rural <- rep(0, nsamples)  t_contact_deer_human_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Rural (minutes)\")  sigma_aero_deer_deer_rural <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_deer_captive_null <- rep(0, nsamples)  sigma_aero_deer_human_rural <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_rural / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_human_captive_null <- rep(0, nsamples)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"wild-deer-in-suburban-conditions","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"Wild deer in suburban conditions","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":", list additional parameters used “Wild deer suburban conditions” scenario. Note scenario use objects defined earlier RMarkdown.","code":"omega_ww_suburban <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild) omega_cc_suburban <- rep(0, nsamples) omega_hw_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 omega_hc_suburban <- rep(0, nsamples)  t_contact_deer_human_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Suburban (minutes)\")  sigma_aero_deer_deer_suburban <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_human_suburban <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_suburban / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"recovery-and-immunity-loss-rates","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Wild deer in suburban conditions","what":"Recovery and Immunity Loss Rates","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"simulations, animals recover infection given rate (gamma_recov), lose immunity become susceptible given rate (alpha_immunity). use recovery rate based 6 day infectious period (Palmer et al. 2021), immunity loss rate based expert elicited estimates. recovery rate repeated across iterations simulation (nsamples). immunity loss rate derived [nsamples] draws error distribution estimated expert elicitation process.","code":"gamma_recov <- rep(1/6, nsamples) alpha_immunity_null <- 1 / get_EE_param_vals(data = elicitation_data, my_param = 'Temporary Immunity') I_human_null <- 0.05"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"derive-parameters-used-in-the-sirs-ode-euqation-set-","dir":"Articles","previous_headings":"","what":"3. Derive parameters used in the SIRS ODE euqation set.","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Next, create derived parameters scenario:","code":"ranch.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_ranch, omega_cw = omega_cw_null,omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_ranch, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_wild_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_null, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  intensive.params <- alternative(    omega_ww = omega_ww_intensive, omega_cw = omega_cw_null, omega_cc = omega_cc_intensive,     omega_hw = omega_hw_intensive, omega_hc = omega_hc_intensive,     sigma_aero_deer_deer_wild = sigma_aero_deer_human_wild_null, sigma_aero_deer_deer_captive =  sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_null, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, sigma_dc_deer_deer = sigma_dc_deer_deer_null,    alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  rural.params <- alternative(omega_ww = omega_ww_rural, omega_cw = omega_cw_null, omega_cc = omega_cc_rural, omega_hw = omega_hw_rural, omega_hc = omega_hc_rural, sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_captive_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural,  sigma_aero_deer_human_capt = sigma_aero_deer_human_captive_null, sigma_dc_deer_deer = sigma_dc_deer_deer_null,alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  suburban.params <- alternative(omega_ww = omega_ww_suburban, omega_cw = omega_cw_null, omega_cc = omega_cc_suburban, omega_hw = omega_hw_suburban, omega_hc = omega_hc_suburban, sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_captive_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban,  sigma_aero_deer_human_capt = sigma_aero_deer_human_captive_null, sigma_dc_deer_deer = sigma_dc_deer_deer_null,alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"define-initial-sir-compartment-sizes","dir":"Articles","previous_headings":"","what":"4. Define initial SIR compartment sizes","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"","code":"captive.inits.fall <- initial_compartments(S_wild_prop = 0, draws = nsamples) captive.inits.steady <- initial_compartments(S_wild_prop = 0, draws = nsamples, steady = TRUE)  wild.inits.fall <- initial_compartments(S_captive_prop = 0, draws = nsamples) wild.inits.steady <- initial_compartments(S_captive_prop = 0, draws = nsamples, steady = TRUE)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"solve-the-sirs-ode-equations-and-calculate-daily-compartment-sizes","dir":"Articles","previous_headings":"","what":"5. Solve the SIRS ODE equations and calculate daily compartment sizes","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"","code":"times <- seq(0, 120, by = 1) proj.ranch <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = ranch.params, times = times, name = \"Outdoor ranch\")  proj.intensive <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = intensive.params, times = times, name = \"Intensive facility\")  proj.rural <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady ,params = rural.params, times = times, name = \"Wild, rural\")  proj.suburban <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady, params = suburban.params, times = times, name = \"Wild, suburban\")  sirs_results_contexts <- rbind(proj.ranch,proj.intensive, proj.rural, proj.suburban)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"and-7-calculate-risk-of-introduction-and-magnitude-of-spread-given-parameters-average-daily-prevalence-probability-of-persistence-and-incidence-proportion-","dir":"Articles","previous_headings":"","what":"6 and 7: Calculate risk of introduction and magnitude of spread given parameters, average daily prevalence, probability of persistence, and incidence proportion.","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"going calculate several metrics iteration summarize across contexts. First, combine projections context one list object, summarize average prevalence (Infected) incidence proportion (Cumulative_infections). save resulting summary dataframe future use. Next, join information steady-state equilibrium, using threshold value 0.1% prevalence equilibrium persistence. Next, step context’s parameters estimate strength introduction (quantified force--infection) spread (quantified basic reproductive number \\(R_0\\)). combine prevalence persistence summary create dataset visualized visualization vignette. develop plots tables results data frame. simple summary end vignette, median spread (R0), probability introduction humans (FOI, log10-transformed), average prevalence 120-day fall projection (Prevalence), infections end 120-day fall projection (Persistence).","code":"sirs_results_contexts %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(sirs_results_contexts$Context)[1],length(times)*nsamples),rep(unique(sirs_results_contexts$Context)[2],length(times)*nsamples), rep(unique(sirs_results_contexts$Context)[3],length(times)*nsamples),rep(unique(sirs_results_contexts$Context)[4],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%     summarize(Wild = mean(I_wild), Captive = mean(I_captive), Prevalence = Wild + Captive, Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative), Cumulative_infections = sum(Cumulative_wild_infections,Cumulative_captive_infections)) %>%    mutate(., Context = factor(Context, levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) %>%     select(., -Wild, -Captive, -Cumulative_wild_infections, -Cumulative_captive_infections) %>%    group_by(.,Context) %>%    arrange(., Context, run_id) -> Prev_cumulative_df  head(Prev_cumulative_df) #> # A tibble: 6 × 4 #> # Groups:   Context [1] #>   Context       run_id Prevalence Cumulative_infections #>   <fct>          <int>      <dbl>                 <dbl> #> 1 Outdoor ranch      1 0.00000782              0.000165 #> 2 Outdoor ranch      2 0.0892                  1.85     #> 3 Outdoor ranch      3 0.0647                  1.34     #> 4 Outdoor ranch      4 0.0000217               0.000459 #> 5 Outdoor ranch      5 0.000142                0.00300  #> 6 Outdoor ranch      6 0.0661                  1.35 persist.threshold <- 0.001  sirs_results_contexts %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(sirs_results_contexts$Context)[1],nsamples),rep(unique(sirs_results_contexts$Context)[2],nsamples), rep(unique(sirs_results_contexts$Context)[3],nsamples),rep(unique(sirs_results_contexts$Context)[4],nsamples))) %>%   mutate(., Context = factor(Context, levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) %>%    mutate(., Persist.I_wild = I_wild > persist.threshold, Persist.I_captive = I_captive > persist.threshold, Persist = as.logical(Persist.I_wild + Persist.I_captive)) %>%   select(., run_id,Context, Persist) %>%   arrange(., Context, run_id) %>%     merge(Prev_cumulative_df,.) -> Prev_cumulative_persist_df ranch.df <- list_cbind(map(ranch.params, as_data_frame)) colnames(ranch.df) <-  names(ranch.params) ranch.df %>%    mutate(., run_id = min(Prev_cumulative_df[which(Prev_cumulative_df$Context==\"Outdoor ranch\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Outdoor ranch\", Setting = \"Captive\") %>%    select(., run_id, Context,  Setting, r0, FOI) -> ranch.r0.FOI  intensive.df <- list_cbind(map(intensive.params, as_data_frame)) colnames(intensive.df) <-  names(intensive.params) intensive.df %>%    mutate(., run_id = min(Prev_cumulative_df[which(Prev_cumulative_df$Context==\"Intensive facility\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Intensive facility\", Setting = \"Captive\") %>%    select(., run_id, Context,  Setting, r0, FOI) -> intensive.r0.FOI  rural.df <- list_cbind(map(rural.params, as_data_frame)) colnames(rural.df) <-  names(rural.params) rural.df %>%    mutate(., run_id = min(Prev_cumulative_df[which(Prev_cumulative_df$Context==\"Wild, rural\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Wild, rural\", Setting = \"Wild\") %>%    select(., run_id, Context, Setting,  r0, FOI) -> rural.r0.FOI  suburban.df <- list_cbind(map(suburban.params, as_data_frame)) colnames(suburban.df) <-  names(suburban.params) suburban.df %>%    mutate(., run_id = min(Prev_cumulative_df[which(Prev_cumulative_df$Context==\"Wild, suburban\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Wild, suburban\", Setting = \"Wild\") %>%    select(., run_id, Context, Setting, r0, FOI) -> suburban.r0.FOI  r0.FOI <- rbind(ranch.r0.FOI,intensive.r0.FOI, rural.r0.FOI,suburban.r0.FOI)  #Merge with average prevalence (step 1) and persistence (step 2) merge(r0.FOI,Prev_cumulative_persist_df[,c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\", all.x = TRUE) %>%    mutate(Context = factor(Context,  levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) -> df df %>%    group_by(., Context) %>%    reframe(., R0.Median = round(quantile(r0,probs = c(0.5)),2),            R0.80CI = paste0(round(quantile(r0,probs = c(0.1)),2),\" - \",round(quantile(r0,probs = c(0.9)),2)),            FOI.Median = round((quantile(FOI*100,probs = c(0.5))),2),            FOI.80CI = paste0(round((quantile(FOI*100,probs = c(0.1))),2),\" - \",round((quantile(FOI*100,probs = c(0.9))),2)),            Percent.Prob.1in1000.Infected.Median = round((1-(exp(-last(times)*quantile(FOI, probs = c(0.5)))^1000))*100, 1),           Percent.Prob.1in1000.80CI = paste0(round((1-(exp(-last(times)*quantile(FOI, probs = c(0.1)))^1000))*100, 1),\" - \",round((1-(exp(-last(times)*quantile(FOI, probs = c(0.9)))^1000))*100, 1)),            Prevalence.Median = round(quantile(Prevalence, probs = c(0.5)),6),            Prevalence.80CI = paste0(round(quantile(Prevalence,probs = c(0.1)),6),\" - \",round(quantile(Prevalence,probs = c(0.9)),6)),            Persistence.Mean = round(sum(Persist)/nsamples,2),            Persistence.80CI = paste0(round(binom.confint(x = sum(Persist),n = nsamples, conf.level = 0.95, methods = \"exact\")$lower,2),\" - \", round(binom.confint(x = sum(Persist),n = nsamples, conf.level = 0.95, methods = \"exact\")$upper,2)),            Incidence.Proportion.Median  = median(Cumulative_infections),           Incidence.Proportion.80CI  = paste0(round(quantile(Cumulative_infections,probs = c(0.1)),2),\" - \",round(quantile(Cumulative_infections,probs = c(0.9)),2)), ) -> results  results %>%   kbl() %>%   kable_paper(\"hover\", full_width = F)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"vignette detailed simulations continuous exposure humans infected SARS-CoV-2. next vignette runs similar process, simulates outbreaks caused initial infections deer population, rather continual introduction humans. Results next vignette collated another vignette produce figures similar Rosenblatt et al. Prep.. Click return vignette demonstrating example use whitetailedSIRS.","code":""},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"literature-cited","dir":"Articles","previous_headings":"","what":"Literature Cited","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Rosenblatt, E., J.D. Cook, G.V. Direnzo, E.H.C. Grant, F. Arce, K. Pepin, F.J. Rudolph, M.C. Runge, S. Shriner, D. Walsh, B.. Mosher. Prep. Epidemiological modeling SARS-CoV-2 white-tailed deer (Odocoileus virginianus) reveals conditions introduction widespread transmission.","code":""},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"vignette follows blueprint SIRS_analysis_by_context vignette. primary difference initial infected compartment sizes set non-zero values human prevalence set zero. mimics initial spillover event given magnitude, test outbreak dynamics differ continuous spillover detailed whitetailedSIRS::SIRS_analysis_by_context. differences visualized vignette Visualize_by_context. simulation code suppresed rendered vignette, can viewed .Rmd file. analysis corresponds Objective 4 Rosenblatt et al. Prep. , general approach simulating SARS-CoV-2 outbreaks : Set number simulations Draw random sample parameters used estimate infection probabilities, contact rates, important parameters. Derive parameters used SIRS ODE equation set Define initial SIR compartment sizes Solve SIRS ODE equations calculate daily compartment sizes Calculate risk introduction magnitude spread given parameters Calculate average daily prevalence, probability persistence, incidence proportion.","code":""},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"set-number-of-simulations-to-run-and-context-of-simulation","dir":"Articles","previous_headings":"","what":"1. Set number of simulations to run and context of simulation","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"scenarios considered vignette detailed vignette simulating continuous human introduction. major difference initial infection population human prevalence set 0%. comparing results initial spillover continual spillover, can get sense clustered exposures single event differ outbreak dynamics compared continuous spillover. scenario descriptions . Wild deer rural conditions: scenario, wild deer free-ranging area rural human density (3.1 humans/km2). assumed deer context subject regulated hunting either using still-hunting, ground blind treestand approaches. also assumed baiting backyard feeding illegal may still occur. used Habib et al.’s (2011) proximity rate model. estimated duration deer-deer proximity events, rates duration human-deer proximity events using expert elicitation. Wild deer suburban conditions: Wild deer free-ranging area suburban human density (100 humans/km2). Deer--deer proximity rates derived using parameters used rural setting. primary difference context wild, rural context higher human--deer proximity rates longer duration proximity events estimated expert elicitation. Outdoor captive ranch: modeled population captive deer housed outdoor ranching facility. assumed proximity rates deer context estimated wild contexts, increase proximity rates due supplemental feeding. assume proximity rates humans deer context estimated wild, suburban context, duration proximity events longer, reflecting typical captive facility. Intensive captive facility: considered captive deer held facility focused captive breeding exposition. Deer facility predominantly indoors high stocking densities low indoor air exchange rates (AER; 1-hr). estimated proximity rates duration proximity using expert elicitation. set seed results repeatable, set number samples desired amount (nsamples). example, ran 1000 simulations.","code":"set.seed(23) nsamples <- 100"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"sample-parameters-for-simulations","dir":"Articles","previous_headings":"","what":"2. Sample parameters for simulations","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"Next, draw assortment parameters solve SIRS ODE equations SARS-CoV-2 outbreak. read , see SIR model description example vignettes understand workflow . Following Rosenblatt et al. (Prep.), four contexts defined, including outdoor captive ranch, intensive captive facility, wild deer rural conditions, wild deer suburban conditions. RMD file, scenarios simulated independently .","code":"elicitation_data <- whitetailedSIRS::draw_elicitation_samples(nsamples = nsamples)"},{"path":[]},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"proximity-rates","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Outdoor captive ranch","what":"Proximity Rates","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"Proximity rates derived rate model developed Habib et al. (2011), function habitat conditions (habitat) density (nwild/A_W). uses Habib et al. (2011) model analysis, fixed density 10 deer per sq km habitat 26% wooded habitat (classified calc_contact_rate function type_contact = “med”). also used expert elicitation estimates probability direct contact fluid transmission. Next, define various proximity rates ranch context. Object names reflect parameters must included SIRS ODE solver (e.g. omega_ww_ranch, set 0).","code":"nWild <- rpois(nsamples,1000) #Abundance A_w <- 100 #Area habitat <- \"med\" #Habitat classification sigma_season <- 1 #Season adjustment for proximity rate  epsilon_dc <- get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\") #Probability of direct contact between deer, given proximity. omega_ww_ranch <- rep(0, nsamples) #Deer-to-deer proximity rate in wild (set to 0; events per day). omega_cw_null <- rep(0, nsamples) #Deer-to-deer proximity rate along fenceline (set to 0; events per day). omega_cc_ranch <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild, rho_attractant = get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17) #Deer-to-deer proximity rate in ranch context, mimicing wild proximity rates with the influence of baiting (events per day).  omega_hw_ranch <- rep(0, nsamples) #Human-to-deer proximity rate in wild (set to 0; events per day). omega_hc_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 #Human-to-deer proximity rate in ranch context, mimicing suburban proximitty rates (events per day)."},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"infection-probabilities","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Outdoor captive ranch","what":"Infection probabilities","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"calculate infection probabilities three transmission pathways - aerosol transmission deer--deer, fluid transmission deer--deer, aerosol transmission human--deer. , use various package functions define parameters estimate infection probability given proximity contact.","code":"C_nu_human <- rnorm(n = nsamples, mean = 10^5.6, sd = 10^1.2)#viral load in humans (genomic copies per ml) C_nu_deer <- 10^5.6 * get_EE_param_vals(data = elicitation_data, my_param = \"Viral Load\") #viral load in deer saliva, relative to humans (genomic copies per ml)  r_deer <- get_EE_param_vals(data = elicitation_data, my_param = \"Dose-Response\")# Dose response coefficient for deer and SARS-CoV-2 #Infection probability calculation of aerosol transmission from deer-to-deer t_contact_deer_deer_null <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer Proximity Duration (minutes)\") #Estimate duration of proximity event... sigma_aero_deer_deer_ranch <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples) #...and estimate probability of infection given that duration of proximity event.  sigma_aero_deer_deer_wild_null <- rep(0, nsamples) #Estimate infection probability in out in the wild as 0 (needs to be included for SIRS ODE equations)  #Infection probability of 0.1 ml of saliva being transferred between deer on contact sigma_dc_deer_deer_null <- calc_sigma_dc(C_nu = C_nu_deer, nsamples = nsamples) #Calculate infection probability  #Infection probability calculation of aerosol transmission from humans-to-deer t_contact_deer_human_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\") #Estimate duration of human-deer proximity event in ranch facility context... sigma_aero_deer_human_ranch <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_ranch / 60,                                         r = r_deer, nsamples = nsamples)#... and calculate infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_wild_null <- rep(0, nsamples)#Estimate human-to-deer infection probability out in the wild as 0 (needs to be included for SIRS ODE equations)"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"intensive-captive-facility","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"Intensive captive facility","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":", list additional parameters used “Intensive captive facility” scenario. Note scenario use objects defined earlier RMarkdown.","code":"omega_ww_intensive <- rep(0, nsamples) omega_cc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Deer Proximity Rate, Captive (per day)\") omega_hw_intensive <- rep(0, nsamples) omega_hc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120  sigma_aero_deer_deer_intensive <- calc_sigma_aero(C_nu = C_nu_deer,                                             t_contact = t_contact_deer_deer_null / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  t_contact_deer_human_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")   sigma_aero_deer_human_intensive <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                              t_contact = t_contact_deer_human_intensive / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"wild-deer-in-rural-conditions","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"Wild deer in rural conditions","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":", list additional parameters used “Wild deer rural conditions” scenario. Note scenario use objects defined earlier RMarkdown.","code":"omega_ww_rural <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild) omega_cc_rural <- rep(0, nsamples) omega_hw_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") /120 omega_hc_rural <- rep(0, nsamples)  t_contact_deer_human_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Rural (minutes)\")  sigma_aero_deer_deer_rural <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_deer_captive_null <- rep(0, nsamples)  sigma_aero_deer_human_rural <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_rural / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_human_captive_null <- rep(0, nsamples)"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"wild-deer-in-suburban-conditions","dir":"Articles","previous_headings":"2. Sample parameters for simulations","what":"Wild deer in suburban conditions","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":", list additional parameters used “Wild deer suburban conditions” scenario. Note scenario use objects defined earlier RMarkdown.","code":"omega_ww_suburban <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild) omega_cc_suburban <- rep(0, nsamples) omega_hw_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 omega_hc_suburban <- rep(0, nsamples)  t_contact_deer_human_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Suburban (minutes)\")  sigma_aero_deer_deer_suburban <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_human_suburban <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_suburban / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"recovery-and-immunity-loss-rates","dir":"Articles","previous_headings":"2. Sample parameters for simulations > Wild deer in suburban conditions","what":"Recovery and Immunity Loss Rates","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"simulations, animals recover infection given rate (gamma_recov), lose immunity become susceptible given rate (alpha_immunity). use recovery rate based 6 day infectious period (Palmer et al. 2021), immunity loss rate based expert elicited estimates. recovery rate repeated across iterations simulation (nsamples). immunity loss rate derived [nsamples] draws error distribution estimated expert elicitation process. Note human prevalence fixed 0.","code":"gamma_recov <- rep(1/6, nsamples) alpha_immunity_null <- 1 / get_EE_param_vals(data = elicitation_data, my_param = 'Temporary Immunity') I_human_null <- 0"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"derive-parameters-used-in-the-sirs-ode-euqation-set-","dir":"Articles","previous_headings":"","what":"3. Derive parameters used in the SIRS ODE euqation set.","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"Next, create derived parameters scenario:","code":"ranch.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_ranch, omega_cw = omega_cw_null,omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_ranch, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_wild_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_null, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  intensive.params <- alternative(    omega_ww = omega_ww_intensive, omega_cw = omega_cw_null, omega_cc = omega_cc_intensive,     omega_hw = omega_hw_intensive, omega_hc = omega_hc_intensive,     sigma_aero_deer_deer_wild = sigma_aero_deer_human_wild_null, sigma_aero_deer_deer_captive =  sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_null, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, sigma_dc_deer_deer = sigma_dc_deer_deer_null,    alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  rural.params <- alternative(omega_ww = omega_ww_rural, omega_cw = omega_cw_null, omega_cc = omega_cc_rural, omega_hw = omega_hw_rural, omega_hc = omega_hc_rural, sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_captive_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural,  sigma_aero_deer_human_capt = sigma_aero_deer_human_captive_null, sigma_dc_deer_deer = sigma_dc_deer_deer_null,alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  suburban.params <- alternative(omega_ww = omega_ww_suburban, omega_cw = omega_cw_null, omega_cc = omega_cc_suburban, omega_hw = omega_hw_suburban, omega_hc = omega_hc_suburban, sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_captive_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban,  sigma_aero_deer_human_capt = sigma_aero_deer_human_captive_null, sigma_dc_deer_deer = sigma_dc_deer_deer_null,alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"define-initial-sir-compartment-sizes","dir":"Articles","previous_headings":"","what":"4. Define initial SIR compartment sizes","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"Next, define three sets compartment sizes captive wild scenarios differ size initial exposure. range widespread exposure (1 1000 deer), minimal exposure (1 1 million), extremely rare exposure (1 1 billion).","code":"captive.inits.fall.1in1000 <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999, I_captive_prop = 0.001, draws = nsamples) captive.inits.steady.1in1000 <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999, I_captive_prop = 0.001, draws = nsamples, steady = TRUE)  wild.inits.fall.1in1000 <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999, I_wild_prop = 0.001, draws = nsamples) wild.inits.steady.1in1000 <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999, I_wild_prop = 0.001, draws = nsamples, steady = TRUE)  captive.inits.fall.1in1mil <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999999, I_captive_prop = 0.000001, draws = nsamples) captive.inits.steady.1in1mil <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999999, I_captive_prop = 0.000001, draws = nsamples, steady = TRUE)  wild.inits.fall.1in1mil<- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999999, I_wild_prop = 0.000001, draws = nsamples) wild.inits.steady.1in1mil <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999999, I_wild_prop = 0.000001, draws = nsamples, steady = TRUE)  captive.inits.fall.1in1bil <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999999999, I_captive_prop = 0.000000001, draws = nsamples) captive.inits.steady.1in1bil <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999999999, I_captive_prop = 0.000000001, draws = nsamples, steady = TRUE)  wild.inits.fall.1in1bil <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999999999, I_wild_prop = 0.000000001, draws = nsamples) wild.inits.steady.1in1bil <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999999999, I_wild_prop = 0.000000001, draws = nsamples, steady = TRUE)"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"solve-the-sirs-ode-equations-and-calculate-daily-compartment-sizes","dir":"Articles","previous_headings":"","what":"5. Solve the SIRS ODE equations and calculate daily compartment sizes","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"solve SIRS ODE equations based various initial exposures.","code":"times <- seq(0, 120, by = 1)  #1 in 1000 deer proj.ranch.1in1000 <- run(iter = nsamples, initial_compartments = captive.inits.fall.1in1000, initial_compartments_steady = captive.inits.steady.1in1000, params = ranch.params, times = times, name = \"Outdoor ranch\")  proj.intensive.1in1000 <- run(iter = nsamples, initial_compartments = captive.inits.fall.1in1000, initial_compartments_steady = captive.inits.steady.1in1000, params = intensive.params, times = times, name = \"Intensive facility\")  proj.rural.1in1000 <- run(iter = nsamples, initial_compartments = wild.inits.fall.1in1000, initial_compartments_steady = wild.inits.steady.1in1000 ,params = rural.params, times = times, name = \"Wild, rural\")  proj.suburban.1in1000 <- run(iter = nsamples, initial_compartments = wild.inits.fall.1in1000, initial_compartments_steady = wild.inits.steady.1in1000, params = suburban.params, times = times, name = \"Wild, suburban\")  sirs_results_contexts.1in1000 <- rbind(proj.ranch.1in1000,proj.intensive.1in1000, proj.rural.1in1000, proj.suburban.1in1000)  #1 in 1 million deer proj.ranch.1in1mil <- run(iter = nsamples, initial_compartments = captive.inits.fall.1in1mil, initial_compartments_steady = captive.inits.steady.1in1mil, params = ranch.params, times = times, name = \"Outdoor ranch\")  proj.intensive.1in1mil <- run(iter = nsamples, initial_compartments = captive.inits.fall.1in1mil, initial_compartments_steady = captive.inits.steady.1in1mil, params = intensive.params, times = times, name = \"Intensive facility\")  proj.rural.1in1mil <- run(iter = nsamples, initial_compartments = wild.inits.fall.1in1mil, initial_compartments_steady = wild.inits.steady.1in1mil ,params = rural.params, times = times, name = \"Wild, rural\")  proj.suburban.1in1mil <- run(iter = nsamples, initial_compartments = wild.inits.fall.1in1mil, initial_compartments_steady = wild.inits.steady.1in1mil, params = suburban.params, times = times, name = \"Wild, suburban\")  #1 in 1 billion deer proj.ranch.1in1bil <- run(iter = nsamples, initial_compartments = captive.inits.fall.1in1bil, initial_compartments_steady = captive.inits.steady.1in1bil, params = ranch.params, times = times, name = \"Outdoor ranch\")  proj.intensive.1in1bil <- run(iter = nsamples, initial_compartments = captive.inits.fall.1in1bil, initial_compartments_steady = captive.inits.steady.1in1bil, params = intensive.params, times = times, name = \"Intensive facility\")  proj.rural.1in1bil <- run(iter = nsamples, initial_compartments = wild.inits.fall.1in1bil, initial_compartments_steady = wild.inits.steady.1in1bil ,params = rural.params, times = times, name = \"Wild, rural\")  proj.suburban.1in1bil <- run(iter = nsamples, initial_compartments = wild.inits.fall.1in1bil, initial_compartments_steady = wild.inits.steady.1in1bil, params = suburban.params, times = times, name = \"Wild, suburban\")"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"and-7-calculate-risk-of-introduction-and-magnitude-of-spread-given-parameters-average-daily-prevalence-probability-of-persistence-and-incidence-proportion-","dir":"Articles","previous_headings":"","what":"6 and 7: Calculate risk of introduction and magnitude of spread given parameters, average daily prevalence, probability of persistence, and incidence proportion.","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"going calculate several metrics iteration summarize across contexts. combine projections context one list object, summarize average prevalence (Infected) incidence proportion (Cumulative_infections). save resulting summary data frame future use.","code":""},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"in-1000-deer-initially-infected","dir":"Articles","previous_headings":"6 and 7: Calculate risk of introduction and magnitude of spread given parameters, average daily prevalence, probability of persistence, and incidence proportion.","what":"1 in 1000 deer initially infected","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"First, record prevelence incidence proportion: #Next, record SARS-CoV-2 persistence: calculate \\(R_0\\) FOI scenario, combine outbreak dynamics create one object export.","code":""},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"in-1-million-deer-initially-infected","dir":"Articles","previous_headings":"6 and 7: Calculate risk of introduction and magnitude of spread given parameters, average daily prevalence, probability of persistence, and incidence proportion.","what":"1 in 1 million deer initially infected","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"First, record prevelence incidence proportion: #Next, record SARS-CoV-2 persistence: calculate \\(R_0\\) FOI scenario, combine outbreak dynamics create one object export.","code":""},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"in-1-billion-deer-initially-infected","dir":"Articles","previous_headings":"6 and 7: Calculate risk of introduction and magnitude of spread given parameters, average daily prevalence, probability of persistence, and incidence proportion.","what":"1 in 1 billion deer initially infected","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"First, record prevelence incidence proportion: #Next, record SARS-CoV-2 persistence: calculate \\(R_0\\) FOI scenario, combine outbreak dynamics create one object export. Results simulations stored whitetailedSIRS::initial_infection_results_1_in_1000, whitetailedSIRS::initial_infection_results_1_in_1mil, whitetailedSIRS::initial_infection_results_1_in_1bil.","code":"initial_infection_results_1_in_1000 <- df_initial_infections_1_in_1000 initial_infection_results_1_in_1mil <- df_initial_infections_1_in_1mil initial_infection_results_1_in_1bil <- df_initial_infections_1_in_1bil"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps:","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"vignette detailed simulations run Rosenblatt et al. (Prep) simulate outbreaks initial exposure event. next vignette produce figures published Rosenblatt et al. Prep.. Click return vignette simulating outbreaks continous exposure infectious humans.","code":""},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"literature-cited","dir":"Articles","previous_headings":"","what":"Literature Cited","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an initial spillover","text":"Rosenblatt, E., J.D. Cook, G.V. Direnzo, E.H.C. Grant, F. Arce, K. Pepin, F.J. Rudolph, M.C. Runge, S. Shriner, D. Walsh, B.. Mosher. Prep. Epidemiological modeling SARS-CoV-2 white-tailed deer (Odocoileus virginianus) reveals conditions introduction widespread transmission.","code":""},{"path":"/articles/Visualize_by_context.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Summarize introduction, spread, prevalence, and persistence","text":"vignette demonstrates manipulated, summarize, plot key results projection SARS-CoV-2 infections simulated white-tailed deer populations. Now dataset simulations vignettes detailing continuous introduction humans single, initial introduction without continuous introduction humans, can begin visualize various characteristics outbreaks differ contexts. , load data set whitetailedSIRS::scenario_results summarizing simulation (df), data set whitetailedSIRS::scenario_projections containing daily compartment sizes simulation (outbreaks), remind R many iterations run context (nsamples). figures used results published Rosenblatt et al. Prep.. tasks demonstrated vignette include: Load data Plot Force--Infection, Hazard infection rate, \\(R_0\\) Plot projected infections scenario Plot prevalence, persistence, incidence proportions scenario Plot interaction FOI \\(R_0\\) influencing prevalence, persistence, incidence proportion Plot comparison continuous introduction humans single introductory event","code":""},{"path":"/articles/Visualize_by_context.html","id":"load-data","dir":"Articles","previous_headings":"","what":"Load data","title":"Summarize introduction, spread, prevalence, and persistence","text":"whitetailedSIRS comes simulation results reported Rosenblatt et al. (Prep), load illustrate visualization outbreak dynamics. load scenario results report various outbreak metrics iteration scenario (df). also load daily compartment sizes itneration scenario (scenario_projections). Finally, set number iterations (nsamples) match stored datasets (nsample = 1000)","code":"df <- whitetailedSIRS::scenario_results head(df) #>   run_id       Context Setting        r0          FOI   Prevalence Persist #> 1      1 Outdoor ranch Captive 0.5759082 1.206766e-05 1.496863e-04   FALSE #> 2      2 Outdoor ranch Captive 2.2880165 1.100910e-06 5.116754e-02    TRUE #> 3      3 Outdoor ranch Captive 1.7496298 8.404190e-07 3.454571e-02    TRUE #> 4      4 Outdoor ranch Captive 0.1194827 6.995264e-07 4.478227e-06   FALSE #> 5      5 Outdoor ranch Captive 3.4174119 3.525856e-05 5.080800e-02    TRUE #> 6      6 Outdoor ranch Captive 0.4336174 1.043374e-04 9.895566e-04    TRUE #>   Cumulative_infections #> 1          3.174545e-03 #> 2          1.043574e+00 #> 3          7.274272e-01 #> 4          9.468253e-05 #> 5          1.026015e+00 #> 6          2.094289e-02 outbreaks <- whitetailedSIRS::scenario_projections head(outbreaks) #> # A tibble: 6 × 3 #>   Context       run_id ode_proj            #>   <chr>          <int> <list>              #> 1 Outdoor ranch      1 <deSolve [121 × 9]> #> 2 Outdoor ranch      2 <deSolve [121 × 9]> #> 3 Outdoor ranch      3 <deSolve [121 × 9]> #> 4 Outdoor ranch      4 <deSolve [121 × 9]> #> 5 Outdoor ranch      5 <deSolve [121 × 9]> #> 6 Outdoor ranch      6 <deSolve [121 × 9]> head(outbreaks$ode_proj[[1]]) #>      time S_wild I_wild R_wild I_wild_cumulative S_captive    I_captive #> [1,]    0      0      0      0                 0 1.0000000 0.000000e+00 #> [2,]    1      0      0      0                 0 0.9999874 1.165563e-05 #> [3,]    2      0      0      0                 0 0.9999737 2.251533e-05 #> [4,]    3      0      0      0                 0 0.9999590 3.263340e-05 #> [5,]    4      0      0      0                 0 0.9999435 4.205442e-05 #> [6,]    5      0      0      0                 0 0.9999271 5.083445e-05 #>         R_captive I_captive_cumulative #> [1,] 0.000000e+00         0.000000e+00 #> [2,] 9.675493e-07         1.262698e-05 #> [3,] 3.796539e-06         2.633439e-05 #> [4,] 8.344705e-06         4.104836e-05 #> [5,] 1.449544e-05         5.670830e-05 #> [6,] 2.210210e-05         7.323797e-05 nsamples <- 1000"},{"path":"/articles/Visualize_by_context.html","id":"plot-force-of-infection-hazard-infection-rate-and-r_0","dir":"Articles","previous_headings":"","what":"Plot Force-Of-Infection, Hazard infection rate, and \\(R_0\\)","title":"Summarize introduction, spread, prevalence, and persistence","text":"summarize Force-Of_Infection humans deer (\\(FOI_{HD}\\)), hazard probability least 1 deer infected per 1000 deer 120-day simulation, basic reproductive number (\\(R_0\\)) scenario , producing Figure 3 Rosenblatt et al. Prep.:","code":"#plot r0 ggplot(df, aes(x = Context, y = r0)) +   geom_boxplot(width = 0.5)+   theme_classic()+   geom_hline(yintercept = 1)+    coord_cartesian(ylim = c(0,20))+   scale_y_continuous(\"Basic reproductive number (R0)\")+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> r0  #plot FOI ggplot(df, aes(x = Context, y = log10(FOI*100))) +   geom_boxplot(width = 0.5)+   theme_classic()+     coord_cartesian(ylim = c(-9,0))+   scale_y_continuous(\"Percent susceptible deer infected\\nby humans per day (FOI; log-10 scale)\", breaks = c(-9,-6,-3,-1))+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> FOI  #Plot P>=1 infection out of 100 ggplot(df, aes(x = Context, y = 1-(exp(-FOI*120))^1000)) +   geom_boxplot(width = 0.5)+   theme_classic()+   scale_y_continuous(\"Probability of at least 1 HtD transmission\\nper 1000 deer during 120-day projection\", limits = c(0,1))+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> pinfect  ggpubr::ggarrange(FOI, pinfect ,r0, nrow =1, ncol=3)"},{"path":"/articles/Visualize_by_context.html","id":"plot-projected-infections-for-each-scenario","dir":"Articles","previous_headings":"","what":"Plot projected infections for each scenario","title":"Summarize introduction, spread, prevalence, and persistence","text":"can visually compare distribution outbreak frequency, peak size timing across four scenarios considered. figure featured Rosenblatt et al. (Prep.), may interest user.","code":"outbreaks %>%     filter(., Context %in% c(\"Outdoor ranch\")) %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     filter(., run_id %in% sample(unique(.$run_id),200)) %>%     ggplot(., aes(x = time, y = I_captive*100, group = run_id)) +    geom_line(size = 0.1) +    labs(x = \"Time (days)\", y = \"Prevalence in captive deer (%)\") +    scale_y_continuous(limits = c(0,100))+    scale_x_continuous(limits = c(0,120), breaks = c(0,30,60,90,120))+    theme_classic()+    theme(axis.title = element_text(size = 12),          axis.text = element_text(size = 10),          axis.title.x = element_blank(),          axis.text.x = element_blank())+    annotate(\"label\", label  = \"Outdoor ranch facility\", x = 80, y = 60, size = 4) -> outdoor_ranch_outbreak #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  outbreaks %>%     filter(., Context %in% c(\"Intensive facility\")) %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     filter(., run_id %in% sample(unique(.$run_id),200)) %>%     ggplot(., aes(x = time, y = I_captive*100, group = run_id)) +    geom_line(size = 0.1) +    labs(x = \"Time (days)\", y = \"Prevalence in captive deer (%)\") +    scale_y_continuous(limits = c(0,100))+    scale_x_continuous(limits = c(0,120), breaks = c(0,30,60,90,120))+    theme_classic()+    theme(axis.title = element_blank(),          axis.text = element_blank())+    annotate(\"label\", label  = \"Intensive facility\", x = 80, y = 60, size = 4) -> intensive_facility_outbreak  outbreaks %>%     filter(., Context %in% c(\"Wild, rural\")) %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     filter(., run_id %in% sample(unique(.$run_id),200)) %>%     ggplot(., aes(x = time, y = I_wild*100, group = run_id)) +    geom_line(size = 0.1) +    labs(x = \"Time (days)\", y = \"Prevalence in wild deer (%)\") +    scale_y_continuous(limits = c(0,100))+    scale_x_continuous(limits = c(0,120), breaks = c(0,30,60,90,120))+    theme_classic()+    theme(axis.title = element_text(size = 12),          axis.text = element_text(size = 10))+    annotate(\"label\", label  = \"Wild deer in rural setting\", x = 80, y = 60, size = 4) -> wild_rural_outbreak  outbreaks %>%     filter(., Context %in% c(\"Wild, suburban\")) %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     filter(., run_id %in% sample(unique(.$run_id),200)) %>%     ggplot(., aes(x = time, y = I_wild*100, group = run_id)) +    geom_line(size = 0.1) +    labs(x = \"Time (days)\", y = \"Prevalence in captive deer (%)\") +    scale_y_continuous(limits = c(0,100))+    scale_x_continuous(limits = c(0,120), breaks = c(0,30,60,90,120))+    theme_classic()+    theme(axis.title.x = element_text(size = 12),          axis.text.x = element_text(size = 10),          axis.title.y = element_blank(),          axis.text.y = element_blank())+    annotate(\"label\", label  = \"Wild deer in suburban setting\", x = 80, y = 60, size = 4) -> wild_suburban_outbreak  ggpubr::ggarrange(outdoor_ranch_outbreak, intensive_facility_outbreak, wild_rural_outbreak, wild_suburban_outbreak)"},{"path":"/articles/Visualize_by_context.html","id":"plot-prevalence-persistence-and-incidence-proportions-for-each-scenario","dir":"Articles","previous_headings":"","what":"Plot prevalence, persistence, and incidence proportions for each scenario","title":"Summarize introduction, spread, prevalence, and persistence","text":"summarize average prevalence, incidence proportion, probability persistence scenario , producing Figure 4 Rosenblatt et al. Prep.:","code":"ggplot(df, aes(x = Context, y = Prevalence*100)) +   geom_boxplot(width = 0.5)+   theme_classic()+   scale_y_continuous(\"Average prevalence (%)\")+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> prevalence  #plot persistence group_by(df, Context) %>%    summarize(., Persistence = sum(Persist)) %>%    mutate(LCL = binom.confint(Persistence, n = nsamples, methods = \"exact\")$lower, pred = binom.confint(Persistence, n = nsamples, methods = \"exact\")$mean ,UCL = binom.confint(Persistence, n = nsamples, methods = \"exact\")$upper) %>%    mutate(Context = factor(Context, levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) %>%    ggplot(., aes(x = Context, y = pred))+   geom_point()+   geom_errorbar(aes(ymin = LCL, ymax = UCL), width = 0.5)+   scale_fill_grey()+   theme_classic()+   scale_y_continuous(\"Probability of persistence\", limits = c(0,1))+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> persistence  ggplot(df, aes(x = Context, y = Cumulative_infections)) +   geom_boxplot(width = 0.5)+   theme_classic()+   scale_y_continuous(\"Incidence proportion\")+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> incidence_proportion   ggpubr::ggarrange(prevalence, persistence,incidence_proportion,nrow =1, ncol=3)"},{"path":"/articles/Visualize_by_context.html","id":"plot-interaction-between-foi-and-r_0-influencing-prevalence-persistence-and-incidence-proportion","dir":"Articles","previous_headings":"","what":"Plot interaction between FOI and \\(R_0\\) influencing prevalence, persistence, and incidence proportion","title":"Summarize introduction, spread, prevalence, and persistence","text":"summarize Force--Infection humans deer (\\(FOI_{HD}\\)) SARS-CoV-2’s basic reproductive number (\\(R_0\\)) interact outbreak characteristics. code produces Figure 5 Rosenblatt et al. Prep.:","code":"#Composite plot showing how R0 and FOI interact to impact prevelence df %>%    mutate(., r0_bin = case_when(r0 <= 1 ~ \"Unsustained spread\",                                r0 > 1 & r0 <= 3 ~ \"Low spread\",                                r0 > 3 & r0 <= 5 ~ \"Medium spread\",                                r0 > 5 ~ \"High spread\"),           r0_bin = factor(r0_bin, levels = c(\"Unsustained spread\",\"Low spread\",\"Medium spread\",\"High spread\"))) %>%    ggplot(., aes(log10(FOI),Prevalence*100))+   geom_point(aes(color = Context))+   facet_grid(.~r0_bin)+   scale_color_manual(values = c(\"black\",\"gray80\", \"#66A61E\",\"#66D61E\"))+   stat_smooth(method = \"glm\", method.args = list(family=quasi(link='log')), formula = y~x, color = \"black\")+   scale_y_continuous(name = \"Average prevalence (%)\", limits = c(0,20))+    scale_x_continuous(name = \"Introduction hazard from humans (log10 FOI)\", breaks = c(-9,-6,-4))+   theme_classic()+   theme(strip.text = element_text(size = 12),         axis.text.x = element_blank(),         axis.title.x = element_blank(),         axis.title.y = element_text(size = 12),axis.text.y = element_text(size = 10), legend.text = element_text(size=10), legend.title = element_text(size=12)) -> Prevalence.plot  df %>%    mutate(., r0_bin = case_when(r0 <= 1 ~ \"Unsustained spread\",                                r0 > 1 & r0 <= 3 ~ \"Low spread\",                                r0 > 3 & r0 <= 5 ~ \"Medium spread\",                                r0 > 5 ~ \"High spread\"),           r0_bin = factor(r0_bin, levels = c(\"Unsustained spread\",\"Low spread\",\"Medium spread\",\"High spread\"))) %>%   ggplot(., aes(log10(FOI),as.numeric(Persist)))+   geom_point(aes(color = Context))+   scale_color_manual(values = c(\"black\",\"gray80\", \"#66A61E\",\"#66D61E\"))+   facet_grid(.~r0_bin)+   stat_smooth(method = \"glm\",method.args = list(family = \"binomial\"), se = F, color = \"gray20\")+   scale_y_continuous(name = \"Probability of persistence\", limits = c(0,1), breaks = c(0,1))+    scale_x_continuous(name = \"Introduction hazard from humans (log10 FOI)\", breaks = c(-9,-6,-4))+   theme_classic()+   theme(strip.text = element_text(size = 12),         axis.text.x = element_blank(),         axis.title.x = element_blank(),         axis.title.y = element_text(size = 12),axis.text.y = element_text(size = 10), legend.text = element_text(size=10), legend.title = element_text(size=12))  ->  Persistence.plot  df %>%    mutate(., r0_bin = case_when(r0 <= 1 ~ \"Unsustained spread\",                                r0 > 1 & r0 <= 3 ~ \"Low spread\",                                r0 > 3 & r0 <= 5 ~ \"Medium spread\",                                r0 > 5 ~ \"High spread\"),           r0_bin = factor(r0_bin, levels = c(\"Unsustained spread\",\"Low spread\",\"Medium spread\",\"High spread\"))) %>%   ggplot(., aes(log10(FOI*100),Cumulative_infections))+   geom_point(aes(color = Context))+   facet_grid(.~r0_bin)+   scale_color_manual(values = c(\"black\",\"gray80\", \"#66A61E\",\"#66D61E\"))+   stat_smooth(method = \"glm\", method.args = list(family=quasi(link='log')), formula = y~x, color = \"black\")+   scale_y_continuous(name = \"Incidence proportion\")+ scale_x_continuous(name = \"Percent susceptible deer infected by humans per day (FOI; log-10 scale)\", breaks = c(-9,-6,-3,-1))+   theme_classic()+   theme(strip.text = element_text(size = 12),         axis.title.y = element_text(size = 12),axis.text = element_text(size = 10), legend.text = element_text(size=10), legend.title = element_text(size=12)) -> Incidence.plot  ggpubr::ggarrange(Prevalence.plot, Persistence.plot, Incidence.plot,nrow =3, ncol=1, common.legend = T)+   annotate(\"label\", x = 0.1, y = .85, label = \"A\", fill = \"white\", size = 6) +   annotate(\"label\", x = 0.1, y = .55, label = \"B\", fill = \"white\", size = 6) +    annotate(\"label\", x = 0.1, y = .25, label = \"C\", fill = \"white\", size = 6)"},{"path":"/articles/Visualize_by_context.html","id":"plot-comparison-of-continuous-introduction-from-humans-and-a-single-introductory-event","dir":"Articles","previous_headings":"","what":"Plot comparison of continuous introduction from humans and a single introductory event","title":"Summarize introduction, spread, prevalence, and persistence","text":", visualize differences outbreak characteristics continuous transmission humans (cases plotted ) vs single, initial outbreak various sizes. initial outbreaks range 0.1% (1:1,000 deer), 0.0001% (1:1 million deer), 1e-7% (1:1 billion deer). initial outbreak simulations come vignette demonstrating model outbreaks single, initial introduction. resulting figure corresponds Figure 6 Rosenblatt et al. Prep.","code":"whitetailedSIRS::scenario_results %>%     mutate(., intro = \"Continuous\\nintroduction\") %>%     select(., -r0, -FOI) -> continuous  whitetailedSIRS::initial_infection_results_1_in_1000 %>%     mutate(., intro = \"0.1%\\ninitially infected\") %>%     select(., -r0) -> initial_high  whitetailedSIRS::initial_infection_results_1_in_1mil %>%     mutate(., intro = \"0.0001%\\ninitially infected\") %>%     select(., -r0) -> initial_med  whitetailedSIRS::initial_infection_results_1_in_1bil %>%     mutate(., intro = \"10e-7%\\ninitially infected\") %>%     select(., -r0) -> initial_low  rbind(continuous, initial_high, initial_med, initial_low) %>%     mutate(intro = factor(intro, levels = c(\"Continuous\\nintroduction\",\"0.1%\\ninitially infected\", \"0.0001%\\ninitially infected\", \"10e-7%\\ninitially infected\")),           Cumulative_infections = Cumulative_infections)-> spillover.df  spillover.df %>%     ggplot(., aes(x = intro, y = Prevalence))+    geom_boxplot(width = 0.5)+    facet_grid(Context ~.)+    scale_y_continuous(name = \"Average prevalence (%)\")+    theme_classic()+    theme(axis.title.x = element_blank(),          strip.background = element_blank(),          strip.text.y = element_blank())-> spillover_prev_plot  spillover.df %>%     group_by(Context, intro) %>%     summarize(., LCL = binom.confint(x = sum(Persist),n = nsamples, methods = \"exact\", conf.level = 0.95)$lower,              mean = binom.confint(x = sum(Persist),n = nsamples, methods = \"exact\", conf.level = 0.95)$mean,              UCL = binom.confint(x = sum(Persist),n = nsamples, methods = \"exact\", conf.level = 0.95)$upper) %>%     ggplot(., aes(x = intro, y = mean))+    geom_point()+    geom_errorbar(aes(ymin = LCL, ymax = UCL), width = 0.5)+    facet_grid(Context ~.)+    scale_y_continuous(name = \"Probability of persistence\")+    theme_classic()+    theme(axis.title.x = element_blank(),          strip.background = element_blank(),          strip.text.y = element_blank()) -> spillover_presist_plot  spillover.df %>%     ggplot(., aes(x = intro, y = Cumulative_infections))+    geom_boxplot(width = 0.5)+    facet_grid(Context ~.)+    scale_y_continuous(name = \"Incidence proportion\")+    theme_classic()+    theme(axis.title.x = element_blank()) -> spillover_cumulative_plot  ggpubr::ggarrange(spillover_prev_plot, spillover_presist_plot, spillover_cumulative_plot, ncol = 3)"},{"path":"/articles/Visualize_by_context.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Summarize introduction, spread, prevalence, and persistence","text":"vignette detailed comparing outbreak dynamics different captive wild scenarios. next vignette looks simulate outbreaks transmit wild captive scenarios via fence line interations.","code":""},{"path":"/articles/Visualize_by_context.html","id":"literature-cited","dir":"Articles","previous_headings":"","what":"Literature Cited","title":"Summarize introduction, spread, prevalence, and persistence","text":"Rosenblatt, E., J.D. Cook, G.V. Direnzo, E.H.C. Grant, F. Arce, K. Pepin, F.J. Rudolph, M.C. Runge, S. Shriner, D. Walsh, B.. Mosher. Prep. Epidemiological modeling SARS-CoV-2 white-tailed deer (Odocoileus virginianus) reveals conditions introduction widespread transmission.","code":""},{"path":"/articles/example_values.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to a simple projection using whitetailedSIRS","text":"vignette, explore use functions whitetailedSIRS package project SARS-CoV-2 outbreaks white tailed deer. use data variety sorces parameterize SIRS ODE equations explored sir_model_description vignette. also demonstrate display outputs interpretation. general approach simulating SARS-CoV-2 outbreaks : Set number simulations Draw random sample parameters used estimate infection probabilities, contact rates, important parameters. Derive parameters used SIRS ODE equation set Define initial SIR compartment sizes Solve SIRS ODE equations calculate daily compartment sizes Calculate risk introduction magnitude spread given parameters Calculate average daily prevalence, probability persistence, incidence proportion.","code":""},{"path":"/articles/example_values.html","id":"set-number-of-simulations-to-run-and-context-of-simulation","dir":"Articles","previous_headings":"","what":"1. Set number of simulations to run and context of simulation","title":"Introduction to a simple projection using whitetailedSIRS","text":"Scenario: example, fully susceptible wild captive deer populations able interact along single fence line. Wild deer rural setting low human density. Captive deer intensive captive facility, facility focused captive breeding. populations interacting humans environments, different rates duration proximity. SARS-CoV-2 prevalence humans constant 5% population. set seed results repeatable, set number samples desired amount (nsamples). example, run 50 simulations.","code":"set.seed(23) nsamples <- 50"},{"path":"/articles/example_values.html","id":"sample-parameters-for-simulations","dir":"Articles","previous_headings":"","what":"2. Sample parameters for simulations","title":"Introduction to a simple projection using whitetailedSIRS","text":"Next, need draw random samples various parameters lead derivation transmission risk parameters used SIRS ODE equations. Parameters available literature can used, well estimated using expert elicitation. Several parameters necessary deriving various transmission risks may exist literature. overcome lack empirical estimates, package draws certain parameter estimates expert-elicitation process, detailed Rosenblatt et al. Prep. table , elicited parameters , mean (mu) standard deviations (sd), error distributions (family) specified. code following vignettes draw values distributions outbreak simulations. purposes, use following parameters table : Temporary immunity: Days aquired immunity SARS-CoV-2 lost Viral load: Concentration SARS-CoV-2 deer sputum (RNA copies/ml; relative human sputum concentration 5.6 log10) Dose-response: Quanta SARS-CoV-2 dose-response deer (1/quanta required ID63) Deer proximity duration: Duration proximity event deer (proximity types; minutes) Direct contact probability: Probability deer making direct contact Deer-human proximity rate: Human-deer proximity rate wild, rural, wild suburban, captive scenarios(events/120 days) Deer-human proximity duration: Human-deer proximity duration wild, rural, wild suburban, captive scenarios(minutes) Deer-deer proximity rate, captive: Deer-deer proximity rate captive facilities (events/day) Using elicited estimates, draw random sample parameters listed using draw_elicitation_samples.R function whitetailedSIRS package: code generated sample 50 values parameters elicited, using appropriate distribution. use parameters now calculate transmission terms parameters go SIRS model. elicitation_data object tibble, sample values parameter vector values within cell tibble my_sample column: write short helper function help us extract vectors my_sample column, can assigned different parameters. function get_EE_param_vals.R available use whitetailedSIRS package. , show random draws duration temporary immunity following SARS-CoV-2 infection deer: set parameters generated expert elicitation distributions. values used conversions discussed referenced Rosenblatt et al. Prep: Using sets parameters expert elicitation calculate probability infection via aerosol direct contact. calculations also informed parameters literature (see Rosenblatt et al. Prep.), formulations can found sir_model_description article. calc_sigma_aero calc_sigma_dc functions listed included whitetailedSIRS package, estimate probabilties infection SARS-CoV-2 transmitted aerosols (aero) fluid exchanged direct contact (DC). Additionally, include important parameters constant values, including long takes individual deer recover infection (gamma_recov) human prevalence (I_human). also need define role vaccine boosters, now set booster rates zero. Implementation vaccine boosters potential action taken influence outbreak severity. interventions discussed Management_Alternatives_Systems vignette.","code":"EE_data <- whitetailedSIRS::elicitation_data # bind samples to the elicitation df  whitetailedSIRS::draw_elicitation_samples(elicitation_data = EE_data, nsamples = nsamples,seed = 23) -> elicitation_data slice_head(elicitation_data, n = 5) #> # A tibble: 5 × 5 #>   parameter                  mu    sd family     my_sample  #>   <chr>                   <dbl> <dbl> <chr>      <list>     #> 1 Temporary Immunity     4.72   0.626 log-normal <dbl [50]> #> 2 Wastewater Infections -1.35   1.49  log-normal <dbl [50]> #> 3 Fomite Infections     -0.0414 1.03  log-normal <dbl [50]> #> 4 Viral Load             0.216  0.344 log-normal <dbl [50]> #> 5 Dose-Response          0.277  0.272 log-normal <dbl [50]> whitetailedSIRS::get_EE_param_vals(data = elicitation_data, my_param = \"Temporary Immunity\") #>  [1] 127.13812  85.79547 199.59902 346.40581 210.29529 225.42113  94.63776 #>  [8] 213.29355 115.89782 302.26460 129.15091  58.48126  94.01133 152.30523 #> [15]  52.57913 136.62800  81.32163  85.38631  77.38886 253.44842 190.09608 #> [22]  79.01995 184.58440  54.26715  80.78136 112.57102  81.71051 245.37052 #> [29]  74.47503 125.03823  79.65655 119.79087  54.92593  51.48566  99.25044 #> [36] 125.89298 255.53182  48.57184 193.18007 130.33635 216.39570 258.98849 #> [43] 203.72840  60.75563  52.59592  40.59831 119.35158 111.09585 155.38187 #> [50]  97.55897 # Immunity loss rate, the inverse of the duration of temporary immunity. alpha_immunity <- 1 / whitetailedSIRS::get_EE_param_vals(data = elicitation_data, my_param = \"Temporary Immunity\")  # Proximity rate between wild deer using the contact_rate fx using defaults (see ?calc_contact_rate for details): omega_ww <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = \"low\")  # Proximity rate across fence lines (numerator drawn from literature) omega_cw <- 0.00072 / get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\")  # Proximity rate between captive deer omega_cc <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Deer Proximity Rate, Captive (per day)\")  # Proximity rate between humans and deer in rural, wild settings omega_hw <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") / 120  # Proximity rate between humans and deer in captive settings omega_hc <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Captive (per 120 days)\") /120  # Duration of proximity between deer in all scenarios t_contact_deer_deer <- get_EE_param_vals(data = elicitation_data,my_param = \"Deer Proximity Duration (minutes)\")  # Duration of proximity between humans and deer in rural, wild settings t_contact_deer_human_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Rural (minutes)\")  # Duration of proximity between humans and deer in captive settings t_contact_deer_human_capt <- get_EE_param_vals(data = elicitation_data,my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")  # Viral load proportional to human value (multiplier drawn from the literature): C_nu <- 10^5.6 * get_EE_param_vals(data = elicitation_data, my_param = \"Viral Load\")  # Deer dose-response response for SARS-CoV-2 in aerosols r_deer <- get_EE_param_vals(data = elicitation_data, my_param = \"Dose-Response\")  # Direct contact probability (same for all deer): epsilon_dc <- get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\") # aerosol transmission between deer, using deer exhalation/inhalation rates (default) sigma_aero_deer_deer <- whitetailedSIRS::calc_sigma_aero(C_nu = C_nu,                                   t_contact = t_contact_deer_deer / 60,                                   r = r_deer)  # aerosol transmission from humans to deer in a rural, wild scenario, modifying exhalation rates to that of a human sigma_aero_deer_human_rural <- whitetailedSIRS::calc_sigma_aero(ER = rep(0.53, nsamples), C_nu = C_nu, t_contact = t_contact_deer_human_rural/60, r = r_deer)  #aerosol transmission from humans to deer in a captive scenario, modifying exhalation rates to that of a human sigma_aero_deer_human_capt <- whitetailedSIRS::calc_sigma_aero(ER = rep(0.53, nsamples), C_nu = C_nu, t_contact = t_contact_deer_human_capt/60, r = r_deer)  # direct contact fluid transmission between deer sigma_dc_deer_deer <- whitetailedSIRS::calc_sigma_dc(C_nu = C_nu) #Inverse of a 6 day recovery period from infection gamma_recov <- rep(1/6, nsamples)   #Fixed human prevalence level (5%) I_human <- rep(0.05, nsamples)   #No vaccine boosters administered to captive populations boost <- rep(0, nsamples)"},{"path":"/articles/example_values.html","id":"derive-parameters-used-the-sirs-ode-equation-set","dir":"Articles","previous_headings":"","what":"3. Derive parameters used the SIRS ODE equation set","title":"Introduction to a simple projection using whitetailedSIRS","text":"Next, use parameters just defined calculate derived parameters necessary use SIRS ODE equation sets. can done using alternative() function whitetailedSIRS package:","code":"list_params <- alternative(alpha_immunity = alpha_immunity, omega_ww = omega_ww, omega_cw = omega_cw, omega_cc = omega_cc, omega_hw = omega_hw, omega_hc = omega_hc, sigma_aero_deer_deer_wild = sigma_aero_deer_deer, sigma_aero_deer_deer_captive = sigma_aero_deer_deer, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer, gamma_recov = gamma_recov, I_human = I_human, boost = boost)  str(list_params) #> List of 12 #>  $ alpha_immunity: num [1:50] 0.00787 0.01166 0.00501 0.00289 0.00476 ... #>  $ beta_aero_ww  : num [1:50] 0.2532 0.0115 0.2061 0.0234 0.0725 ... #>  $ beta_aero_cw  : num [1:50] 4.22e-04 1.49e-05 2.16e-04 1.74e-05 3.38e-05 ... #>  $ beta_aero_cc  : num [1:50] 1.5444 0.072 1.5437 0.0414 1.4717 ... #>  $ beta_aero_hw  : num [1:50] 1.14e-06 1.81e-05 4.31e-08 2.97e-06 4.18e-07 ... #>  $ beta_aero_hc  : num [1:50] 0.024714 0.000191 0.004173 0.002105 0.001069 ... #>  $ beta_dc_ww    : num [1:50] 0.000508 0.000218 0.000394 0.000715 0.001884 ... #>  $ beta_dc_cw    : num [1:50] 8.48e-07 2.84e-07 4.13e-07 5.31e-07 8.79e-07 ... #>  $ beta_dc_cc    : num [1:50] 0.0031 0.00137 0.00295 0.00126 0.03824 ... #>  $ gamma_recov   : num [1:50] 0.167 0.167 0.167 0.167 0.167 ... #>  $ I_human       : num [1:50] 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 0.05 ... #>  $ boost         : num [1:50] 0 0 0 0 0 0 0 0 0 0 ..."},{"path":"/articles/example_values.html","id":"define-initial-sir-compartment-sizes","dir":"Articles","previous_headings":"","what":"4. Define initial SIR compartment sizes","title":"Introduction to a simple projection using whitetailedSIRS","text":"Now parameters need, can list initial compartment sizes calculate compartments change outbreak, calculate steady state equilibrium size infected compartments. set two sets initial compartment sizes. first detailed compartment list used estimate daily compartment sizes calculate growing proportion individuals infected course simulation (list_inits). second detailed similar list, calculation steady state SIRS ODE equation, used designate SARS-CoV-2 persists simulation (list_inits_steady). lists value S, , R compartments, differ inclusion I_wild_cumulative I_captive_cumulative arguments list_inits (start 0):","code":"#Compartment sizes formatted to calculate daily prevalence and cumulative infections: list_inits <- list(    S_wild = rep(1, nsamples),    I_wild = rep(0, nsamples),    R_wild = rep(0, nsamples),    I_wild_cumulative = rep(0, nsamples),    S_captive = rep(1, nsamples),    I_captive = rep(0, nsamples),    R_captive = rep(0, nsamples),    I_captive_cumulative = rep(0,nsamples) )  #Compartment sizes formatted to calculate steady state equilibrium dynamics: list_inits_steady <- list(    S_wild = rep(1, nsamples),    I_wild = rep(0, nsamples),    R_wild = rep(0, nsamples),    S_captive = rep(1, nsamples),    I_captive = rep(0, nsamples),    R_captive = rep(0, nsamples) )"},{"path":"/articles/example_values.html","id":"solve-the-sirs-ode-equations-and-calculate-daily-compartment-sizes","dir":"Articles","previous_headings":"","what":"5. Solve the SIRS ODE equations and calculate daily compartment sizes","title":"Introduction to a simple projection using whitetailedSIRS","text":"First, set duration simulation. can solve SIRS ode equations using sirs_results() function. function requires number simulations run (iter), initial compartment sizes (initial_compartments), initial compartment sizes calculating steady state comnpartment sizes (initial_compartments_steady), parameter sets used simulation (params), duration simulation (times). finally add name dataset, useful running multiple parameter sets different management schemes epidemiological conditions. look sirs_results object, can see tibble list objects, arranged simulation (run_id). can see initial compartment sizes projecting outbreak (inits.fall) calculating steady state infected compartment size (inits.steady). Note original application whitetailedSIRS package projecting outbreak fall season North America (September-December). explains references “fall.” initial compartments first iteration simulation. can also look parameters randomly drawn first iteration simulation. remaining columns sirs_results tibble include daily sizes compartment, compartment sizes steady state equilibrium. look results Section 7, can briefly plot size Susceptible, Infectious, Recovered compartments populations. can see outbreaks far common captive settings, compared wild deer rural area. number simulations run scenario.","code":"#Set a sequence of days to model outbreaks times <- seq(0, 120, by = 1) sirs_results <- run(iter = nsamples, initial_compartments = list_inits, initial_compartments_steady = list_inits_steady, params = list_params, times = times, name = \"Example Values\") slice_head(sirs_results, n = 3) #> # A tibble: 3 × 7 #>   run_id inits.fall inits.steady params     ode_proj     steady_state Context    #>    <int> <list>     <list>       <list>     <list>       <list>       <chr>      #> 1      1 <dbl [8]>  <dbl [6]>    <dbl [12]> <deSolve[…]> <named list> Example V… #> 2      2 <dbl [8]>  <dbl [6]>    <dbl [12]> <deSolve[…]> <named list> Example V… #> 3      3 <dbl [8]>  <dbl [6]>    <dbl [12]> <deSolve[…]> <named list> Example V… sirs_results$inits.fall[[1]] #>               S_wild               I_wild               R_wild  #>                    1                    0                    0  #>    I_wild_cumulative            S_captive            I_captive  #>                    0                    1                    0  #>            R_captive I_captive_cumulative  #>                    0                    0 sirs_results$inits.steady[[1]] #>    S_wild    I_wild    R_wild S_captive I_captive R_captive  #>         1         0         0         1         0         0 sirs_results$params[[1]] #> alpha_immunity   beta_aero_ww   beta_aero_cw   beta_aero_cc   beta_aero_hw  #>   7.865461e-03   2.531817e-01   4.224768e-04   1.544409e+00   1.136479e-06  #>   beta_aero_hc     beta_dc_ww     beta_dc_cw     beta_dc_cc    gamma_recov  #>   2.471407e-02   5.079619e-04   8.476212e-07   3.098569e-03   1.666667e-01  #>        I_human          boost  #>   5.000000e-02   0.000000e+00 # get results in proper format: sirs_results %>%    mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%    select(., -I_wild_cumulative, -I_captive_cumulative) %>%     pivot_longer(cols = -c(run_id, time), names_to = \"compartment\") %>%    mutate(Context = case_when(str_detect(compartment,\"wild\") ~ \"Wild\",                               str_detect(compartment,\"captive\") ~ \"Captive\",),           Compartment = case_when(str_detect(compartment,\"S\") ~ \"Susceptible\",                                   str_detect(compartment,\"I\") ~ \"Infected\",                                   str_detect(compartment,\"R\") ~ \"Recovered\",)) %>%     mutate(Compartment = factor(Compartment, levels = c(\"Susceptible\", \"Infected\", \"Recovered\"))) %>%     ggplot(., aes(x = time, y = value, group = run_id)) +    facet_grid(Context~Compartment) +    geom_line(linewidth = 0.2) +    labs(x = \"Time (days)\", y = \"Proportion of population\") +    theme_classic() +       theme(axis.text = element_text(size = 6), axis.title = element_text(size = 6),axis.title.x = element_text(size = 6), axis.text.x = element_text(size = 6), strip.text = element_text(size = 6))"},{"path":"/articles/example_values.html","id":"calculate-risk-of-introduction-and-magnitude-of-spread-given-parameters","dir":"Articles","previous_headings":"","what":"6. Calculate risk of introduction and magnitude of spread given parameters","title":"Introduction to a simple projection using whitetailedSIRS","text":"demonstrate calculation epidemiological metrics describe rate introduction SARS-CoV-2 humans deer, number secondary infections resulting infectious deer. use derived transmission parameters defined depth sir_model_description vignette.","code":""},{"path":"/articles/example_values.html","id":"force-of-infection","dir":"Articles","previous_headings":"6. Calculate risk of introduction and magnitude of spread given parameters","what":"Force-Of-Infection","title":"Introduction to a simple projection using whitetailedSIRS","text":"first metric, termed Force--Infection (FOI), proportion susceptible deer infected per day, case, humans. calculation product proximity rate humans deer, probability infection aerosol transmission given event, prevalence human population . provide calculation plot comparing FOI rural, wild deer captive deer. Note y-axis log-10 scaled:","code":"#FOI foi_wild <- omega_hw * sigma_aero_deer_human_rural * I_human foi_captive <- omega_hc * sigma_aero_deer_human_capt * I_human  tibble(\"Wild, rural deer\" = foi_wild, \"Captive deer\" = foi_captive) %>%     pivot_longer(cols = everything()) %>%  ggplot(data = ., aes(x = name, y = log10(value*100))) +    geom_boxplot() +    ylab(\"Percent susceptible deer infected\\nby humans per day (FOI; log-10 scale)\")+    theme_classic()+    theme(axis.text = element_text(size = 10), axis.title = element_text(size = 10),legend.text = element_text(size = 12), legend.title = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(size = 10))"},{"path":"/articles/example_values.html","id":"probability-of-at-least-one-infection-per-1000-deer","dir":"Articles","previous_headings":"6. Calculate risk of introduction and magnitude of spread given parameters","what":"Probability of at least one infection per 1000 deer","title":"Introduction to a simple projection using whitetailedSIRS","text":"FOI sometimes hard conceptualize, especially small values estimate wild deer rural setting. useful conversion calculation probability least one deer becoming infected 1000 120 days simulated . can using constant hazard model (eqn. 3), take FOI calculated , consider time period t 120 days, 1000 individuals (N): According pHtD plot , high change least one infection captive facilities 120-day fall simulation. wild deer rural setting, chances least one infection low.","code":"#pHtD pHtD_wild <- round((1-(exp(-last(times)*foi_wild)^1000)), 1) pHtD_captive <- round((1-(exp(-last(times)*foi_captive)^1000)), 1)  tibble(\"Wild, rural deer\" = pHtD_wild, \"Captive deer\" = pHtD_captive) %>%     pivot_longer(cols = everything()) %>%  ggplot(data = ., aes(x = name, y = value)) +   geom_boxplot(width = 0.5)+   theme_classic()+   scale_y_continuous(\"Probability of at least 1 HtD transmission\\nper 1000 deer during 120-day projection\", limits = c(0,1))+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 10),legend.text = element_text(size = 12), legend.title = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(size = 10))"},{"path":"/articles/example_values.html","id":"basic-reproductive-number-r_0","dir":"Articles","previous_headings":"6. Calculate risk of introduction and magnitude of spread given parameters","what":"Basic reproductive number (\\(R_0\\))","title":"Introduction to a simple projection using whitetailedSIRS","text":"Finally, can calculate number secondary infection caused infectious deer. calculation sum transmission risks deer, aerosols (\\(\\beta_{WW}^{Aero}\\) , \\(\\beta_{CC}^{Aero}\\))fluid exchanged direct contact (\\(\\beta_{WW}^{DC}\\) , \\(\\beta_{CC}^{DC}\\)), divided recovery rate infection (\\(\\gamma\\); eqn 4 & 5). calculate plot range \\(R_0\\) captive deer wild deer rural setting. Captive deer clearly higher \\(R_0\\) values compared wild deer rural settings, well greater variation. Median \\(R_0\\) captivity much greater threshold (\\(R_0\\) == 1; red dashed line) sustained spread infections population.","code":"r0_deer_wild <- ((omega_ww * sigma_aero_deer_deer) + (omega_ww * sigma_dc_deer_deer * epsilon_dc)) * 1/gamma_recov r0_deer_captive <- ((omega_cc * sigma_aero_deer_deer) + (omega_cc * sigma_dc_deer_deer * epsilon_dc)) * 1/gamma_recov  tibble(\"Wild, rural deer\" = r0_deer_wild, \"Captive deer\" = r0_deer_captive) %>%     pivot_longer(cols = everything()) %>%     ggplot(., aes(x = name, y = value)) +    geom_boxplot() +    geom_hline(yintercept = 1, color = \"red\", linetype = \"dashed\") +    ylim(c(0,10))+    ylab(\"Basic reproductive number (R0)\")+    theme_classic()+    theme(axis.text = element_text(size = 10), axis.title = element_text(size = 10),legend.text = element_text(size = 12), legend.title = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(size = 10))"},{"path":"/articles/example_values.html","id":"calculate-average-daily-prevalence-probability-of-persistence-and-incidence-proportion-","dir":"Articles","previous_headings":"","what":"7. Calculate average daily prevalence, probability of persistence, and incidence proportion.","title":"Introduction to a simple projection using whitetailedSIRS","text":"Finally, can characterize outbreaks SARS-CoV-2 simulations using three metrics describe severity extent infections. metrics include prevalence, persistence, incidence proportion.","code":""},{"path":"/articles/example_values.html","id":"prevalence","dir":"Articles","previous_headings":"7. Calculate average daily prevalence, probability of persistence, and incidence proportion.","what":"Prevalence","title":"Introduction to a simple projection using whitetailedSIRS","text":"calculate average daily prevalence SARS-CoV-2 captive wild white-tailed deer. simply average daily infected compartment size across 120-day simulation simulation, compare median values across contexts.  simulations deer captive setting much higher median prevalence, compared simulations wild setting.","code":"sirs_results %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     select(., run_id, I_wild, I_captive) %>%     rename(., Wild = I_wild,           Captive = I_captive) %>%     gather(\"Compartment\", \"prevalence\", -run_id) %>%     group_by(run_id, Compartment) %>%     summarize(Prevalence = mean(prevalence)*100) %>%     ggplot(., aes(x = Compartment, y = Prevalence)) +    geom_boxplot(width = 0.5)+   theme_classic()+   scale_y_continuous(\"Average prevalence (%)\")+    theme(axis.text = element_text(size = 10), axis.title = element_text(size = 10),legend.text = element_text(size = 12), legend.title = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(size = 10)) #> `summarise()` has grouped output by 'run_id'. You can override using the #> `.groups` argument."},{"path":"/articles/example_values.html","id":"persistence","dir":"Articles","previous_headings":"7. Calculate average daily prevalence, probability of persistence, and incidence proportion.","what":"Persistence","title":"Introduction to a simple projection using whitetailedSIRS","text":"example, can see median probability SARS-CoV-2 persisting approximately 75%, whereas median persistence simulated wild deer population approximiately 20%.","code":"persist.threshold <- 0.001  sirs_results %>%    mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%    pull(steady_sir) %>%    list_rbind(names_to = \"run_id\") %>%    mutate(., Wild = I_wild > persist.threshold, Captive = I_captive > persist.threshold) %>%    select(., run_id, Captive, Wild) %>%    gather(\"Compartment\", \"Persist\", -run_id) %>%     group_by(Compartment) %>%     summarize(., Persistence = sum(Persist)) %>%     mutate(LCL = binom.confint(Persistence, n = nsamples, methods = \"exact\")$lower, pred = binom.confint(Persistence, n = nsamples, methods = \"exact\")$mean ,UCL = binom.confint(Persistence, n = nsamples, methods = \"exact\")$upper) %>%     ggplot(., aes(x = Compartment, y = pred))+    geom_point()+    geom_errorbar(aes(ymin = LCL, ymax = UCL), width = 0.5)+    scale_fill_grey()+    theme_classic()+    scale_y_continuous(\"Probability of persistence\", limits = c(0,1))+    theme(axis.text = element_text(size = 10), axis.title = element_text(size = 10),legend.text = element_text(size = 12), legend.title = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(size = 10))"},{"path":"/articles/example_values.html","id":"incidence-proportion","dir":"Articles","previous_headings":"7. Calculate average daily prevalence, probability of persistence, and incidence proportion.","what":"Incidence proportion","title":"Introduction to a simple projection using whitetailedSIRS","text":"Finally, can calculate cumulative proportion population infected course projection. metric summarizes extent infection population.","code":"sirs_results %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     select(., run_id, I_wild_cumulative, I_captive_cumulative) %>%     rename(., Wild = I_wild_cumulative,           Captive = I_captive_cumulative) %>%     gather(\"Compartment\", \"Incidence_Proportion\", -run_id) %>%     group_by(run_id, Compartment) %>%     summarize(Incidence_Proportion = last(Incidence_Proportion)*100) %>%     ggplot(., aes(x = Compartment, y = Incidence_Proportion)) +    geom_boxplot(width = 0.5)+   theme_classic()+   scale_y_continuous(\"Incidence proportion (%)\")+    theme(axis.text = element_text(size = 10), axis.title = element_text(size = 10),legend.text = element_text(size = 12), legend.title = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(size = 10)) #> `summarise()` has grouped output by 'run_id'. You can override using the #> `.groups` argument."},{"path":"/articles/example_values.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Introduction to a simple projection using whitetailedSIRS","text":"vignette showed example can use various whitetailedSIRS functions project disease outbreaks white-tailed deer, summarize outbreak characteristics across simulations. reading vignette previous vignettes, users prepared start exploring simulations using whitetailedSIRS. following vignettes, illustrate use whitetailedSIRS analyses published Rosenblatt et al. (Prep) Cook et al. (Prep). start running simulations Rosenblatt et al.’s (Prep) analysis outbreak dynamics given continuous spillover humans wild captive settings. Click return vignette detailing SIRS ODE equations used whitetailedSIRS.","code":""},{"path":"/articles/example_values.html","id":"literature-cited","dir":"Articles","previous_headings":"","what":"Literature Cited","title":"Introduction to a simple projection using whitetailedSIRS","text":"Cook, J.D., E. Rosenblatt, G.V. Direnzo, E.H.C. Grant, B.. Mosher, F. Arce, S. Christensen, R. Ghai, M.C. Runge. Prep. Using decision science evaluate risk management SARS-CoV-2 zoonotic transmission humans white-tailed deer. Rosenblatt, E., J.D. Cook, G.V. Direnzo, E.H.C. Grant, F. Arce, K. Pepin, F.J. Rudolph, M.C. Runge, S. Shriner, D. Walsh, B.. Mosher. Prep. Epidemiological modeling SARS-CoV-2 white-tailed deer (Odocoileus virginianus) reveals conditions introduction widespread transmission.","code":""},{"path":"/articles/sir_model_description.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"vignette discusses series equations allow us explore outbreak dynamics SARS-CoV-2 simulated white-tailed deer population. Several functions included calculations , referenced text .","code":""},{"path":"/articles/sir_model_description.html","id":"topics-covered-in-this-vignette","dir":"Articles","previous_headings":"","what":"Topics covered in this vignette","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"SIR ODE equation introduction SIR ODE equations white-tailed deer wild captive settings Calculation transmission risk aerosols fluids Tracking cumulative infections","code":""},{"path":"/articles/sir_model_description.html","id":"sirs-ode-equations","dir":"Articles","previous_headings":"","what":"SIRS ODE equations","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"package, explore two direct exposure pathways Susceptible-Infected-Recovered-Susceptible model (SIRS) simulates infection dynamics time. basic form SIRS model following set ordinary differential equations (ODE; eqn 1-3): \\(s\\) proportion susceptible individuals, \\(\\) proportion infected individuals SARS-CoV-2, \\(r\\) proportion recovered individuals; thus, \\(s++r = 1\\) . \\(\\beta\\) transmission rate, \\(\\gamma\\) recovery rate, \\(\\alpha\\) immunity loss rate (inverse time loss immunity; Figure 1). \\(\\beta\\) product contact rate (\\(c\\)) probability infection (\\(\\nu\\); eqn. 4).","code":""},{"path":"/articles/sir_model_description.html","id":"sirs-ode-equations-for-wild-and-captive-white-tailed-deer","dir":"Articles","previous_headings":"","what":"SIRS ODE equations for wild and captive white-tailed deer","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"can take basic SIRS ODE equations modify describe complex epidemiological processes. package uses general SIRS ODE equation set calculates outbreak dynamics within wild captive deer (Figure 1; Rosenblatt et al. Prep.). system, wild captive populations SIRS cycle. Introduction occurs initial exposure, continued exposure infected humans (orange diamond arrow). design also can incorporate user-defined fence line transmission rates allow SARS-CoV-2 transfer wild captive deer (green box arrows). Figure 1: conceptual illustration two seperate SIRS processes wild captive white-tailed deer, linked fenceline interactions exposed infected humans. SIRS ODE equations design stored primary function package, called whitetailedSIRS::simple_sirs(). derivation detailed (eqn. 5-10). equations, transmission rates (\\(\\beta\\)) denoted subscripts indicate host-recipient relationship, including human--wild deer (HW), human--captive deer (HC), wild deer--wild deer (WW), captive deer--wild deer (CW, parameter bidirection), captive deer--captive deer (CC). \\(\\beta\\) superscripts refer transmission route virus, including transmission via aerosols (Areo) via fluid exchanged physical contact (DC). equations 1-3 \\(\\gamma\\) recovery rate \\(\\alpha\\) immunity loss rate. several assumptions behind parameters discussed Rosenblatt et al. Prep..","code":""},{"path":"/articles/sir_model_description.html","id":"wild-deer-sirs-ode-equations","dir":"Articles","previous_headings":"SIRS ODE equations for wild and captive white-tailed deer","what":"Wild deer SIRS ODE equations","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"","code":"# equation 5   dS_wild <- alpha_immunity * R_wild -          (S_wild * ((beta_aero_ww * I_wild) + (beta_dc_ww * I_wild) +                        (beta_aero_cw * I_captive) + (beta_dc_cw * I_captive) +                        (beta_aero_hw * I_human))) # equation 6  dI_wild <- (S_wild * ((beta_aero_ww * I_wild) + (beta_dc_ww * I_wild) +                                (beta_aero_cw * I_captive) + (beta_dc_cw * I_captive) +                                (beta_aero_hw * I_human))) -          (gamma_recov * I_wild) # equation 7  dR_wild <- (gamma_recov * I_wild) -          (alpha_immunity * R_wild)"},{"path":"/articles/sir_model_description.html","id":"captive-deer-sirs-ode-equations","dir":"Articles","previous_headings":"SIRS ODE equations for wild and captive white-tailed deer","what":"Captive deer SIRS ODE equations","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"","code":"# equation 8  dS_captive <- alpha_immunity * R_captive -          (S_captive * ((beta_aero_cc * I_captive) + (beta_dc_cc *I_captive) +                           (beta_aero_cw * I_wild) + (beta_dc_cw * I_wild) +                           (beta_dc_hc * I_human))) # equation 9  dI_captive <- (S_captive * ((beta_aero_cc * I_captive) + (beta_dc_cc *I_captive) +                                      (beta_aero_cw*I_wild) + (beta_dc_cw * I_wild) +                                      (beta_dc_hc * I_human))) -          (gamma_recov * I_captive) # equation 10  dR_captive <- (gamma_recov * I_captive) -          (alpha_immunity * R_captive)"},{"path":"/articles/sir_model_description.html","id":"beta-definitions","dir":"Articles","previous_headings":"","what":"\\(\\beta\\) Definitions","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Several \\(\\beta\\) values included model incorporate various direct transmission pathways wild deer, captive deer, humans. basic structure \\(\\beta\\) values product proximity contact rate infection probability given contact. Superscripts indicate mode transmission, including: “Aero”, indicate transmission aerosols; “DC” indicate transmission via fluid exchanged direct contact. Subscripts indicate host-recipient pair particular transmission risk parameter: transmission wild deer (WW); transmission captive deer wild deer (CW); transmission captive deer (CC); transmission human wild deer (HW); transmission human captive deer (HC).","code":""},{"path":"/articles/sir_model_description.html","id":"aerosol-transmission","dir":"Articles","previous_headings":"\\(\\beta\\) Definitions","what":"Aerosol Transmission","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Aerosolized transmission rates (\\(\\beta^{Aero}\\)) product rate susceptible individual enters shared airspace infected individual (within 1.5m) probability infection given proximity. detail deer-deer proximity rates wild, captivity, across fence lines separating settings (Section 2.3.1.1), human-deer proximity rates wild captive environments (Section 2.3.1.2), infection probability given proximity (Section 2.3.1.3). build transmission rates (\\(\\beta^{Aero}\\)) deer humans deer various settings (Section 2.3.1.4).","code":""},{"path":"/articles/sir_model_description.html","id":"deer-deer-proximity-rates","dir":"Articles","previous_headings":"\\(\\beta\\) Definitions > Aerosol Transmission","what":"Deer-deer proximity rates","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Wild deer - define proximity (\\(\\omega_{ij}\\)) frequency per day host recipient j within 1.5 m . estimate proximity rate wild deer, (\\(\\omega_{ww}\\)), based contact rate model developed Habib et al. (2011) chronic wasting disease white-tailed deer results intermediate transmission blends density-dependence frequency-dependence. formulation applies deer-deer transmission scenarios, cases without attractants (e.g., bait, supplemental feed). also apply model captive circumstances mimic natural conditions. given : \\(\\kappa\\) scaling constant; \\(q\\) concavity scaling constant density-contact rate relationship ranging 0 – 1, density-dependence frequency-dependence, respectively; \\(N_W\\) total population size; \\(A_W\\) area inhabited population; \\(\\rho_{attractant}\\) adjustment presence attractant. whitetailedSIRS package, function calc_contact_rate handle calculation. Captive deer - per capita rate proximity deer captivity unstudied likely highly dependent facility type practices. lower density facilities mimic natural densities natural conditions estimate proximity rates based calculation wild populations (Eq. 11). use expert-elicited estimates deer proximity rates (proximity events per day) higher intensity captive operations (\\(\\omega_{CC}\\)). Fence line interactions – estimate per capita proximity rates along fence lines separating wild captive deer herds using multiple estimates derived literature (\\(\\omega_{WC}\\)).","code":"calc_contact_rate <- function(kappa,                               N_w,                               q,                               A_w,                               rho_attractant,                               nsamples,                               seed,                               type_contact){     contact_val <- kappa * (N_w^(1-q)/A_w) * rho_attractant    return(contact_val) }"},{"path":"/articles/sir_model_description.html","id":"human-deer-proximity-rates","dir":"Articles","previous_headings":"\\(\\beta\\) Definitions > Aerosol Transmission","what":"Human-deer proximity rates","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Human - wild deer proximity rates – Human-deer interactions understudied literature, instead use expert elicitation estimate rate proximity humans deer wild conditions (\\(\\omega_{HW}\\)). expert elicitation process estimated human-deer proximity rates two scenarios differed human density development, reflecting rural suburban conditions. Human – captive deer proximity rates – used expert elicitation estimate human-deer proximity rate intensive captive facilities, reflecting range activities including operational tasks, routine veterinary tasks, visitors interacting captive animals. used general description provide general, initial estimate unstudied proximity rate (\\(\\omega_{HC}\\)), acknowledging rate likely enterprise- facility-specific.","code":""},{"path":"/articles/sir_model_description.html","id":"infection-probability-given-proximity","dir":"Articles","previous_headings":"\\(\\beta\\) Definitions > Aerosol Transmission","what":"Infection probability given proximity","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"probability infection (\\(\\sigma^{Aero}\\)) given proximity function instantaneous dose received dose response relationship. estimate dose received susceptible individual proximity infected individual, model 1) emission SARS-CoV-2 infected individual, 2) resulting concentration SARS-CoV-2 designated airspace around infected individual, considering virus emission virus loss, 3) amount SARS-CoV-2 inhaled susceptible individual given proximity infected individual. parameters exist literature focused human SARS-CoV-2 infection can adopted . First, infected individual emits SARS-CoV-2 particular rate (\\(ER_q\\); quanta/hr) product viral load sputum (\\(C_{\\nu}\\); RNA copies/ml), conversion factor (\\(C_i\\); quanta/RNA copy), inhalation/exhalation rate (\\(IR\\); \\(m^3\\)/hr), exhaled droplet volume concentration (\\(V_d\\); ml exhaled droplets/\\(m^3\\) exhaled; Mikszewski et al. 2021). can model instantaneous concentration SARS-CoV-2 (\\(C\\); quanta/\\(m^3\\)) well-mixed airspace around infected individual emitting SARS-CoV-2 (\\({ER}_q\\); quanta/hr) fixed volume (\\(V\\); \\(m^3\\)), accounting loss rate (\\({IVRR}\\); \\(hr^{-1}\\)) sum air exchange (\\({AER}\\); \\(hr^{-1}\\)), settling (\\(s\\); \\(hr^{-1}\\), inactivation rates (\\(\\lambda\\); \\(hr^{-1}\\); modified Buonanno et al. 2020). susceptible individual enters contaminated airspace surrounding infected individual, dose (\\(Q_A\\); quanta) product inhalation rate susceptible individual (\\(IR\\); \\(m^3\\)/hr), concentration SARS-CoV-2 fixed volume (\\(C\\); quanta/\\(m^3\\)), duration time susceptible individual stays within contaminated airspace contact (\\(t_{contact}\\); hr). amount SARS-CoV-2 inhaled susceptible deer (\\(Q_A\\)) converted probability infection using Wells-Riley infection model (Equation 8). model, probability individual developing sustaining infection SARS-CoV-2 function dose received (measured quanta; \\(Q\\)) species-specific probability infection 1 quantum (\\(r\\); \\(r_{human} = 1\\) corresponds 1 quantum causing infection 63% susceptible individuals; HID63). use expert elicitation estimate dose response relationship white-tailed deer (\\(r_{deer}\\)). dose received probability infection calculated deer-deer human-deer proximity events based species-specific exhalation/inhalation rate, viral loads, dose response relationships, various durations proximity events particular contexts. whitetailedSIRS package, function calc_sigma_aero automate calculation infection probability.","code":"calc_sigma_aero <- function(AER,                          s,                          lambda,                          C_nu,                          C_i,                          IR,                          V_d,                          V_air,                          t_contact,                          r) {        # Calculate the viral particle loss rate as the sum     # of air exchange, settling rate, and inactivation    IVRR <- AER + s + lambda        # calculate emission rate of viral particles    ER_q <- C_nu * C_i * IR * V_d        # Calculate instantaneous concentration of viral particles.    C_inst <- ER_q / (IVRR * V_air) #V_air is airspace volume        # Calculate viral dose in quanta as product of     # inhalation rate, instantaneous concentration of viral particles    # and the duration of the contact    Q <- IR * C_inst * t_contact        # Use Wells-Riley model to transform amount of virus inhaled    # into a probability of infection via aerosol    sigma_aero <- 1 - exp(-r * Q)        return(sigma_aero) }"},{"path":"/articles/sir_model_description.html","id":"aerosol-transmission-rates-betaaero","dir":"Articles","previous_headings":"\\(\\beta\\) Definitions > Aerosol Transmission","what":"Aerosol transmission rates (\\(\\beta^{Aero}\\))","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"various aerosol transmission rates used SIRS model. Parameter values listed Table 1 Rosenblatt et al. Prep. Aerosol transmission wild deer: \\(\\kappa\\) = scaling constant (Section 2.1.1) \\(q\\) = concavity scaling constant (Section 2.1.1) \\(N_W\\) = Total wild population size (Section 2.1.1) \\(A_W\\) = Area inhabited wild population (Section 2.1.1) \\(\\rho_{attractant}\\) = proportional adjustment attractants landscape (Section 2.1.1) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3) Aerosol transmission captive deer: \\(\\omega_{CC}\\) = Captivity proximity rate (Section 2.1.1) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3) Aerosol transmission wild captive deer across fence: \\(\\omega_{WC}\\) = Fence line proximity rate wild captive deer (Section 2.1.1) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3) Aerosol transmission humans wild deer: \\(\\omega_{HW}\\) = Proximity rate humans wild deer (Section 2.1.2) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3) Aerosol transmission humans captive deer: \\(\\omega_{HC}\\) = Proximity rate humans captive deer (Section 2.1.2) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3)","code":""},{"path":"/articles/sir_model_description.html","id":"fluid-transmission","dir":"Articles","previous_headings":"\\(\\beta\\) Definitions","what":"Fluid Transmission","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"transmission rate SARS-CoV-2 via fluid transfer direct contact (\\(\\beta^{DC}\\)) product rate susceptible individual enters shared airspace infected individual (within 1.5m), probability two individuals making physical contact, probability infection given contact. simply take deer-deer proximity rates detailed (\\(\\omega_{ij}\\)) multiply expert-elicited estimates physical contact probability (\\(\\epsilon^{DC}\\)) determine rate physical contact, probability infection given transfer 0.1 ml contaminated fluid physical contact (\\(\\sigma^{DC}\\)). detail infection probability given physical contact (Section 2.2.1). build transmission rates (\\(\\beta^{DC}\\)) deer (Section 2.2.2). consider transmission pathway deer, human deer.","code":""},{"path":"/articles/sir_model_description.html","id":"infection-probability-given-physical-contact","dir":"Articles","previous_headings":"\\(\\beta\\) Definitions > Fluid Transmission","what":"Infection probability given physical contact","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"use Wells-Riley dose response model estimates infection probability log-logistic function dose (\\(d^{dc}\\); plaque-forming units, PFU) dose-response function (\\(k\\); Watanabe et al. 2010). dose received product typical volume sputum transferred given contact (\\(V^{DC}\\)) concentration SARS-CoV-2 sputum (\\(C_{\\nu}\\)). initially assume contact 100\\(\\mu\\)l sputum transferred individuals making contact. adjust volume across simulations identify volume threshold rapidly increases transmission risk. whitetailedSIRS package, function calc_sigma_dc automate calculation infection probability transmission fluid.","code":"# function for sigma_direct_contact  calc_sigma_DC<- function(V_DC, C_nu, pfu_conv, k){        # calculate dose received as function of volume of sputum and viral particles concentration. There is an added parameter pfu_conv to convert RNA copies to plaque forming units, which is likely necessary given available parameter estimates.    d_DC <- V_DC * C_nu * pfu_conv        # calculate infection probability     sigma_DC <- 1 - exp(-d_DC/k)        return(sigma_DC) }"},{"path":"/articles/sir_model_description.html","id":"fluid-transmission-betadc","dir":"Articles","previous_headings":"\\(\\beta\\) Definitions > Fluid Transmission","what":"Fluid Transmission (\\(\\beta^{DC}\\))","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"various direct contact transmission rates used SIRS model. Parameter values listed Table 1 Rosenblatt et al. Prep. Direct contact transmission wild deer: \\(\\kappa\\) = scaling constant (Section 2.1.1) \\(q\\) = concavity scaling constant (Section 2.1.1) \\(N_W\\) = Total wild population size (Section 2.1.1) \\(A_W\\) = Area inhabited wild population (Section 2.1.1) \\(\\epsilon^{DC}\\) = Probability deer making direct contact (Section 2.2) \\(\\sigma^{DC}\\) = Probability infection direct contact (Section 2.2.1) Direct contact transmission captive deer: \\(\\omega_{CC}\\) = Captivity proximity rate (Section 2.1.1) \\(\\epsilon^{DC}\\) = Probability physical contact (Section 2.2) \\(\\sigma^{DC}\\) = Probability infection physical contact (Section 2.2.1) Direct contact transmission wild captive deer along fence line (assuming possible): \\(\\omega_{WC}\\) = Fenceline contact rate wild captive deer (Section 2.1.1) \\(\\epsilon^{DC}\\) = Probability physical contact (Section 2.2) \\(\\epsilon^{DC}\\) = Probability infection physical contact (Section 2.2.1)","code":""},{"path":"/articles/sir_model_description.html","id":"function-to-calculate-and-organize-betas-and-other-sir-parameters","dir":"Articles","previous_headings":"\\(\\beta\\) Definitions","what":"Function to calculate and organize betas and other SIR parameters","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"function whitetailedSIRS::alternatives() available calculations user.","code":"alternative <- function(alpha_immunity = NULL, omega_ww = NULL, omega_cw = NULL, omega_cc = NULL, omega_hw = NULL, omega_hc = NULL, sigma_aero_deer_deer_wild = NULL, sigma_aero_deer_deer_captive = NULL, sigma_aero_deer_human_wild = NULL, sigma_aero_deer_human_capt = NULL, sigma_dc = NULL, sigma_dc_deer_deer = NULL, gamma_recov = NULL, I_human = NULL, boost = NULL)      {list(       alpha_immunity, #Duration of immunity (Section 1)       beta_aero_ww = omega_ww * sigma_aero_deer_deer_wild, #Transmission risk, aerosols between wild deer (Section 2.1.4)       beta_aero_cw = omega_cw * sigma_aero_deer_deer_wild, #Transmission risk, aerosols across fencelines (Section 2.1.4)       beta_aero_cc = omega_cc * sigma_aero_deer_deer_captive, #Transmission risk, aerosols between captive deer  (Section 2.1.4)       beta_aero_hw = omega_hw * sigma_aero_deer_human_wild, #Transmission risk, aerosols between humans and wild deer  (Section 2.1.4)       beta_aero_hc = omega_hc * sigma_aero_deer_human_capt, #Transmission risk, aerosols between humans and captive deer  (Section 2.1.4)       beta_dc_ww = omega_ww * sigma_dc * sigma_dc_deer_deer, #Transmission risk, fluid between wild deer (Section 2.2.2)       beta_dc_cw = omega_cw * sigma_dc * sigma_dc_deer_deer, #Transmission risk, fluid across fencelines (Section 2.2.2)       beta_dc_cc = omega_cc * sigma_dc * sigma_dc_deer_deer, #Transmission risk, fluid between captive deer (Section 2.2.2)       gamma_recov = gamma_recov, #Recovery rate (Section 1)       I_human = I_human, #Human prevalence (Section 1)       boost = boost)} #Boost (See `whitetailedSIRS::Management_Alternatives_Systems` vignette for more details.)"},{"path":"/articles/sir_model_description.html","id":"outputs-reported-by-whitetailedsirs-solving-sirs-ode-equations","dir":"Articles","previous_headings":"","what":"Outputs reported by whitetailedSIRS solving SIRS ODE equations","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Several epidemiological metrics can calculated using outputs solved SIRS ODE equations. metrics shown detail following vignettes, include: Force--Infection (FOI): susceptible individuals infected per day Basic reproductive number (R_{0}): number secondary infections caused infected deer course infection Average daily prevalence deer: average proportion deer infected outbreak Probability persistence beyond projection ODE equilibrium (deterministic point SIRS compartment sizes longer change) Incidence proportion: cumulative proportion population infected course projection. modified whitetailedSIRS::simple_sirs_with_cumulative() added ODE equations calculate sum. majority function identical whitetailedSIRS::simple_sirs(), two added lines: added lines equate following calculations:","code":"cumulative_I_wild <- (S_wild * ((beta_aero_ww * I_wild) + (beta_dc_ww * I_wild) +                                          (beta_aero_cw * I_captive) + (beta_dc_cw * I_captive) +                                          (beta_aero_hw * I_human)))  cumulative_I_captive <- (S_captive * ((beta_aero_cc * I_captive) + (beta_dc_cc *I_captive) +                                                (beta_aero_cw*I_wild) + (beta_dc_cw * I_wild) +                                                (beta_aero_hc * I_human)))"},{"path":"/articles/sir_model_description.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next Steps","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"overview SIRS ODE equations used project SARS-CoV-2 outbreaks white-tailed deer, various summary functions metrics use characterize outbreaks, next can explore example approach function use model outbreak simulated population. Click return vignette introducing whitetailedSIRS package.","code":""},{"path":"/articles/sir_model_description.html","id":"literature-cited","dir":"Articles","previous_headings":"","what":"Literature Cited","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Rosenblatt, E., J.D. Cook, G.V. Direnzo, E.H.C. Grant, F. Arce, K. Pepin, F.J. Rudolph, M.C. Runge, S. Shriner, D. Walsh, B.. Mosher. Prep. Epidemiological modeling SARS-CoV-2 white-tailed deer (Odocoileus virginianus) reveals conditions introduction widespread transmission.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elias Rosenblatt. Author, maintainer. Javi Rudolph. Author, contributor. Fer Arce. Author, contributor. Jonathan Cook. Author, contributor. Graziella DiRenzo. Author, contributor. Evan Grant. Author, contributor. Michael Runge. Author, contributor. Brittany Mosher. Author, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rosenblatt E, Rudolph J, Arce F, Cook J, DiRenzo G, Grant E, Runge M, Mosher B (2023). whitetailedSIRS: Generate Deer Disease Dyanmics SIRS Framework. R package version 1.0.0, https://github.com/disease-decision-analysis--research/whitetailedSIRS.","code":"@Manual{,   title = {whitetailedSIRS: Generate Deer Disease Dyanmics Under an SIRS Framework},   author = {Elias Rosenblatt and Javi Rudolph and Fer Arce and Jonathan Cook and Graziella DiRenzo and Evan Grant and Michael Runge and Brittany Mosher},   year = {2023},   note = {R package version 1.0.0},   url = {https://github.com/disease-decision-analysis-and-research/whitetailedSIRS}, }"},{"path":[]},{"path":"/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Elias Rosenblatt (erosenbl@uvm.edu), Rubenstein School Environment Natural Resources, 81 Carrigan Drive, Burlington, VT, USA F. Javiera Rudolph, Department Ecosystem Sciences Management, Pennsylvania State University, University Park, PA, USA; U.S. Geological Survey, Eastern Ecological Science Center, Laurel, MD, USA Fernando Arce, Department Environmental Conservation, University Massachusetts, Amherst, MA, USA Jonathan D. Cook, U.S. Geological Survey, Eastern Ecological Science Center, Laurel, MD, USA Graziella V. DiRenzo, U. S. Geological Survey, Massachusetts Cooperative Fish Wildlife Research Unit, University Massachusetts, Amherst, MA, USA; Department Environmental Conservation, University Massachusetts, Amherst, MA, USA Evan H.C. Grant, U.S. Geological Survey, Eastern Ecological Science Center, Turner’s Falls, Massachusetts, USA Michael C. Runge, U.S. Geological Survey, Eastern Ecological Science Center, Laurel, MD, USA Brittany . Mosher, Rubenstein School Environment Natural Resources, 81 Carrigan Drive, Burlington, VT, USA","code":""},{"path":"/index.html","id":"information","dir":"","previous_headings":"","what":"Information","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Repository Type: Program R scripts Year Origin: 2023 Year Version: 2023 Version: 1.0.0 Digital Object Identifier (DOI): https://doi.org/10.5066/P9TZK938 USGS Information Product Data System (IPDS) .: IP-155118","code":""},{"path":"/index.html","id":"suggested-citation-for-software","dir":"","previous_headings":"","what":"Suggested Citation for Software","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Rosenblatt, E, Rudolph, J.F., Arce, F., Cook, J. D., DiRenzo, G.V., Grant, E.H.C., Runge, M.C., Mosher, B... whitetailedSIRS: package project SARS-CoV-2 outbreak dynamics white-tailed deer. Version 1.0.0: U.S. Geological Survey software release, https://doi.org/10.5066/P9TZK938","code":""},{"path":"/index.html","id":"download-package","dir":"","previous_headings":"","what":"Download package","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"can download whitetailedSIRS package directly using following code:","code":"# Install githubinstall and devtools packages if not installed already install.packages(\"githubinstall\") install.packages(\"devtools\")  # Load the packages library(githubinstall) library(devtools)  # Function to download the package devtools::install_github(\"disease-decision-analysis-and-research/whitetailedSIRS\")"},{"path":"/index.html","id":"abstract","dir":"","previous_headings":"","what":"Abstract","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"software release contains several R scripts generate epidemic projections SARS-CoV-2 white tailed deer populations using Susceptible-Infected-Recovered-Susceptible (SIRS) modeling framework. provide workflow vignettes used Rosenblatt et al. Prep Cook et al. Prep. Users able specify transmission parameters human-deer deer-deer transmission quantify changes outbreak dynamics. outputs package ggplot friendly, part, use list-column workflow working multiple simulations. Details model can found vignettes.","code":""},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"thank Daniel Walsh, Susan Shriner, Kim Pepin continued feedback part broader decision analysis detailed Cook et al. Prep Rosenblatt et al. Prep. work supported Coronavirus Aid, Relief, Economic Security Act (P.L. 116-136).","code":""},{"path":[]},{"path":"/index.html","id":"vignette-1-introductionrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 1: Introduction.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: introductory vignette detailing SIRS ODE equations corresponding functions, used Rosenblatt et al. prep Cook et al. Prep. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-2-sir_model_descriptionrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 2: sir_model_description.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: vignette introducing detailing SIRS ODE equations corresponding functions, used Rosenblatt et al. prep Cook et al. Prep. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-3-example_valuesrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 3: example_values.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: vignette stepping suggested work-flow using whitetailedSIRS package. vignettes use work-flow, vignette useful new users understand replicate modify analysis presented. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-4-sirs_analysis_by_contextrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 4: SIRS_analysis_by_context.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: vignette details analysis used study differences outbreak dynamics four scenarios SARS-CoV-2 transmission among white-tailed deer populations. output vignette used visualize differences vignette whitetailedSIRS::Visualize_by_context. analysis corresponds Objectives 1-3 Rosenblatt et al. Prep. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-5-sirs_analysis_by_context_initialspillrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 5: SIRS_analysis_by_context_initialspill.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: vignette follows blueprint whitetailedSIRS::SIRS_analysis_by_context. primary difference initial infected compartment sizes set non-zero values human prevalence set zero. mimics initial spillover event given magnitude, test outbreak dynamics differ continuous spillover detailed whitetailedSIRS::SIRS_analysis_by_context. differences visualized vignette whitetailedSIRS::Visualize_by_context. simulation code suppresed rendered vignette, can viewed .Rmd file. analysis corresponds Objective 4 Rosenblatt et al. Prep. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-6-visualize_by_contextrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 6: Visualize_by_context.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: data/scenario_results.rda; data/scenario_projections.rda Details: vignette demonstrates visualize differences various characteristics outbreaks scenarios. figures used results published Rosenblatt et al. Prep.. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-7-connected_systemsrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 7: Connected_Systems.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: data/scenario_results.rda Details: vignette tests connected systems (wild captive separated fence line) differ outbreak characteristics, compared isolated scenario. scenarios connected, may differences prevalence, cumulative cases, persistence due fence line interactions. analysis corresponds Objective 5 Rosenblatt et al. Prep. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-8-management_alternatives_systemsrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 8: Management_Alternatives_Systems.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: vignette runs outbreak simulations estimate effects various management alternatives dynamics SARS-CoV-2 outbreak wild captive white-tailed deer. considered captive:wild systems separated fence. management alternatives may implemented wild captive populations, one scenario. focus 11 alternatives, ranging across agriculture, public health, wildlife sectors. alternatives detailed Cook et al. Prep.. Outputs: N/","code":""},{"path":[]},{"path":"/index.html","id":"function-1-draw_elicitation_samplesr","dir":"","previous_headings":"Functions","what":"Function 1: draw_elicitation_samples.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: elicitation_data.rda Details: R function samples user-specified number values expert-elicited parameter estimates used Rosenblatt et al. Prep Cook et al. Prep. Outputs: data frame listing expert-elicited parameters, error distribution characteristics (mean, standard deviation, family) user-specified number random samples error distribution.","code":""},{"path":"/index.html","id":"function-2-get_ee_param_valsr","dir":"","previous_headings":"Functions","what":"Function 2: get_EE_param_vals.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: Output object elicitation_data.rda Details: R function prepare random draws elicitation_data.rda inputs SIRS ODE equations. Outputs: vector object containing drawn values expert-elicited parameter, length specified user.","code":""},{"path":"/index.html","id":"function-3-calc_contact_rater","dir":"","previous_headings":"Functions","what":"Function 3: calc_contact_rate.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function uses proximity rate model developed Habib et al. (2011) estimate proximity rates deer wild wild-like captive settings, conditional density habitat availability. function can also used captive settings conditions result identical deer-deer proximity rates. Outputs: vector object containing drawn deer-deer proximity rate values (proximity events per day), length specified user.","code":""},{"path":"/index.html","id":"function-4-calc_sigma_aeror","dir":"","previous_headings":"Functions","what":"Function 4: calc_sigma_aero.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function calculates probability infection aerosol transmission SARS-CoV-2. User can specify number probabilities generated derived parameter, specific parameters influencing probabilities (e.g. duration proximity, dose-response, etc.). Outputs: vector object containing drawn infection probabilities aerosol transmission, length specified user.","code":""},{"path":"/index.html","id":"function-5-calc_sigma_dcr","dir":"","previous_headings":"Functions","what":"Function 5: calc_sigma_dc.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function calculates probability infection fluid transmission SARS-CoV-2. User can specify number probabilities generated derived parameter, specific parameters influencing probabilities (e.g. duration proximity, dose-response, etc.). Outputs: vector object containing drawn infection probabilities fluid transmission, length specified user.","code":""},{"path":"/index.html","id":"function-6-initial_compartmentsr","dir":"","previous_headings":"Functions","what":"Function 6: initial_compartments.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function populates list initial Susceptible (S) - Infected () - Recovered (R) compartment sizes. function argument format output allow calculation size compartment equilibrium (steady = TRUE), format output allow calculation cumulative infections course projected outbreak (steady = FALSE). two process done execution function, rather run separately. length vector object list determined user. formatted output ready fed run.R function, uses Epi_sirs.R Epi_sirs_with_cumulative.R functions project compartment sizes change projection. Outputs: list object containing vector objects containing starting size SIR compartment. steady = FALSE, list includes 2 additional vectors “I_wild_cumulative” “I_captive_cumulative”. list object prepared fed run.R function.","code":""},{"path":"/index.html","id":"function-7-alternativer","dir":"","previous_headings":"Functions","what":"Function 7: alternative.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function helps prepare parameters used solve SIRS ODE equations wild captive deer, fed params argument run.R function. 15 parameters must defined lengths equal number simulations run. function takes parameter inputs calculates derived transmission rate parameters use ODE equations. Outputs: list vector objects containing estimates derived parameters, use run.R function.","code":""},{"path":"/index.html","id":"function-8-runr","dir":"","previous_headings":"Functions","what":"Function 8: run.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function Run ODE Solver SIRS model, using parameter estimates (output alternatives.R), initial compartment sizes projection (output initial_compartments.R argument steady = FALSE) initial compartment sizes formatted steady state calculation (output initial_compartments.R argument steady = TRUE). Outputs: list containing run identifier (run_id), initial compartment sizes projection (inits.fall), initial compartment sizes steady state calculation (inits.steady), parameter values used run (params), compartment sizes time step reach run (ode_proj), compartment sizes steady-state equilibrium (steady_state), scenario label run_id (Context). output used visualization table summaries. results Rosenblatt et al. Prep, output stored package scenario_results.rda.","code":""},{"path":"/index.html","id":"function-9-simple_sirsr","dir":"","previous_headings":"Functions","what":"Function 9: simple_sirs.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: Outputs alternatives.R initial_compartments.R. Details: R function defines ODE SIR equations work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points. function used package calculate persistence, steady state equilibrium (via rootSolve::run_steady()), along compartment sizes change projection. Outputs: N/","code":""},{"path":"/index.html","id":"function-10-simple_sirs_with_cumulativer","dir":"","previous_headings":"Functions","what":"Function 10: simple_sirs_with_cumulative.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: Outputs alternatives.R initial_compartments.R. Details: Similar whitetailedSIRS::simple_sirs, R function defines ODE SIR equations work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points. added feature function ODE equations calculate cumulative infections day 0 day t. Outputs: N/","code":""},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Cook, J.D., E. Rosenblatt, G.V. Direnzo, E.H.C. Grant, B.. Mosher, F. Arce, S. Christensen, R. Ghai, M.C. Runge. Prep. Using decision science evaluate risk management SARS-CoV-2 zoonotic transmission humans white-tailed deer. Habib, T.J., Merrill, E.H., Pybus, M.J. Coltman, D.W., 2011. Modelling landscape effects density–contact rate relationships deer eastern Alberta: implications chronic wasting disease. Ecological Modelling, 222(15), pp.2722-2732. Rosenblatt, E.G., Cook, J.D., DiRenzo, G.V., Grant, E.H.C., Arce, F., Pepin K.M., Rudolph, F.J., Runge, M.C., Shriner, S., Walsh, D.P., Mosher B.. (2023). Epidemiological modeling SARS-CoV-2 white-tailed deer (Odocoileus virginianus) reveals conditions introduction widespread transmission. bioRxiv 2023.08.30.555493; doi: https://doi.org/10.1101/2023.08.30.555493.","code":""},{"path":"/reference/alternative.html","id":null,"dir":"Reference","previous_headings":"","what":"Define parameters for solving white-tailed deer SIRS ODE equations\nunder different management alternatives — alternative","title":"Define parameters for solving white-tailed deer SIRS ODE equations\nunder different management alternatives — alternative","text":"alternative() helps prepare parameters used solve SIRS ODE equations wild captive deer, fed params argument run() function.","code":""},{"path":"/reference/alternative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define parameters for solving white-tailed deer SIRS ODE equations\nunder different management alternatives — alternative","text":"","code":"alternative(   alpha_immunity = NULL,   omega_ww = NULL,   omega_cw = NULL,   omega_cc = NULL,   omega_hw = NULL,   omega_hc = NULL,   sigma_aero_deer_deer_wild = NULL,   sigma_aero_deer_deer_captive = NULL,   sigma_aero_deer_human_wild = NULL,   sigma_aero_deer_human_capt = NULL,   epsilon_dc = NULL,   sigma_dc_deer_deer = NULL,   gamma_recov = NULL,   I_human = NULL,   boost = NULL )"},{"path":"/reference/alternative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define parameters for solving white-tailed deer SIRS ODE equations\nunder different management alternatives — alternative","text":"alpha_immunity Inverse duration temporary immunity entering recovered compartment (per day, 0-1). omega_ww Deer-deer proximity rate wild setting (proximity events per day). omega_cw Captive wild deer proximity rate along fence lines demarking captive wild populations (proximity events per day). omega_cc Deer-deer proximity rate captive setting (proximity events per day). omega_hw Human-deer proximity rate wild setting (proximity events per day). omega_hc Human-deer proximity rate captive setting(proximity events per day). sigma_aero_deer_deer_wild Probability infection via aerosol transmission wild deer. Derived using calc_sigma_aero() function. sigma_aero_deer_deer_captive Probability infection via aerosol transmission captive deer. Derived using calc_sigma_aero() function. sigma_aero_deer_human_wild Probability infection via aerosol transmission humans wild deer. Derived using calc_sigma_aero() function. sigma_aero_deer_human_capt Probability infection via aerosol transmission humans captive deer. Derived using calc_sigma_aero() function. epsilon_dc Probability direct contact deer, given proximity. sigma_dc_deer_deer Probability infection via fluid transmission deer. Derived using calc_sigma_dc() function. gamma_recov Inverse duration recovery infection (per day, 0-1). I_human Prevalence human population (proportion). boost Proportion susceptible deer captivity receiving vaccine boosters, per day.","code":""},{"path":"/reference/alternative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define parameters for solving white-tailed deer SIRS ODE equations\nunder different management alternatives — alternative","text":"Returns list vectors parameter","code":""},{"path":"/reference/alternative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define parameters for solving white-tailed deer SIRS ODE equations\nunder different management alternatives — alternative","text":"alternative() creates list parameter values fed SIRS ODE solver. length item output determined length arguments, must equal. argument(s) filled outputs another function package (e.g. calc_contact_rate, calc_sigma_aero, calc_sigma_dc, draw_elicitation_samples), user must fill argument vector values length arguments. Parameter values defined function remained fixed SIRS ODE solves. parameter values can derived random processes, projections deterministic. Proximity, default calc_sigma_aero() function, defined two individuals entering within 1.5m . proximity limit can modified V_air argument calc_sigma_aero() function, defines half-sphere volume aerosolized virus exhaled infectious individual.","code":""},{"path":[]},{"path":"/reference/alternative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define parameters for solving white-tailed deer SIRS ODE equations\nunder different management alternatives — alternative","text":"","code":"if (FALSE) { alternative(alpha_immunity = c((1/30),(1/60),(1/90),(1/120),(1/150)), omega_ww = rep(10,5), omega_cw = rep(1,5), omega_cc = rep(20,5), omega_hw = rep(0.01,5), omega_hc = rep(0.25,5), sigma_aero_deer_deer_wild = rep(0.01,5), sigma_aero_deer_deer_captive = rep(0.1,5), sigma_aero_deer_human_wild = rep(0.001,5), sigma_aero_deer_human_capt = rep(0.05,5), epsilon_dc = rep(0.2,5), sigma_dc_deer_deer = rep(0.02,5), gamma_recov = rep(1/6,5), I_human = rep(0.05,5), boost = rep(0,5))}"},{"path":"/reference/alternatives_across_systems.html","id":null,"dir":"Reference","previous_headings":"","what":"alternatives_across_systems — alternatives_across_systems","title":"alternatives_across_systems — alternatives_across_systems","text":"dataframe containing results used compare influences potential management alternatives prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations. 1000 iterations (run_id) run captive wild populations white-tailed deer, seperated single fenceline allows proximity direct contact captive wild deer (Complex), alternative implemented (Alternative). Complexes include captive deer outdoor ranch facilities wild deer rural areas (Outdoor ranch rural deer), captive deer outdoor ranch facilities wild deer suburban areas (Outdoor ranch suburban deer), captive deer intensive facilities wild deer rural areas (Intensive facility rural deer), captive deer intensive facilities wild deer suburban areas (Intensive facility suburban deer). Management alternatives (Alternative) include action (baseline), 2) improve separation captive wild deer improving fencing (double-fence captive facilities), 3) reduce eliminate baiting practices legislation, enforcement, education (Eliminate baiting), 4) increase air flow indoor facilities match air exchange rate outdoor settings (Improve indoor facility air quality; applies complexes intensive facilities), 5) Cease research activities bring research management staff close proximity wild deer (Pause Research), 6) Require personal protective equipment humans interactions deer captive wild settings (PPE, ), 7) Require PPE captive settings (PPE, Captive), 8) Require PPE wild settings (PPE, Wild), 9) Reduce wild deer densities 10% reduce deer-deer contact rate spread SARS-CoV-2 (Reduce wild density 10%), 10) Reduce wild deer densities 25% reduce deer-deer contact rate spread SARS-CoV-2 (Reduce wild density 25%), 11) restrict human activities areas posing elevated probability human-deer interactions, suburban neighborhoods, parks, trail heads, etc. (Restrict human interactions), 12) Vaccinate repeatedly boost captive deer (Vaccinate boost captive deer), 13) provide initial vaccination captive deer secondary boosting (Vaccinate captive deer). Wild captive prevalence (meanWild meanCaptive, respectively) reported percent population infected, averaged simulated 120-day projection (run_id), particular alternative applied particular context. Cumulative infections reports total proportion wild captive populations infected course 120-fall projection (cumulativeWild cumulativeCaptive, respectively), can exceed 1, indicating individuals infected least fall season, particular alternative applied particular context. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium wild captive deer (persistWild persistCaptive, respectively), particular alternative applied particular context.","code":""},{"path":"/reference/alternatives_across_systems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alternatives_across_systems — alternatives_across_systems","text":"","code":"alternatives_across_systems"},{"path":"/reference/alternatives_across_systems.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"alternatives_across_systems — alternatives_across_systems","text":"alternatives_across_systems data frame 9 columns 10000 rows storing results outbreak simulations given particular management alternative (Alternative). row corresponds iteration simulation, specific complex, alternative implemented, random draw epidemiological parameters: run_id Identifier run iteration Complex Combination wild captive scenarios interacting along fenceline Alternative Management alternative implemented meanWild Mean daily prevelance wild deer complex meanCaptive Mean daily prevelance captive deer complex cumulativeWild Incidence proportion wild deer complex cumulativeCaptive Incidence proportion captive deer complex persistWild Probability persistence wild deer complex persistCaptive Probability persistence captive deer complex","code":""},{"path":"/reference/alternatives_across_systems.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"alternatives_across_systems — alternatives_across_systems","text":"Derived Management_Alternatives_Systems.Rmd","code":""},{"path":"/reference/alternatives_across_systems.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"alternatives_across_systems — alternatives_across_systems","text":"","code":"if (FALSE) { head(alternatives_across_systems) }"},{"path":"/reference/calc_contact_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Contact rate calculation for wild deer — calc_contact_rate","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"calc_contact_rate() uses proximity rate model developed Habib et al. (2011) estimate proximity rates deer wild settings, conditional density habitat availability. function can also used captive settings conditions result identical deer-deer proximity rates. user can alter proximity rates inclusion attractants landscape.","code":""},{"path":"/reference/calc_contact_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"","code":"calc_contact_rate(   kappa = NULL,   N_w = NULL,   q = NULL,   A_w = NULL,   rho_attractant = NULL,   nsamples = NULL,   seed = NULL,   type_contact = NULL )"},{"path":"/reference/calc_contact_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"kappa value contact scaling constant (influences slope density- contact relationship; reported Habib et al. 2011) N_w total population size deer. Defaults random draw Poisson distribution mean = 1000. q value concavity scaling constant (0-1, 0 equating density dependence 1 equating frequency dependence; reported Habib et al. 2011) A_w area inhabited N, square kilometers. Default set 100 square kilometers match Habib et al.'s (2011) approach. rho_attractant proportional change attractants present simulated conditions (optional). Default set 1 nsamples number values returned. Default 1, return vector > 2 seed specified, sets seed function type_contact option \"low\", \"medium\", \"high\" based parameters Habib et al. 2011 particular values wooded habitat available deer population question. \"low\" contact fixes kappa 16.37 q 0.53, mimicking proximity rates areas 53% wooded habitat. \"med\" contact fixes kappa 11.35 q 0.34, mimicking proximity rates areas 26% wooded habitat. \"high\" contact fixes kappa 15.58 q 0.32, mimicking proximity rates areas 12% wooded habitat. set \"manual\", manual input kappa q needed. values Habib et al. (2011) available contact_rate_params dataset.","code":""},{"path":"/reference/calc_contact_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"returns number numeric vector nsamples > 1","code":""},{"path":"/reference/calc_contact_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"","code":"if (FALSE) { calc_contact_rate(type_contact = \"low\")  calc_contact_rate(rho_attractant = 1, kappa = 16.37, N_w = 1000, q = 0.53, A_w = 100, type_contact = \"manual\")  calc_contact_rate(rho_attractant = c(1,1), kappa = c(16.37, 16.37), N_w = rpois(2, 1000), q = c(0.53, 0.53), A_w = c(100, 100), type_contact = \"manual\")}"},{"path":"/reference/calc_sigma_aero.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"calc_sigma_aero calculate one value probability infection using defaults arguments provided. Defaults described sir_model_description document sourced literature expert elicitation.","code":""},{"path":"/reference/calc_sigma_aero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"","code":"calc_sigma_aero(   AER = NULL,   s = NULL,   lambda = NULL,   C_nu = NULL,   C_i = NULL,   IR = NULL,   ER = NULL,   V_d = NULL,   V_air = NULL,   t_contact = NULL,   r = NULL,   nsamples = NULL,   seed = NULL )"},{"path":"/reference/calc_sigma_aero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"AER air exchange rate \\(hr^{-1}\\). Default set \\(4 hr^{-1}\\) s settling rate; \\(hr^{-1}\\) Default set \\(0.24 hr^{-1}\\) lambda inactivation rates \\(hr^{-1}\\). Default set \\(0.63 hr^{-1}\\) C_nu viral load sputum; RNA copies/ml. Default samples expert elicited distribution parameter 'Viral Load' C_i conversion factor quanta/RNA copy. Default set 0.0014 IR inhalation rate; \\(m^3/hr\\).Default set 0.846 deer ER exhalation rate; \\(m^3/hr\\). Default IR = ER V_d exhaled droplet volume concentration; ml exhaled droplets/ \\(m^3\\). Default 0.009 V_air fixed volume; \\(m^3\\). Default \\(7.07m^3\\), corresponding half-sphere 1.5m radius t_contact time contact contaminated airspace (hr). r species-specific probability infection 1 quantum. Default r_deer expert elicited values. nsamples default 1, specified > 1 draw nsamples default distributions parameters seed setting seed, specify number","code":""},{"path":"/reference/calc_sigma_aero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"numeric vector length equal nsamples values sigma_aero","code":""},{"path":"/reference/calc_sigma_aero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"Mathematical background calculation. infected individual emits viral particles particular rate \\(ER_q\\) quanta/hr product arguments described : $$ER_q = C_{\\nu} \\cdot C_i   \\cdot ER \\cdot V_d$$ used model instantaneous concentration viral particles (C) well-mixed air space (quanta/\\(m^3\\)) around infected individual follows: $$C = \\frac{ER_q}{IVRR \\cdot V_{air}}$$ loss rate (IVRR) given : $$AER + s + \\lambda$$ susceptible individual enters contaminated airspace surrounding infected individual, dose (\\(Q_A\\)) product inhalation rate, concentration viral particles, time contact: $$Q_A = IR   \\cdot C \\cdot t_{contact}$$ dose \\(Q_A\\) converted probability infection using Wells-Riley infection model function dose received species-specific probability infection 1 quantum. $$\\sigma^{AERO} = 1 - e^{-rQ}$$","code":""},{"path":"/reference/calc_sigma_aero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"","code":"if (FALSE) { calc_sigma_aero() # will return a single value using defaults calc_sigma_aero(nsamples = 10)}"},{"path":"/reference/calc_sigma_dc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability of infection given physical contact\n\\(\\sigma^{DC}\\) — calc_sigma_dc","title":"Calculate probability of infection given physical contact\n\\(\\sigma^{DC}\\) — calc_sigma_dc","text":"calc_sigma_dc calculate one value probability infection using defaults arguments provided. Defaults described sir_model_description document sourced literature expert elicitation.","code":""},{"path":"/reference/calc_sigma_dc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability of infection given physical contact\n\\(\\sigma^{DC}\\) — calc_sigma_dc","text":"","code":"calc_sigma_dc(   V_DC = NULL,   C_nu = NULL,   pfu_conv = NULL,   k = NULL,   nsamples = NULL,   seed = NULL )"},{"path":"/reference/calc_sigma_dc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability of infection given physical contact\n\\(\\sigma^{DC}\\) — calc_sigma_dc","text":"V_DC Transferred volume (ml). Default 0.1 C_nu viral load sputum; RNA copies/ml. Default samples expert elicited distribution parameter 'Viral Load'. Concentration infectious particles sputum (gc per ml) pfu_conv conversion value (PFU per GC). Set 1/10^5.2 k set 410 default nsamples number samples wanted. Default set 1 seed sets seed random draws parameter default distributions.","code":""},{"path":"/reference/calc_sigma_dc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability of infection given physical contact\n\\(\\sigma^{DC}\\) — calc_sigma_dc","text":"returns number vector probability values probability infection via direct contact.","code":""},{"path":"/reference/calc_sigma_dc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate probability of infection given physical contact\n\\(\\sigma^{DC}\\) — calc_sigma_dc","text":"Mathematical background calculate infection probability given physical contact. use Wells-Riley dose response model estimates infection probability log-logistic function dose (\\(d^{dc}\\); plaque-forming units, PFU) dose-response function (\\(k\\); Watanabe et al. 2010). dose received product typical volume sputum transferred given contact (\\(V^{DC}\\)) concentration SARS-CoV-2 sputum (\\(C_{\\nu}\\)). initially assume contact \\(100\\mu l\\) sputum transferred individuals making contact. $$\\sigma^{DC} = 1 - e^{-(d^{DC}/k)}$$ $$d^{DC} = V^{DC} \\cdot C_{\\nu} \\cdot pfuConv$$","code":""},{"path":[]},{"path":"/reference/contact_rate_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Contact rate parameters — contact_rate_params","title":"Contact rate parameters — contact_rate_params","text":"Modeling relationship density contact rates wild deer populations. Habib et al. (2011) used radio-collared deer eastern Alberta , part, estimate contact rates deer group deer different groups. results unique calculate per capita contact rate terms deer contacted/individual/time. differs many approaches, just look raw probability two collared individuals place time. Habib et al. (2011) estimated home ranges, contact rates, resource selection functions across variable densities habitat conditions (areas 12%, 26%, 53%, 67% wooded habitat). simulated individual white-tailed deer movements based observed data estimate total number individuals contact, sum contact rates within group different groups. estimated likely parameters per-capita contact rate.","code":""},{"path":"/reference/contact_rate_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contact rate parameters — contact_rate_params","text":"","code":"contact_rate_params"},{"path":"/reference/contact_rate_params.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Contact rate parameters — contact_rate_params","text":"contact_rate_params data frame 4 columns 12 rows, row corresponding combination contact rate parameters Habib et al. 2011: forest_cover Percent wooded habitat f weighting factor within-group contacts compared c frequency contact rate q scaling factor degree density dependence","code":""},{"path":"/reference/contact_rate_params.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Contact rate parameters — contact_rate_params","text":"https://doi.org/10.1016/j.ecolmodel.2011.05.007","code":""},{"path":"/reference/contact_rate_params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contact rate parameters — contact_rate_params","text":"","code":"if (FALSE) { head(contact_rate_params) }"},{"path":"/reference/cross_sector_results.html","id":null,"dir":"Reference","previous_headings":"","what":"cross_sector_results — cross_sector_results","title":"cross_sector_results — cross_sector_results","text":"dataframe containing results used compare cumulative influences top performing alternative action OneHealth sectors (public health, agriculture, wildlife sectors) prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations. 1000 iterations (run_id) run captive wild populations white-tailed deer, separated single fenceline allows proximity direct contact captive wild deer (Complex), alternative identified public health, agriculture, wildlife (Alternative) greatest reduction prevalence, persistence, cumulative infections. Complexes include captive deer outdoor ranch facilities wild deer rural areas (Outdoor ranch rural deer), captive deer outdoor ranch facilities wild deer suburban areas (Outdoor ranch suburban deer), captive deer intensive facilities wild deer rural areas (Intensive facility rural deer), captive deer intensive facilities wild deer suburban areas (Intensive facility suburban deer). Cross-sector collaboration vaccinate boost captive deer (agriculture sector), require personal protective equipment humans interacting deer wild captive settings (public health sector), eliminate baiting practices legislation, enforcement, education (wildlife sector). Wild captive prevalence (meanWild meanCaptive, respectively) reported percent population infected, averaged simulated 120-day projection (run_id), particular alternative applied particular context. Cumulative infections reports total proportion wild captive populations infected course 120-fall projection (cumulativeWild cumulativeCaptive, respectively), can exceed 1, indicating individuals infected least fall season, particular alternative applied particular context. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium wild captive deer (persistWild persistCaptive, respectively), particular alternative applied particular context.","code":""},{"path":"/reference/cross_sector_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cross_sector_results — cross_sector_results","text":"","code":"cross_sector_results"},{"path":"/reference/cross_sector_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"cross_sector_results — cross_sector_results","text":"cross_sector_results data frame 9 columns 800 rows storing results outbreak simulations given combination best management alternatives across OneHealth sectors (Alternative). row corresponds iteration simulation, specific complex, alternative implemented, random draw epidemiological parameters: run_id Identifier run iteration Complex Combination wild captive scenarios interacting along fenceline Alternative Top OneHealth Management alternatives implemented meanWild Mean daily prevelance wild deer complex meanCaptive Mean daily prevelance captive deer complex cumulativeWild Incidence proportion wild deer complex cumulativeCaptive Incidence proportion captive deer complex persistWild Probability persistence wild deer complex persistCaptive Probability persistence captive deer complex","code":""},{"path":"/reference/cross_sector_results.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"cross_sector_results — cross_sector_results","text":"Derived Management_Alternatives_Systems.Rmd, compared single alternative impacts stored alternatives_across_systems.rda","code":""},{"path":"/reference/cross_sector_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"cross_sector_results — cross_sector_results","text":"","code":"if (FALSE) { head(cross_sector_results) }"},{"path":"/reference/draw_elicitation_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Random draw of parameters from expert elicitation — draw_elicitation_samples","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"Random draw parameters expert elicitation","code":""},{"path":"/reference/draw_elicitation_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"","code":"draw_elicitation_samples(   elicitation_data = NULL,   nsamples = NULL,   seed = NULL,   return_df = FALSE )"},{"path":"/reference/draw_elicitation_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"elicitation_data defaults package data expert elicitation. requires dataframe columns parameter name, mu, sd, distribution family. function written around elicitation_data dataset provided package. nsamples number samples draw. none set, defaults 1. seed specified, seed set. left NULL seed set. return_df TRUE object returned data frame. FALSE return list column","code":""},{"path":"/reference/draw_elicitation_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"returns tibble list column samples drawn unless otherwise specified return_df argument.","code":""},{"path":[]},{"path":"/reference/elicitation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"elicitation_data — elicitation_data","title":"elicitation_data — elicitation_data","text":"Group averaged (using quantile averaging) parameter estimates parameters derived using expert elicitation.","code":""},{"path":"/reference/elicitation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"elicitation_data — elicitation_data","text":"","code":"elicitation_data"},{"path":[]},{"path":"/reference/elicitation_data.html","id":"elicitation-data","dir":"Reference","previous_headings":"","what":"elicitation_data","title":"elicitation_data — elicitation_data","text":"data frame 4 columns 15 rows, row corresponding elicited parameter: parameter Parameter elicited mu mean value sd standard deviation family distribution family parameters given","code":""},{"path":"/reference/elicitation_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"elicitation_data — elicitation_data","text":"Contact: Elias Rosenblatt erosenbl@uvm.edu","code":""},{"path":"/reference/elicitation_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"elicitation_data — elicitation_data","text":"Parameters include 1) Days recovered individual can reinfected SARS-CoV-2 (Parameter = Temporary Immunity; units = days), 2) Number individuals infected via wastewater every 100 individuals infected via direct transmission (Parameter = Wastewater Infections; units = individuals), 3) Number individuals infected via formites every 100 individuals infected via direct transmission (Parameter = Fomite Infections; units = individuals), 4) Ratio deer sputum viral load : humansputum viral load (Parameter = Viral Load; units = multiplicative ratio), 5) Dose-response value quantum dosage using Wells-Riley dose response model (Parameter = Dose-Response; units = r value). 6) deer-deer contact duration (minutes), 7) deer-deer direct contact probability, 8) deer-deer proximity rate baiting (per day; 17 events per day without baiting), 9) deer-human proximity rate, rural (per 120 days), 10) deer-human proximity duration, rural (minutes), 11) deer-human proximity rate, suburban (per 120 days), 12) deer-human proximity duration, suburban (minutes), 13) deer-human proximity rate, captive (per 120 days), 14) deer-human proximity duration, captive (minutes), 15) deer-deer proximity rate captivity (per day).","code":""},{"path":"/reference/elicitation_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"elicitation_data — elicitation_data","text":"","code":"if (FALSE) { head(elicitation_data) }"},{"path":"/reference/get_EE_param_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"get_EE_param_vals: Prepare random draws inputs SIRS ODE equations.","code":""},{"path":"/reference/get_EE_param_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"","code":"get_EE_param_vals(data, my_param)"},{"path":"/reference/get_EE_param_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"data Dataset containing random draws parameters estimate expert elicitation. my_param Character string parameters estimated expert elicitation.","code":""},{"path":"/reference/get_EE_param_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"vector random samples error distributions estimated expert elicitation, length determined number iterations run simulation (nsamples argument, draw_elicitation_samples.R).","code":""},{"path":"/reference/get_EE_param_vals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"function requires draw_elicitation_samples() run prior. output draw_elicitation_samples input argument function (my_param).  Options parameters include: \"Temporary Immunity\", \"Wastewater Infections\",\"Fomite Infections\",\"Viral Load\",\"Dose-Response\", \"Deer Proximity Duration (minutes)\", \"Direct Contact Probability\", \"Proximity rate baiting (17 events without baiting)\", \"Deer-Human Proximity Rate, Rural (per 120 days)\", \"Deer-Human Proximity Duration, Rural (minutes)\", \"Deer-Human Proximity Rate, Suburban (per 120 days)\", \"Deer-Human Proximity Duration, Suburban (minutes)\" , \"Deer-Human Proximity Rate, Captive (per 120 days)\", \"Deer-Human Proximity Duration, Captive (minutes)\", \"Deer-Deer Proximity Rate, Captive (per day)\". one parameter may retrieved get_EE_param_vals() call.","code":""},{"path":[]},{"path":"/reference/get_EE_param_vals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"","code":"if (FALSE) { sample <- draw_elicitation_samples(nsamples = 50) get_EE_param_vals(data = sample, my_param = \"Temporary Immunity\") }"},{"path":"/reference/initial_compartments.html","id":null,"dir":"Reference","previous_headings":"","what":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"Define starting compartment sizes SIRS ODE Solver","code":""},{"path":"/reference/initial_compartments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"","code":"initial_compartments(   S_wild_prop = 1,   I_wild_prop = 0,   R_wild_prop = 0,   S_captive_prop = 1,   I_captive_prop = 0,   R_captive_prop = 0,   draws = NULL,   steady = FALSE )"},{"path":"/reference/initial_compartments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"S_wild_prop Size susceptible compartment wild population (proportion) I_wild_prop Size infectious compartment wild population (proportion) R_wild_prop Size recovered compartment wild population (proportion) S_captive_prop Size susceptible compartment captive population (proportion) I_captive_prop Size infectious compartment captive population (proportion) R_captive_prop Size recovered compartment captive population (proportion) draws Number iterations simulation steady Logical argument state whether initial compartments used calculate compartment sizes steady state equilibrium (steady = TRUE), projection specified time period (steady = FALSE; default).","code":""},{"path":"/reference/initial_compartments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"List six vectors (steady == TRUE) eight vectors (steady == FALSE), repeating starting conditions specified user. Length vectors determined draws argument. steady == FALSE, output contain starting values tracking cumulative infections (I_wild_cumulative I_captive_cumulative), set zero.","code":""},{"path":"/reference/initial_compartments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"Provides vector compartment sizes wild captive populations. function pairs wild captive deer populations transmission populations can occur. Values (except draws parameter) must proportions, must sum one population.","code":""},{"path":[]},{"path":"/reference/initial_infection_results_1_in_1000.html","id":null,"dir":"Reference","previous_headings":"","what":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","title":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","text":"dataframe containing results used compare degrees introduction, spread, prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations initial infection 1 1000 deer day 0. results include continuous human introduction 120-day fall simulation, thus represent risk single introductions spawn persisting infections white-tailed deer. 1000 iterations (run_id) run scenario (Context). Scenarios included captive deer outdoor ranch facilities, captive deer intensive facilities, wild deer rural areas, wild deer suburban areas. Setting indicates whether deer captive wild. r0, basic reproductive number, indicates number secondary infections caused single infectious deer course infection. Prevalence percent population infected, averaged simulated 120-day projection. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium. Cumulative infections reports total proportion population infected course 120-fall projection, can exceed 1, indicating individuals infected least fall season.","code":""},{"path":"/reference/initial_infection_results_1_in_1000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","text":"","code":"initial_infection_results_1_in_1000"},{"path":"/reference/initial_infection_results_1_in_1000.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","text":"initial_infection_results_1_in_1000 data frame 7 columns 4000 rows storing results outbreak simulations given initial infection 0.1% deer. row corresponds iteration simulation, specific Context random draw epidemiological parameters: run_id Identifier run iteration Context Scenario focus iteration Setting Iteration taking place wild captive deer r0 Basic reproductive number iteration Prevalence Average daily proportion deer population infected Persist Logical value outbreak persisting population equilibrium Cumulative_infections Total proportion deer infected course 120-day fall simulation","code":""},{"path":"/reference/initial_infection_results_1_in_1000.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","text":"Derived SIRS_analysis_by_contexts_initialspill.Rmd, compared continual introduction results SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/initial_infection_results_1_in_1000.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","text":"","code":"if (FALSE) { head(initial_infection_results_1_in_1000) }"},{"path":"/reference/initial_infection_results_1_in_1bil.html","id":null,"dir":"Reference","previous_headings":"","what":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","title":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","text":"dataframe containing results used compare degrees introduction, spread, prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations initial infection 1 1 billion deer day 0. results include continuous human introduction 120-day fall simulation, thus represent risk single introductions spawn persisting infections white-tailed deer. 1000 iterations (run_id) run scenario (Context). Scenarios included captive deer outdoor ranch facilities, captive deer intensive facilities, wild deer rural areas, wild deer suburban areas. Setting indicates whether deer captive wild. r0, basic reproductive number, indicates number secondary infections caused single infectious deer course infection. Prevalence percent population infected, averaged simulated 120-day projection. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium. Cumulative infections reports total proportion population infected course 120-fall projection, can exceed 1, indicating individuals infected least fall season.","code":""},{"path":"/reference/initial_infection_results_1_in_1bil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","text":"","code":"initial_infection_results_1_in_1bil"},{"path":"/reference/initial_infection_results_1_in_1bil.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","text":"initial_infection_results_1_in_1bil data frame 7 columns 4000 rows storing results outbreak simulations given initial infection 0.0000001% deer. row corresponds iteration simulation, specific Context random draw epidemiological parameters: run_id Identifier run iteration Context Scenario focus iteration Setting Iteration taking place wild captive deer r0 Basic reproductive number iteration Prevalence Average daily proportion deer population infected Persist Logical value outbreak persisting population equilibrium Cumulative_infections Total proportion deer infected course 120-day fall simulation","code":""},{"path":"/reference/initial_infection_results_1_in_1bil.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","text":"Derived SIRS_analysis_by_contexts_initialspill.Rmd, compared continual introduction results SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/initial_infection_results_1_in_1bil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","text":"","code":"if (FALSE) { head(initial_infection_results_1_in_1bil) }"},{"path":"/reference/initial_infection_results_1_in_1mil.html","id":null,"dir":"Reference","previous_headings":"","what":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","title":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","text":"dataframe containing results used compare degrees introduction, spread, prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations initial infection 1 1 million deer day 0. results include continuous human introduction 120-day fall simulation, thus represent risk single introductions spawn persisting infections white-tailed deer. 1000 iterations (run_id) run scenario (Context). Scenarios included captive deer outdoor ranch facilities, captive deer intensive facilities, wild deer rural areas, wild deer suburban areas. Setting indicates whether deer captive wild. r0, basic reproductive number, indicates number secondary infections caused single infectious deer course infection. Prevalence percent population infected, averaged simulated 120-day projection. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium. Cumulative infections reports total proportion population infected course 120-fall projection, can exceed 1, indicating individuals infected least fall season.","code":""},{"path":"/reference/initial_infection_results_1_in_1mil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","text":"","code":"initial_infection_results_1_in_1mil"},{"path":"/reference/initial_infection_results_1_in_1mil.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","text":"initial_infection_results_1_in_1mil data frame 7 columns 4000 rows storing results outbreak simulations given initial infection 0.0001% deer. row corresponds iteration simulation, specific Context random draw epidemiological parameters: run_id Identifier run iteration Context Scenario focus iteration Setting Iteration taking place wild captive deer r0 Basic reproductive number iteration Prevalence Average daily proportion deer population infected Persist Logical value outbreak persisting population equilibrium Cumulative_infections Total proportion deer infected course 120-day fall simulation","code":""},{"path":"/reference/initial_infection_results_1_in_1mil.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","text":"Derived SIRS_analysis_by_contexts_initialspill.Rmd, compared continual introduction results SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/initial_infection_results_1_in_1mil.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","text":"","code":"if (FALSE) { head(initial_infection_results_1_in_1mil) }"},{"path":"/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ODE Solver for SIRS model — run","title":"Run ODE Solver for SIRS model — run","text":"Run ODE Solver SIRS model","code":""},{"path":"/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ODE Solver for SIRS model — run","text":"","code":"run(   iter = NULL,   initial_compartments = NULL,   initial_compartments_steady = NULL,   params = NULL,   times = NULL,   name = NULL )"},{"path":"/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run ODE Solver for SIRS model — run","text":"iter Number iterations, often referred 'nsamples' package examples initial_compartments Initial compartment sizes, including (proportions, stored list) initial_compartments_steady Initial compartment sizes steady state calculation (proportions, stored list) params SIRS parameters, stored list times Length projection (days) name Name context simulated","code":""},{"path":"/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ODE Solver for SIRS model — run","text":"List containing iteration details, including initial compartment sizes ODE solver steady state calculation, parameters, context name, daily, proportional sizes SIRS compartment cumulative infections 120 day projection, whether SARS-CoV-2 persists equilibrium.","code":""},{"path":"/reference/run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run ODE Solver for SIRS model — run","text":"","code":"if (FALSE) { nsamples = 10  example_inits <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, I_wild_cumulative = 0,                    S_captive = 1, I_captive = 0,                    R_captive = 0, I_captive_cumulative = 0)  example_inits_steady <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, S_captive = 1,                    I_captive = 0, R_captive = 0)  # set the time to run example_times <-  seq(0, 365, by = 1) # Set parameters of transmission, immunity, recovery  example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     gamma_recov = 0.01,                     I_human = 0.05,                     boost = 0)  run(iter = nsamples, initial_compartments = example_inits, initial_compartments_steady = example_inits_steady, params = example_params, times = example_times, name = Test)}"},{"path":"/reference/scenario_projections.html","id":null,"dir":"Reference","previous_headings":"","what":"scenario_projections — scenario_projections","title":"scenario_projections — scenario_projections","text":"tibble containing projected SIR compartment sizes every simulation run. Columns tibble include scenario (Context), scenario run (run_id), list containing daily (time) compartment sizes wild captive SIR compartments (S_wild, I_wild, R_wild, & S_captive, I_captive, R_captive) cumulative infections (I_wild_cumulative I_captive_cumulative).","code":""},{"path":"/reference/scenario_projections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scenario_projections — scenario_projections","text":"","code":"scenario_projections"},{"path":"/reference/scenario_projections.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"scenario_projections — scenario_projections","text":"scenario_projections tibble 3 columns 4000 rows storing daily SIRS compartment sizes season's projection multiple iterations particular simulated context: Context Scenario focus iteration run_id Identifier run iteration ode_proj list storing daily SIR compartment sizes","code":""},{"path":"/reference/scenario_projections.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"scenario_projections — scenario_projections","text":"Derived using SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/scenario_projections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"scenario_projections — scenario_projections","text":"","code":"if (FALSE) { head(scenario_projections) }"},{"path":"/reference/scenario_results.html","id":null,"dir":"Reference","previous_headings":"","what":"scenario_results — scenario_results","title":"scenario_results — scenario_results","text":"dataframe containing results used compare degrees introduction, spread, prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations. 1000 iterations (run_id) run scenario (Context). Scenarios included captive deer outdoor ranch facilities, captive deer intensive facilities, wild deer rural areas, wild deer suburban areas. Setting indicates whether deer captive wild. r0, basic reproductive number, indicates number secondary infections caused single infectious deer course infection. FOI, Force--Infection, hazard rate deer becoming infected infectious humans, per day. Prevalence percent population infected, averaged simulated 120-day projection. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium. Cumulative infections reports total proportion population infected course 120-fall projection, can exceed 1, indicating individuals infected least fall season.","code":""},{"path":"/reference/scenario_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scenario_results — scenario_results","text":"","code":"scenario_results"},{"path":"/reference/scenario_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"scenario_results — scenario_results","text":"scenario_results data frame 8 columns 4000 rows storing results outbreak simulations. row corresponds iteration simulation, specific Context random draw epidemiological parameters: run_id Identifier run iteration Context Scenario focus iteration Setting Iteration taking place wild captive deer r0 Basic reproductive number iteration FOI Force--Infection human spillover Prevalence Average daily proportion deer population infected Persist Logical value outbreak persisting population equilibrium Cumulative_infections Total proportion deer infected course 120-day fall simulation","code":""},{"path":"/reference/scenario_results.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"scenario_results — scenario_results","text":"Derived using SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/scenario_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"scenario_results — scenario_results","text":"","code":"if (FALSE) { head(scenario_results) }"},{"path":"/reference/simple_sirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple function to generate SIRS model projections — simple_sirs","title":"Simple function to generate SIRS model projections — simple_sirs","text":"simple_sirs written work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points.","code":""},{"path":"/reference/simple_sirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple function to generate SIRS model projections — simple_sirs","text":"","code":"simple_sirs(time, state, parameters)"},{"path":"/reference/simple_sirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple function to generate SIRS model projections — simple_sirs","text":"time vector values generate projection (length days). state initial state compartment populations. named vector starting values S_wild, I_wild, R_wild, S_captive, I_captive, R_captive. parameters list parameters generate projection. parameters include transmission parameters, immunity recovery rates, proportion infected humans.","code":""},{"path":"/reference/simple_sirs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple function to generate SIRS model projections — simple_sirs","text":"used deSolve::ode() function, return dataframe proportion individuals SIR compartments time point.","code":""},{"path":"/reference/simple_sirs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple function to generate SIRS model projections — simple_sirs","text":"Use simple_sirs calculate persistence (via rootSolve::run_steady()), along compartment sizes change projection. cumulative infections desired, use simple_sir_with_cumulative instead. parameter boost included ODE equations captive deer allow implementation applying vaccine boosters captive deer herds potential management alternative influence outbreak dynamics. See vignette Management_Alternative_Systems.Rmd see example use. cases boosters applied, boost set 0.","code":""},{"path":"/reference/simple_sirs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple function to generate SIRS model projections — simple_sirs","text":"","code":"if (FALSE) { # prepare the input parameters: example_inits <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, S_captive = 1,                    I_captive = 0, R_captive = 0)  # set the time to run example_times <-  seq(0, 500, by = 1) # Set parameters of transmission, immunity, recovery  example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     gamma_recov = 0.01,                     I_human = 0.05,                     boost = 0)  # run the ode function:  deSolve::ode(y = example_inits, times = example_times, parms = example_params, func = whitetailedSIRS::simple_sirs) }"},{"path":"/reference/simple_sirs_with_cumulative.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"simple_sirs_with_cumulative written work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points.","code":""},{"path":"/reference/simple_sirs_with_cumulative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"","code":"simple_sirs_with_cumulative(time, state, parameters)"},{"path":"/reference/simple_sirs_with_cumulative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"time vector values generate projection (length days). state initial state compartment populations. named vector starting values S_wild, I_wild, R_wild, I_wild_cumulative, S_captive, I_captive, R_captive, I_captive_cumulative. parameters list parameters generate projection. parameters include transmission parameters, immunity recovery rates, proportion infected humans.","code":""},{"path":"/reference/simple_sirs_with_cumulative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"used deSolve::ode() function, return dataframe proportion individuals SIR compartments time point, well cumulative case count (proportion)","code":""},{"path":"/reference/simple_sirs_with_cumulative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"simple_sirs_with_cumulative() run run_steady() estimate probability persistence. Instead, use simple_sirs(), return cumulative proportion population infected. parameter boost included ODE equations captive deer allow implementation applying vaccine boosters captive deer herds potential management alternative influence outbreak dynamics. See vignette Management_Alternative_Systems.Rmd see example use. cases boosters applied, boost set 0.","code":""},{"path":"/reference/simple_sirs_with_cumulative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"","code":"# prepare the input parameters: example_inits <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, I_wild_cumulative = 0,S_captive = 1,                    I_captive = 0, R_captive = 0, I_captive_cumulative = 0)  # set the time to run example_times <-  seq(0, 500, by = 1) # Set parameters of transmission, immunity, recovery  example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     gamma_recov = 0.01,                     I_human = 0.05,                     boost = 0)  # run the ode function:  deSolve::ode(y = example_inits, times = example_times, parms = example_params, func = whitetailedSIRS::simple_sirs_with_cumulative) #>     time    S_wild       I_wild       R_wild I_wild_cumulative S_captive #> 1      0 1.0000000 0.0000000000 0.000000e+00       0.000000000 1.0000000 #> 2      1 0.9993938 0.0006032662 2.933373e-06       0.000606240 0.9898959 #> 3      2 0.9985724 0.0014149177 1.265074e-05       0.001427826 0.9795857 #> 4      3 0.9975295 0.0024391790 3.129759e-05       0.002471399 0.9690743 #> 5      4 0.9962610 0.0036787369 6.030486e-05       0.003741305 0.9583656 #> 6      5 0.9947607 0.0051374689 1.018029e-04       0.005243935 0.9474652 #> 7      6 0.9930241 0.0068183183 1.575419e-04       0.006984378 0.9363785 #> 8      7 0.9910466 0.0087240926 2.293044e-04       0.008967677 0.9251112 #> 9      8 0.9888238 0.0108573121 3.188457e-04       0.011198612 0.9136695 #> 10     9 0.9863519 0.0132201759 4.278909e-04       0.013681671 0.9020600 #> 11    10 0.9836273 0.0158145719 5.581356e-04       0.016421047 0.8902896 #> 12    11 0.9806467 0.0186420392 7.112424e-04       0.019420603 0.8783656 #> 13    12 0.9774074 0.0217037439 8.888377e-04       0.022683841 0.8662957 #> 14    13 0.9739070 0.0250004607 1.092510e-03       0.026213882 0.8540882 #> 15    14 0.9701436 0.0285325502 1.323805e-03       0.030013441 0.8417514 #> 16    15 0.9661158 0.0322999419 1.584225e-03       0.034084799 0.8292944 #> 17    16 0.9618227 0.0363021163 1.875227e-03       0.038429788 0.8167263 #> 18    17 0.9572637 0.0405380882 2.198214e-03       0.043049767 0.8040567 #> 19    18 0.9524391 0.0450063925 2.554537e-03       0.047945601 0.7912957 #> 20    19 0.9473494 0.0497050716 2.945491e-03       0.053117646 0.7784536 #> 21    20 0.9419960 0.0546316656 3.372310e-03       0.058565735 0.7655408 #> 22    21 0.9363806 0.0597832040 3.836165e-03       0.064289162 0.7525683 #> 23    22 0.9305056 0.0651562008 4.338161e-03       0.070286673 0.7395472 #> 24    23 0.9243740 0.0707466510 4.879333e-03       0.076556458 0.7264889 #> 25    24 0.9179893 0.0765500313 5.460642e-03       0.083096146 0.7134049 #> 26    25 0.9113557 0.0825613027 6.082977e-03       0.089902803 0.7003068 #> 27    26 0.9044779 0.0887749162 6.747146e-03       0.096972931 0.6872066 #> 28    27 0.8973613 0.0951848217 7.453876e-03       0.104302475 0.6741161 #> 29    28 0.8900117 0.1017844797 8.203810e-03       0.111886824 0.6610473 #> 30    29 0.8824356 0.1085668761 8.997508e-03       0.119720828 0.6480122 #> 31    30 0.8746400 0.1155245398 9.835439e-03       0.127798806 0.6350227 #> 32    31 0.8666325 0.1226495632 1.071798e-02       0.136114564 0.6220907 #> 33    32 0.8584209 0.1299336255 1.164543e-02       0.144661413 0.6092279 #> 34    33 0.8500140 0.1373680188 1.261798e-02       0.153432193 0.5964460 #> 35    34 0.8414206 0.1449436760 1.363573e-02       0.162419295 0.5837563 #> 36    35 0.8326501 0.1526512018 1.469870e-02       0.171614689 0.5711701 #> 37    36 0.8237123 0.1604809049 1.580679e-02       0.181009955 0.5586983 #> 38    37 0.8146173 0.1684228328 1.695983e-02       0.190596312 0.5463514 #> 39    38 0.8053756 0.1764668076 1.815755e-02       0.200364655 0.5341398 #> 40    39 0.7959980 0.1846024630 1.939958e-02       0.210305584 0.5220732 #> 41    40 0.7864953 0.1928192827 2.068546e-02       0.220409449 0.5101613 #> 42    41 0.7768787 0.2011066388 2.201464e-02       0.230666381 0.4984129 #> 43    42 0.7671597 0.2094538316 2.338648e-02       0.241066331 0.4868367 #> 44    43 0.7573496 0.2178501284 2.480027e-02       0.251599111 0.4754407 #> 45    44 0.7474600 0.2262848024 2.625519e-02       0.262254432 0.4642326 #> 46    45 0.7375025 0.2347471717 2.775035e-02       0.273021942 0.4532194 #> 47    46 0.7274886 0.2432266364 2.928477e-02       0.283891266 0.4424077 #> 48    47 0.7174299 0.2517127157 3.085743e-02       0.294852041 0.4318033 #> 49    48 0.7073377 0.2601950825 3.246720e-02       0.305893954 0.4214117 #> 50    49 0.6972235 0.2686635980 3.411290e-02       0.317006779 0.4112377 #> 51    50 0.6870984 0.2771083431 3.579327e-02       0.328180408 0.4012858 #> 52    51 0.6769733 0.2855196483 3.750702e-02       0.339404885 0.3915595 #> 53    52 0.6668591 0.2938881221 3.925278e-02       0.350670437 0.3820621 #> 54    53 0.6567662 0.3022046764 4.102914e-02       0.361967502 0.3727962 #> 55    54 0.6467048 0.3104605501 4.283463e-02       0.373286756 0.3637639 #> 56    55 0.6366849 0.3186473295 4.466776e-02       0.384619136 0.3549668 #> 57    56 0.6267160 0.3267569675 4.652699e-02       0.395955863 0.3464059 #> 58    57 0.6168074 0.3347817989 4.841076e-02       0.407288462 0.3380819 #> 59    58 0.6069680 0.3427145546 5.031745e-02       0.418608779 0.3299946 #> 60    59 0.5972062 0.3505483718 5.224546e-02       0.429908996 0.3221439 #> 61    60 0.5875301 0.3582768031 5.419314e-02       0.441181643 0.3145289 #> 62    61 0.5779473 0.3658938226 5.615885e-02       0.452419611 0.3071483 #> 63    62 0.5684652 0.3733938298 5.814093e-02       0.463616157 0.3000005 #> 64    63 0.5590906 0.3807716510 6.013772e-02       0.474764909 0.2930836 #> 65    64 0.5498299 0.3880225394 6.214755e-02       0.485859876 0.2863952 #> 66    65 0.5406891 0.3951421720 6.416877e-02       0.496895443 0.2799325 #> 67    66 0.5316736 0.4021266463 6.619972e-02       0.507866376 0.2736927 #> 68    67 0.5227888 0.4089724735 6.823877e-02       0.518767815 0.2676726 #> 69    68 0.5140391 0.4156765714 7.028430e-02       0.529595278 0.2618685 #> 70    69 0.5054290 0.4222362555 7.233471e-02       0.540344647 0.2562769 #> 71    70 0.4969623 0.4286492284 7.438842e-02       0.551012171 0.2508937 #> 72    71 0.4886425 0.4349135691 7.644388e-02       0.561594450 0.2457150 #> 73    72 0.4804727 0.4410277198 7.849956e-02       0.572088433 0.2407363 #> 74    73 0.4724556 0.4469904733 8.055397e-02       0.582491404 0.2359534 #> 75    74 0.4645934 0.4528009589 8.260565e-02       0.592800974 0.2313617 #> 76    75 0.4568882 0.4584586278 8.465318e-02       0.603015068 0.2269566 #> 77    76 0.4493416 0.4639632382 8.669518e-02       0.613131916 0.2227334 #> 78    77 0.4419549 0.4693148399 8.873029e-02       0.623150035 0.2186873 #> 79    78 0.4347290 0.4745137588 9.075723e-02       0.633068224 0.2148136 #> 80    79 0.4276647 0.4795605810 9.277472e-02       0.642885544 0.2111073 #> 81    80 0.4207623 0.4844561375 9.478156e-02       0.652601310 0.2075638 #> 82    81 0.4140219 0.4892014881 9.677657e-02       0.662215074 0.2041780 #> 83    82 0.4074435 0.4937979062 9.875863e-02       0.671726612 0.2009452 #> 84    83 0.4010265 0.4982468630 1.007267e-01       0.681135915 0.1978606 #> 85    84 0.3947704 0.5025500131 1.026796e-01       0.690443170 0.1949193 #> 86    85 0.3886743 0.5067091792 1.046166e-01       0.699648751 0.1921167 #> 87    86 0.3827371 0.5107263378 1.065365e-01       0.708753205 0.1894480 #> 88    87 0.3769578 0.5146036056 1.084386e-01       0.717757238 0.1869087 #> 89    88 0.3713348 0.5183432256 1.103220e-01       0.726661706 0.1844941 #> 90    89 0.3658665 0.5219475547 1.121859e-01       0.735467601 0.1821998 #> 91    90 0.3605514 0.5254190502 1.140296e-01       0.744176039 0.1800214 #> 92    91 0.3553875 0.5287602588 1.158523e-01       0.752788252 0.1779545 #> 93    92 0.3503728 0.5319738048 1.176534e-01       0.761305573 0.1759949 #> 94    93 0.3455053 0.5350623791 1.194324e-01       0.769729432 0.1741386 #> 95    94 0.3407827 0.5380287288 1.211885e-01       0.778061338 0.1723814 #> 96    95 0.3362029 0.5408756479 1.229215e-01       0.786302877 0.1707193 #> 97    96 0.3317634 0.5436059675 1.246306e-01       0.794455700 0.1691486 #> 98    97 0.3274619 0.5462225475 1.263156e-01       0.802521517 0.1676656 #> 99    98 0.3232957 0.5487282683 1.279760e-01       0.810502083 0.1662664 #> 100   99 0.3192625 0.5511260232 1.296115e-01       0.818399198 0.1649477 #> 101  100 0.3153595 0.5534187112 1.312217e-01       0.826214696 0.1637060 #> 102  101 0.3115843 0.5556092306 1.328065e-01       0.833950439 0.1625380 #> 103  102 0.3079341 0.5577004727 1.343655e-01       0.841608311 0.1614404 #> 104  103 0.3044062 0.5596953162 1.358985e-01       0.849190213 0.1604100 #> 105  104 0.3009980 0.5615966221 1.374054e-01       0.856698055 0.1594440 #> 106  105 0.2977067 0.5634072287 1.388861e-01       0.864133755 0.1585393 #> 107  106 0.2945297 0.5651299474 1.403404e-01       0.871499232 0.1576932 #> 108  107 0.2914642 0.5667675589 1.417682e-01       0.878796401 0.1569028 #> 109  108 0.2885076 0.5683228093 1.431696e-01       0.886027170 0.1561656 #> 110  109 0.2856571 0.5697984070 1.445445e-01       0.893193440 0.1554791 #> 111  110 0.2829101 0.5711970200 1.458929e-01       0.900297093 0.1548408 #> 112  111 0.2802638 0.5725212730 1.472149e-01       0.907339998 0.1542483 #> 113  112 0.2777158 0.5737737453 1.485105e-01       0.914324004 0.1536995 #> 114  113 0.2752633 0.5749569692 1.497798e-01       0.921250938 0.1531920 #> 115  114 0.2729037 0.5760734274 1.510229e-01       0.928122603 0.1527239 #> 116  115 0.2706345 0.5771255527 1.522399e-01       0.934940776 0.1522931 #> 117  116 0.2684532 0.5781157256 1.534310e-01       0.941707206 0.1518976 #> 118  117 0.2663573 0.5790462742 1.545964e-01       0.948423613 0.1515357 #> 119  118 0.2643443 0.5799194729 1.557362e-01       0.955091688 0.1512056 #> 120  119 0.2624118 0.5807375421 1.568507e-01       0.961713087 0.1509056 #> 121  120 0.2605573 0.5815026474 1.579400e-01       0.968289436 0.1506340 #> 122  121 0.2587787 0.5822168997 1.590044e-01       0.974822328 0.1503892 #> 123  122 0.2570735 0.5828823547 1.600442e-01       0.981313319 0.1501699 #> 124  123 0.2554395 0.5835010134 1.610595e-01       0.987763933 0.1499745 #> 125  124 0.2538745 0.5840748215 1.620507e-01       0.994175656 0.1498017 #> 126  125 0.2523763 0.5846056704 1.630181e-01       1.000549943 0.1496502 #> 127  126 0.2509428 0.5850953970 1.639618e-01       1.006888208 0.1495187 #> 128  127 0.2495719 0.5855457846 1.648824e-01       1.013191834 0.1494061 #> 129  128 0.2482615 0.5859585629 1.657799e-01       1.019462165 0.1493112 #> 130  129 0.2470097 0.5863354089 1.666548e-01       1.025700510 0.1492329 #> 131  130 0.2458146 0.5866779478 1.675075e-01       1.031908143 0.1491703 #> 132  131 0.2446742 0.5869877531 1.683381e-01       1.038086304 0.1491222 #> 133  132 0.2435866 0.5872663480 1.691470e-01       1.044236194 0.1490878 #> 134  133 0.2425501 0.5875152057 1.699347e-01       1.050358984 0.1490662 #> 135  134 0.2415629 0.5877357509 1.707014e-01       1.056455807 0.1490565 #> 136  135 0.2406232 0.5879293601 1.714474e-01       1.062527764 0.1490579 #> 137  136 0.2397294 0.5880973627 1.721732e-01       1.068575921 0.1490696 #> 138  137 0.2388798 0.5882410422 1.728791e-01       1.074601312 0.1490910 #> 139  138 0.2380729 0.5883616369 1.735654e-01       1.080604939 0.1491213 #> 140  139 0.2373071 0.5884603411 1.742325e-01       1.086587771 0.1491598 #> 141  140 0.2365809 0.5885383060 1.748808e-01       1.092550746 0.1492060 #> 142  141 0.2358928 0.5885966406 1.755106e-01       1.098494771 0.1492593 #> 143  142 0.2352414 0.5886364129 1.761222e-01       1.104420724 0.1493189 #> 144  143 0.2346253 0.5886586509 1.767161e-01       1.110329451 0.1493846 #> 145  144 0.2340431 0.5886643437 1.772925e-01       1.116221772 0.1494557 #> 146  145 0.2334936 0.5886544423 1.778519e-01       1.122098477 0.1495317 #> 147  146 0.2329755 0.5886298608 1.783946e-01       1.127960329 0.1496123 #> 148  147 0.2324875 0.5885914772 1.789210e-01       1.133808064 0.1496969 #> 149  148 0.2320285 0.5885401350 1.794313e-01       1.139642390 0.1497852 #> 150  149 0.2315973 0.5884766433 1.799260e-01       1.145463992 0.1498768 #> 151  150 0.2311928 0.5884017785 1.804054e-01       1.151273528 0.1499713 #> 152  151 0.2308139 0.5883162849 1.808698e-01       1.157071634 0.1500685 #> 153  152 0.2304595 0.5882208761 1.813197e-01       1.162858918 0.1501679 #> 154  153 0.2301286 0.5881162352 1.817552e-01       1.168635971 0.1502693 #> 155  154 0.2298202 0.5880030165 1.821768e-01       1.174403355 0.1503724 #> 156  155 0.2295334 0.5878818460 1.825848e-01       1.180161615 0.1504769 #> 157  156 0.2292672 0.5877533223 1.829794e-01       1.185911273 0.1505826 #> 158  157 0.2290208 0.5876180176 1.833612e-01       1.191652831 0.1506892 #> 159  158 0.2287933 0.5874764788 1.837302e-01       1.197386769 0.1507966 #> 160  159 0.2285838 0.5873292277 1.840870e-01       1.203113551 0.1509045 #> 161  160 0.2283915 0.5871767625 1.844317e-01       1.208833620 0.1510128 #> 162  161 0.2282157 0.5870195581 1.847647e-01       1.214547401 0.1511212 #> 163  162 0.2280556 0.5868580673 1.850863e-01       1.220255302 0.1512296 #> 164  163 0.2279105 0.5866927213 1.853968e-01       1.225957713 0.1513378 #> 165  164 0.2277796 0.5865239306 1.856965e-01       1.231655008 0.1514458 #> 166  165 0.2276623 0.5863520857 1.859856e-01       1.237347546 0.1515533 #> 167  166 0.2275580 0.5861775577 1.862645e-01       1.243035668 0.1516602 #> 168  167 0.2274659 0.5860006992 1.865334e-01       1.248719703 0.1517664 #> 169  168 0.2273856 0.5858218448 1.867926e-01       1.254399962 0.1518719 #> 170  169 0.2273164 0.5856413120 1.870423e-01       1.260076747 0.1519765 #> 171  170 0.2272577 0.5854594016 1.872829e-01       1.265750341 0.1520801 #> 172  171 0.2272090 0.5852763982 1.875146e-01       1.271421017 0.1521827 #> 173  172 0.2271698 0.5850925715 1.877377e-01       1.277089036 0.1522841 #> 174  173 0.2271395 0.5849081760 1.879523e-01       1.282754645 0.1523844 #> 175  174 0.2271178 0.5847234522 1.881588e-01       1.288418079 0.1524834 #> 176  175 0.2271040 0.5845386268 1.883573e-01       1.294079564 0.1525811 #> 177  176 0.2270979 0.5843539135 1.885482e-01       1.299739313 0.1526774 #> 178  177 0.2270989 0.5841695135 1.887316e-01       1.305397530 0.1527723 #> 179  178 0.2271066 0.5839856157 1.889078e-01       1.311054407 0.1528658 #> 180  179 0.2271207 0.5838023975 1.890769e-01       1.316710129 0.1529578 #> 181  180 0.2271407 0.5836200253 1.892393e-01       1.322364868 0.1530483 #> 182  181 0.2271663 0.5834386547 1.893950e-01       1.328018790 0.1531373 #> 183  182 0.2271972 0.5832584311 1.895444e-01       1.333672051 0.1532247 #> 184  183 0.2272329 0.5830794903 1.896876e-01       1.339324798 0.1533106 #> 185  184 0.2272732 0.5829019586 1.898248e-01       1.344977173 0.1533948 #> 186  185 0.2273178 0.5827259533 1.899562e-01       1.350629306 0.1534775 #> 187  186 0.2273664 0.5825515833 1.900820e-01       1.356281322 0.1535585 #> 188  187 0.2274187 0.5823789493 1.902024e-01       1.361933339 0.1536380 #> 189  188 0.2274744 0.5822081439 1.903175e-01       1.367585468 0.1537158 #> 190  189 0.2275332 0.5820392527 1.904275e-01       1.373237812 0.1537921 #> 191  190 0.2275950 0.5818723539 1.905327e-01       1.378890469 0.1538667 #> 192  191 0.2276594 0.5817075189 1.906331e-01       1.384543532 0.1539397 #> 193  192 0.2277263 0.5815448127 1.907289e-01       1.390197085 0.1540111 #> 194  193 0.2277954 0.5813842940 1.908203e-01       1.395851210 0.1540809 #> 195  194 0.2278666 0.5812260158 1.909074e-01       1.401505982 0.1541491 #> 196  195 0.2279396 0.5810700254 1.909904e-01       1.407161470 0.1542157 #> 197  196 0.2280142 0.5809163649 1.910694e-01       1.412817739 0.1542808 #> 198  197 0.2280903 0.5807650711 1.911446e-01       1.418474851 0.1543444 #> 199  198 0.2281677 0.5806161762 1.912161e-01       1.424132860 0.1544064 #> 200  199 0.2282463 0.5804697078 1.912840e-01       1.429791819 0.1544669 #> 201  200 0.2283258 0.5803256891 1.913485e-01       1.435451775 0.1545259 #> 202  201 0.2284062 0.5801841393 1.914097e-01       1.441112773 0.1545834 #> 203  202 0.2284873 0.5800450737 1.914677e-01       1.446774851 0.1546395 #> 204  203 0.2285689 0.5799085039 1.915226e-01       1.452438047 0.1546941 #> 205  204 0.2286511 0.5797744380 1.915745e-01       1.458102394 0.1547474 #> 206  205 0.2287335 0.5796428809 1.916236e-01       1.463767921 0.1547992 #> 207  206 0.2288162 0.5795138343 1.916700e-01       1.469434656 0.1548496 #> 208  207 0.2288990 0.5793872971 1.917137e-01       1.475102622 0.1548987 #> 209  208 0.2289818 0.5792632654 1.917549e-01       1.480771841 0.1549465 #> 210  209 0.2290645 0.5791417327 1.917937e-01       1.486442332 0.1549929 #> 211  210 0.2291471 0.5790226902 1.918302e-01       1.492114109 0.1550381 #> 212  211 0.2292295 0.5789061266 1.918644e-01       1.497787188 0.1550820 #> 213  212 0.2293115 0.5787920288 1.918965e-01       1.503461578 0.1551246 #> 214  213 0.2293931 0.5786803814 1.919265e-01       1.509137291 0.1551661 #> 215  214 0.2294743 0.5785711673 1.919545e-01       1.514814333 0.1552064 #> 216  215 0.2295550 0.5784643677 1.919807e-01       1.520492709 0.1552455 #> 217  216 0.2296350 0.5783599620 1.920050e-01       1.526172423 0.1552834 #> 218  217 0.2297145 0.5782579284 1.920276e-01       1.531853477 0.1553203 #> 219  218 0.2297932 0.5781582435 1.920485e-01       1.537535871 0.1553560 #> 220  219 0.2298713 0.5780608827 1.920679e-01       1.543219603 0.1553907 #> 221  220 0.2299485 0.5779658202 1.920857e-01       1.548904673 0.1554243 #> 222  221 0.2300249 0.5778730292 1.921021e-01       1.554591074 0.1554569 #> 223  222 0.2301005 0.5777824819 1.921170e-01       1.560278802 0.1554885 #> 224  223 0.2301751 0.5776941495 1.921307e-01       1.565967851 0.1555192 #> 225  224 0.2302489 0.5776080026 1.921431e-01       1.571658213 0.1555488 #> 226  225 0.2303217 0.5775240108 1.921543e-01       1.577349880 0.1555776 #> 227  226 0.2303935 0.5774421432 1.921643e-01       1.583042841 0.1556054 #> 228  227 0.2304643 0.5773623684 1.921733e-01       1.588737087 0.1556324 #> 229  228 0.2305341 0.5772846543 1.921812e-01       1.594432607 0.1556585 #> 230  229 0.2306029 0.5772089685 1.921881e-01       1.600129387 0.1556837 #> 231  230 0.2306706 0.5771352781 1.921941e-01       1.605827416 0.1557081 #> 232  231 0.2307372 0.5770635500 1.921992e-01       1.611526681 0.1557317 #> 233  232 0.2308028 0.5769937508 1.922035e-01       1.617227166 0.1557546 #> 234  233 0.2308673 0.5769258467 1.922069e-01       1.622928859 0.1557767 #> 235  234 0.2309306 0.5768598039 1.922096e-01       1.628631743 0.1557980 #> 236  235 0.2309929 0.5767955886 1.922115e-01       1.634335803 0.1558186 #> 237  236 0.2310540 0.5767331667 1.922128e-01       1.640041023 0.1558386 #> 238  237 0.2311141 0.5766725041 1.922134e-01       1.645747388 0.1558578 #> 239  238 0.2311730 0.5766135669 1.922135e-01       1.651454879 0.1558764 #> 240  239 0.2312308 0.5765563209 1.922129e-01       1.657163481 0.1558944 #> 241  240 0.2312874 0.5765007324 1.922118e-01       1.662873177 0.1559117 #> 242  241 0.2313430 0.5764467675 1.922102e-01       1.668583948 0.1559284 #> 243  242 0.2313975 0.5763943925 1.922082e-01       1.674295778 0.1559445 #> 244  243 0.2314508 0.5763435740 1.922056e-01       1.680008648 0.1559601 #> 245  244 0.2315030 0.5762942786 1.922027e-01       1.685722540 0.1559750 #> 246  245 0.2315542 0.5762464734 1.921994e-01       1.691437437 0.1559895 #> 247  246 0.2316042 0.5762001254 1.921957e-01       1.697153321 0.1560034 #> 248  247 0.2316532 0.5761552023 1.921916e-01       1.702870174 0.1560169 #> 249  248 0.2317010 0.5761116717 1.921873e-01       1.708587976 0.1560298 #> 250  249 0.2317479 0.5760695016 1.921826e-01       1.714306711 0.1560422 #> 251  250 0.2317936 0.5760286606 1.921777e-01       1.720026360 0.1560542 #> 252  251 0.2318383 0.5759891173 1.921726e-01       1.725746904 0.1560658 #> 253  252 0.2318820 0.5759508408 1.921672e-01       1.731468326 0.1560769 #> 254  253 0.2319246 0.5759138007 1.921616e-01       1.737190608 0.1560875 #> 255  254 0.2319663 0.5758779667 1.921557e-01       1.742913732 0.1560978 #> 256  255 0.2320069 0.5758433092 1.921498e-01       1.748637680 0.1561077 #> 257  256 0.2320466 0.5758097988 1.921436e-01       1.754362434 0.1561172 #> 258  257 0.2320852 0.5757774066 1.921374e-01       1.760087977 0.1561263 #> 259  258 0.2321229 0.5757461041 1.921309e-01       1.765814291 0.1561351 #> 260  259 0.2321597 0.5757158632 1.921244e-01       1.771541360 0.1561435 #> 261  260 0.2321955 0.5756866564 1.921178e-01       1.777269164 0.1561516 #> 262  261 0.2322305 0.5756584564 1.921111e-01       1.782997689 0.1561594 #> 263  262 0.2322645 0.5756312365 1.921043e-01       1.788726917 0.1561668 #> 264  263 0.2322976 0.5756049704 1.920975e-01       1.794456831 0.1561740 #> 265  264 0.2323298 0.5755796323 1.920906e-01       1.800187415 0.1561808 #> 266  265 0.2323612 0.5755551969 1.920836e-01       1.805918653 0.1561874 #> 267  266 0.2323917 0.5755316393 1.920767e-01       1.811650529 0.1561937 #> 268  267 0.2324214 0.5755089349 1.920697e-01       1.817383027 0.1561997 #> 269  268 0.2324503 0.5754870599 1.920627e-01       1.823116131 0.1562055 #> 270  269 0.2324784 0.5754659907 1.920556e-01       1.828849826 0.1562110 #> 271  270 0.2325057 0.5754457042 1.920486e-01       1.834584098 0.1562163 #> 272  271 0.2325322 0.5754261778 1.920416e-01       1.840318930 0.1562214 #> 273  272 0.2325579 0.5754073894 1.920347e-01       1.846054309 0.1562262 #> 274  273 0.2325830 0.5753893174 1.920277e-01       1.851790220 0.1562309 #> 275  274 0.2326073 0.5753719404 1.920208e-01       1.857526649 0.1562353 #> 276  275 0.2326309 0.5753552378 1.920139e-01       1.863263581 0.1562395 #> 277  276 0.2326537 0.5753391891 1.920071e-01       1.869001004 0.1562436 #> 278  277 0.2326760 0.5753237745 1.920003e-01       1.874738904 0.1562474 #> 279  278 0.2326975 0.5753089745 1.919935e-01       1.880477267 0.1562511 #> 280  279 0.2327184 0.5752947702 1.919868e-01       1.886216081 0.1562546 #> 281  280 0.2327386 0.5752811430 1.919802e-01       1.891955333 0.1562580 #> 282  281 0.2327583 0.5752680747 1.919736e-01       1.897695010 0.1562612 #> 283  282 0.2327773 0.5752555477 1.919672e-01       1.903435101 0.1562642 #> 284  283 0.2327957 0.5752435445 1.919607e-01       1.909175593 0.1562671 #> 285  284 0.2328136 0.5752320484 1.919544e-01       1.914916474 0.1562699 #> 286  285 0.2328308 0.5752210429 1.919481e-01       1.920657734 0.1562725 #> 287  286 0.2328476 0.5752105119 1.919419e-01       1.926399360 0.1562750 #> 288  287 0.2328638 0.5752004398 1.919358e-01       1.932141342 0.1562773 #> 289  288 0.2328794 0.5751908112 1.919298e-01       1.937883670 0.1562796 #> 290  289 0.2328946 0.5751816113 1.919238e-01       1.943626332 0.1562817 #> 291  290 0.2329092 0.5751728256 1.919180e-01       1.949369318 0.1562837 #> 292  291 0.2329233 0.5751644400 1.919122e-01       1.955112618 0.1562856 #> 293  292 0.2329370 0.5751564407 1.919065e-01       1.960856223 0.1562874 #> 294  293 0.2329502 0.5751488143 1.919010e-01       1.966600122 0.1562891 #> 295  294 0.2329630 0.5751415478 1.918955e-01       1.972344307 0.1562908 #> 296  295 0.2329753 0.5751346285 1.918901e-01       1.978088769 0.1562923 #> 297  296 0.2329872 0.5751280440 1.918847e-01       1.983833497 0.1562937 #> 298  297 0.2329987 0.5751217825 1.918795e-01       1.989578485 0.1562951 #> 299  298 0.2330098 0.5751158321 1.918744e-01       1.995323722 0.1562964 #> 300  299 0.2330204 0.5751101816 1.918694e-01       2.001069201 0.1562976 #> 301  300 0.2330307 0.5751048200 1.918645e-01       2.006814915 0.1562987 #> 302  301 0.2330407 0.5750997365 1.918596e-01       2.012560854 0.1562998 #> 303  302 0.2330502 0.5750949208 1.918549e-01       2.018307011 0.1563008 #> 304  303 0.2330594 0.5750903627 1.918502e-01       2.024053379 0.1563017 #> 305  304 0.2330683 0.5750860525 1.918457e-01       2.029799951 0.1563026 #> 306  305 0.2330768 0.5750819807 1.918412e-01       2.035546719 0.1563034 #> 307  306 0.2330850 0.5750781381 1.918368e-01       2.041293677 0.1563042 #> 308  307 0.2330929 0.5750745156 1.918326e-01       2.047040817 0.1563049 #> 309  308 0.2331005 0.5750711047 1.918284e-01       2.052788134 0.1563055 #> 310  309 0.2331078 0.5750678969 1.918243e-01       2.058535621 0.1563062 #> 311  310 0.2331148 0.5750648840 1.918203e-01       2.064283272 0.1563067 #> 312  311 0.2331216 0.5750620583 1.918164e-01       2.070031081 0.1563072 #> 313  312 0.2331281 0.5750594120 1.918125e-01       2.075779042 0.1563077 #> 314  313 0.2331343 0.5750569376 1.918088e-01       2.081527149 0.1563082 #> 315  314 0.2331402 0.5750546282 1.918051e-01       2.087275397 0.1563086 #> 316  315 0.2331459 0.5750524766 1.918016e-01       2.093023781 0.1563089 #> 317  316 0.2331514 0.5750504763 1.917981e-01       2.098772296 0.1563093 #> 318  317 0.2331567 0.5750486206 1.917947e-01       2.104520935 0.1563096 #> 319  318 0.2331617 0.5750469034 1.917914e-01       2.110269696 0.1563099 #> 320  319 0.2331665 0.5750453185 1.917882e-01       2.116018572 0.1563101 #> 321  320 0.2331711 0.5750438601 1.917850e-01       2.121767559 0.1563103 #> 322  321 0.2331755 0.5750425225 1.917819e-01       2.127516653 0.1563105 #> 323  322 0.2331798 0.5750413003 1.917789e-01       2.133265850 0.1563107 #> 324  323 0.2331838 0.5750401880 1.917760e-01       2.139015145 0.1563108 #> 325  324 0.2331876 0.5750391808 1.917732e-01       2.144764535 0.1563109 #> 326  325 0.2331913 0.5750382735 1.917704e-01       2.150514015 0.1563110 #> 327  326 0.2331948 0.5750374614 1.917677e-01       2.156263581 0.1563111 #> 328  327 0.2331982 0.5750367400 1.917651e-01       2.162013231 0.1563112 #> 329  328 0.2332013 0.5750361049 1.917625e-01       2.167762960 0.1563112 #> 330  329 0.2332044 0.5750355517 1.917601e-01       2.173512765 0.1563112 #> 331  330 0.2332073 0.5750350764 1.917577e-01       2.179262642 0.1563112 #> 332  331 0.2332100 0.5750346749 1.917553e-01       2.185012590 0.1563112 #> 333  332 0.2332126 0.5750343436 1.917530e-01       2.190762603 0.1563112 #> 334  333 0.2332151 0.5750340786 1.917508e-01       2.196512681 0.1563112 #> 335  334 0.2332175 0.5750338766 1.917487e-01       2.202262818 0.1563111 #> 336  335 0.2332197 0.5750337341 1.917466e-01       2.208013014 0.1563111 #> 337  336 0.2332218 0.5750336477 1.917445e-01       2.213763264 0.1563110 #> 338  337 0.2332238 0.5750336145 1.917426e-01       2.219513567 0.1563110 #> 339  338 0.2332257 0.5750336313 1.917407e-01       2.225263920 0.1563109 #> 340  339 0.2332275 0.5750336952 1.917388e-01       2.231014321 0.1563108 #> 341  340 0.2332292 0.5750338035 1.917370e-01       2.236764767 0.1563107 #> 342  341 0.2332308 0.5750339535 1.917353e-01       2.242515255 0.1563106 #> 343  342 0.2332323 0.5750341427 1.917336e-01       2.248265785 0.1563105 #> 344  343 0.2332337 0.5750343685 1.917319e-01       2.254016353 0.1563103 #> 345  344 0.2332350 0.5750346286 1.917303e-01       2.259766958 0.1563102 #> 346  345 0.2332363 0.5750349207 1.917288e-01       2.265517598 0.1563101 #> 347  346 0.2332374 0.5750352427 1.917273e-01       2.271268271 0.1563100 #> 348  347 0.2332385 0.5750355925 1.917259e-01       2.277018975 0.1563098 #> 349  348 0.2332396 0.5750359681 1.917245e-01       2.282769708 0.1563097 #> 350  349 0.2332405 0.5750363677 1.917231e-01       2.288520469 0.1563095 #> 351  350 0.2332414 0.5750367893 1.917218e-01       2.294271257 0.1563094 #> 352  351 0.2332422 0.5750372312 1.917205e-01       2.300022069 0.1563092 #> 353  352 0.2332430 0.5750376919 1.917193e-01       2.305772904 0.1563091 #> 354  353 0.2332437 0.5750381696 1.917181e-01       2.311523761 0.1563089 #> 355  354 0.2332443 0.5750386629 1.917170e-01       2.317274639 0.1563088 #> 356  355 0.2332449 0.5750391704 1.917159e-01       2.323025535 0.1563086 #> 357  356 0.2332455 0.5750396907 1.917148e-01       2.328776450 0.1563085 #> 358  357 0.2332460 0.5750402224 1.917138e-01       2.334527381 0.1563083 #> 359  358 0.2332464 0.5750407644 1.917128e-01       2.340278328 0.1563081 #> 360  359 0.2332468 0.5750413153 1.917118e-01       2.346029289 0.1563080 #> 361  360 0.2332472 0.5750418742 1.917109e-01       2.351780264 0.1563078 #> 362  361 0.2332475 0.5750424399 1.917100e-01       2.357531251 0.1563077 #> 363  362 0.2332478 0.5750430114 1.917092e-01       2.363282250 0.1563075 #> 364  363 0.2332481 0.5750435877 1.917083e-01       2.369033260 0.1563073 #> 365  364 0.2332483 0.5750441680 1.917075e-01       2.374784279 0.1563072 #> 366  365 0.2332485 0.5750447514 1.917068e-01       2.380535307 0.1563070 #> 367  366 0.2332486 0.5750453369 1.917060e-01       2.386286343 0.1563069 #> 368  367 0.2332488 0.5750459240 1.917053e-01       2.392037386 0.1563067 #> 369  368 0.2332489 0.5750465118 1.917046e-01       2.397788436 0.1563065 #> 370  369 0.2332489 0.5750470996 1.917040e-01       2.403539492 0.1563064 #> 371  370 0.2332490 0.5750476868 1.917033e-01       2.409290553 0.1563062 #> 372  371 0.2332490 0.5750482728 1.917027e-01       2.415041619 0.1563061 #> 373  372 0.2332490 0.5750488570 1.917021e-01       2.420792689 0.1563059 #> 374  373 0.2332490 0.5750494389 1.917016e-01       2.426543762 0.1563058 #> 375  374 0.2332490 0.5750500179 1.917010e-01       2.432294838 0.1563056 #> 376  375 0.2332489 0.5750505935 1.917005e-01       2.438045917 0.1563055 #> 377  376 0.2332488 0.5750511654 1.917000e-01       2.443796998 0.1563053 #> 378  377 0.2332487 0.5750517332 1.916995e-01       2.449548080 0.1563052 #> 379  378 0.2332486 0.5750522963 1.916991e-01       2.455299163 0.1563051 #> 380  379 0.2332485 0.5750528546 1.916986e-01       2.461050247 0.1563049 #> 381  380 0.2332484 0.5750534075 1.916982e-01       2.466801331 0.1563048 #> 382  381 0.2332482 0.5750539549 1.916978e-01       2.472552416 0.1563047 #> 383  382 0.2332481 0.5750544965 1.916974e-01       2.478303499 0.1563045 #> 384  383 0.2332479 0.5750550320 1.916970e-01       2.484054583 0.1563044 #> 385  384 0.2332477 0.5750555611 1.916967e-01       2.489805665 0.1563043 #> 386  385 0.2332476 0.5750560836 1.916964e-01       2.495556745 0.1563041 #> 387  386 0.2332474 0.5750565994 1.916960e-01       2.501307825 0.1563040 #> 388  387 0.2332472 0.5750571083 1.916957e-01       2.507058902 0.1563039 #> 389  388 0.2332470 0.5750576100 1.916954e-01       2.512809977 0.1563038 #> 390  389 0.2332467 0.5750581045 1.916952e-01       2.518561050 0.1563037 #> 391  390 0.2332465 0.5750585916 1.916949e-01       2.524312121 0.1563035 #> 392  391 0.2332463 0.5750590713 1.916946e-01       2.530063189 0.1563034 #> 393  392 0.2332461 0.5750595433 1.916944e-01       2.535814254 0.1563033 #> 394  393 0.2332458 0.5750600077 1.916942e-01       2.541565316 0.1563032 #> 395  394 0.2332456 0.5750604643 1.916939e-01       2.547316375 0.1563031 #> 396  395 0.2332454 0.5750609132 1.916937e-01       2.553067431 0.1563030 #> 397  396 0.2332451 0.5750613542 1.916935e-01       2.558818483 0.1563029 #> 398  397 0.2332449 0.5750617873 1.916933e-01       2.564569532 0.1563028 #> 399  398 0.2332446 0.5750622125 1.916932e-01       2.570320577 0.1563027 #> 400  399 0.2332444 0.5750626298 1.916930e-01       2.576071619 0.1563026 #> 401  400 0.2332441 0.5750630392 1.916928e-01       2.581822657 0.1563025 #> 402  401 0.2332439 0.5750634407 1.916927e-01       2.587573690 0.1563024 #> 403  402 0.2332436 0.5750638342 1.916925e-01       2.593324720 0.1563023 #> 404  403 0.2332434 0.5750642199 1.916924e-01       2.599075746 0.1563023 #> 405  404 0.2332431 0.5750645977 1.916923e-01       2.604826768 0.1563022 #> 406  405 0.2332429 0.5750649677 1.916922e-01       2.610577786 0.1563021 #> 407  406 0.2332426 0.5750653300 1.916921e-01       2.616328800 0.1563020 #> 408  407 0.2332424 0.5750656845 1.916920e-01       2.622079809 0.1563019 #> 409  408 0.2332421 0.5750660313 1.916919e-01       2.627830815 0.1563018 #> 410  409 0.2332419 0.5750663706 1.916918e-01       2.633581816 0.1563018 #> 411  410 0.2332416 0.5750667022 1.916917e-01       2.639332813 0.1563017 #> 412  411 0.2332414 0.5750670264 1.916916e-01       2.645083806 0.1563016 #> 413  412 0.2332411 0.5750673432 1.916915e-01       2.650834795 0.1563016 #> 414  413 0.2332409 0.5750676527 1.916915e-01       2.656585779 0.1563015 #> 415  414 0.2332407 0.5750679549 1.916914e-01       2.662336759 0.1563014 #> 416  415 0.2332404 0.5750682500 1.916913e-01       2.668087735 0.1563014 #> 417  416 0.2332402 0.5750685379 1.916913e-01       2.673838707 0.1563013 #> 418  417 0.2332400 0.5750688189 1.916912e-01       2.679589675 0.1563012 #> 419  418 0.2332397 0.5750690930 1.916912e-01       2.685340639 0.1563012 #> 420  419 0.2332395 0.5750693603 1.916911e-01       2.691091598 0.1563011 #> 421  420 0.2332393 0.5750696209 1.916911e-01       2.696842554 0.1563011 #> 422  421 0.2332391 0.5750698749 1.916911e-01       2.702593505 0.1563010 #> 423  422 0.2332389 0.5750701224 1.916910e-01       2.708344453 0.1563009 #> 424  423 0.2332386 0.5750703635 1.916910e-01       2.714095396 0.1563009 #> 425  424 0.2332384 0.5750705983 1.916910e-01       2.719846336 0.1563008 #> 426  425 0.2332382 0.5750708269 1.916910e-01       2.725597272 0.1563008 #> 427  426 0.2332380 0.5750710494 1.916909e-01       2.731348203 0.1563008 #> 428  427 0.2332378 0.5750712660 1.916909e-01       2.737099132 0.1563007 #> 429  428 0.2332376 0.5750714766 1.916909e-01       2.742850056 0.1563007 #> 430  429 0.2332374 0.5750716815 1.916909e-01       2.748600977 0.1563006 #> 431  430 0.2332372 0.5750718807 1.916909e-01       2.754351894 0.1563006 #> 432  431 0.2332370 0.5750720744 1.916909e-01       2.760102807 0.1563005 #> 433  432 0.2332369 0.5750722626 1.916909e-01       2.765853717 0.1563005 #> 434  433 0.2332367 0.5750724455 1.916909e-01       2.771604623 0.1563005 #> 435  434 0.2332365 0.5750726231 1.916909e-01       2.777355526 0.1563004 #> 436  435 0.2332363 0.5750727956 1.916909e-01       2.783106426 0.1563004 #> 437  436 0.2332362 0.5750729631 1.916909e-01       2.788857322 0.1563003 #> 438  437 0.2332360 0.5750731256 1.916909e-01       2.794608215 0.1563003 #> 439  438 0.2332358 0.5750732833 1.916909e-01       2.800359105 0.1563003 #> 440  439 0.2332357 0.5750734364 1.916909e-01       2.806109992 0.1563002 #> 441  440 0.2332355 0.5750735848 1.916909e-01       2.811860875 0.1563002 #> 442  441 0.2332354 0.5750737287 1.916909e-01       2.817611756 0.1563002 #> 443  442 0.2332352 0.5750738682 1.916909e-01       2.823362633 0.1563002 #> 444  443 0.2332351 0.5750740034 1.916909e-01       2.829113508 0.1563001 #> 445  444 0.2332349 0.5750741343 1.916909e-01       2.834864379 0.1563001 #> 446  445 0.2332348 0.5750742612 1.916910e-01       2.840615248 0.1563001 #> 447  446 0.2332346 0.5750743841 1.916910e-01       2.846366114 0.1563001 #> 448  447 0.2332345 0.5750745030 1.916910e-01       2.852116978 0.1563000 #> 449  448 0.2332344 0.5750746181 1.916910e-01       2.857867838 0.1563000 #> 450  449 0.2332343 0.5750747295 1.916910e-01       2.863618696 0.1563000 #> 451  450 0.2332341 0.5750748373 1.916910e-01       2.869369552 0.1563000 #> 452  451 0.2332340 0.5750749415 1.916911e-01       2.875120405 0.1562999 #> 453  452 0.2332339 0.5750750422 1.916911e-01       2.880871256 0.1562999 #> 454  453 0.2332338 0.5750751396 1.916911e-01       2.886622104 0.1562999 #> 455  454 0.2332337 0.5750752337 1.916911e-01       2.892372950 0.1562999 #> 456  455 0.2332335 0.5750753246 1.916911e-01       2.898123794 0.1562999 #> 457  456 0.2332334 0.5750754124 1.916911e-01       2.903874635 0.1562998 #> 458  457 0.2332333 0.5750754972 1.916912e-01       2.909625475 0.1562998 #> 459  458 0.2332332 0.5750755790 1.916912e-01       2.915376312 0.1562998 #> 460  459 0.2332331 0.5750756580 1.916912e-01       2.921127147 0.1562998 #> 461  460 0.2332330 0.5750757341 1.916912e-01       2.926877980 0.1562998 #> 462  461 0.2332329 0.5750758076 1.916912e-01       2.932628811 0.1562998 #> 463  462 0.2332329 0.5750758784 1.916913e-01       2.938379640 0.1562997 #> 464  463 0.2332328 0.5750759466 1.916913e-01       2.944130468 0.1562997 #> 465  464 0.2332327 0.5750760124 1.916913e-01       2.949881293 0.1562997 #> 466  465 0.2332326 0.5750760757 1.916913e-01       2.955632117 0.1562997 #> 467  466 0.2332325 0.5750761367 1.916914e-01       2.961382939 0.1562997 #> 468  467 0.2332324 0.5750761954 1.916914e-01       2.967133759 0.1562997 #> 469  468 0.2332324 0.5750762518 1.916914e-01       2.972884578 0.1562997 #> 470  469 0.2332323 0.5750763062 1.916914e-01       2.978635395 0.1562997 #> 471  470 0.2332322 0.5750763584 1.916914e-01       2.984386211 0.1562996 #> 472  471 0.2332321 0.5750764086 1.916915e-01       2.990137025 0.1562996 #> 473  472 0.2332321 0.5750764569 1.916915e-01       2.995887838 0.1562996 #> 474  473 0.2332320 0.5750765033 1.916915e-01       3.001638649 0.1562996 #> 475  474 0.2332319 0.5750765478 1.916915e-01       3.007389458 0.1562996 #> 476  475 0.2332319 0.5750765905 1.916915e-01       3.013140267 0.1562996 #> 477  476 0.2332318 0.5750766315 1.916916e-01       3.018891074 0.1562996 #> 478  477 0.2332318 0.5750766708 1.916916e-01       3.024641880 0.1562996 #> 479  478 0.2332317 0.5750767085 1.916916e-01       3.030392684 0.1562996 #> 480  479 0.2332316 0.5750767446 1.916916e-01       3.036143488 0.1562996 #> 481  480 0.2332316 0.5750767792 1.916916e-01       3.041894290 0.1562996 #> 482  481 0.2332315 0.5750768124 1.916917e-01       3.047645091 0.1562996 #> 483  482 0.2332315 0.5750768441 1.916917e-01       3.053395891 0.1562996 #> 484  483 0.2332314 0.5750768744 1.916917e-01       3.059146690 0.1562995 #> 485  484 0.2332314 0.5750769034 1.916917e-01       3.064897488 0.1562995 #> 486  485 0.2332313 0.5750769312 1.916917e-01       3.070648285 0.1562995 #> 487  486 0.2332313 0.5750769576 1.916917e-01       3.076399081 0.1562995 #> 488  487 0.2332313 0.5750769829 1.916918e-01       3.082149876 0.1562995 #> 489  488 0.2332312 0.5750770070 1.916918e-01       3.087900670 0.1562995 #> 490  489 0.2332312 0.5750770301 1.916918e-01       3.093651463 0.1562995 #> 491  490 0.2332311 0.5750770520 1.916918e-01       3.099402255 0.1562995 #> 492  491 0.2332311 0.5750770729 1.916918e-01       3.105153047 0.1562995 #> 493  492 0.2332311 0.5750770928 1.916918e-01       3.110903838 0.1562995 #> 494  493 0.2332310 0.5750771117 1.916919e-01       3.116654628 0.1562995 #> 495  494 0.2332310 0.5750771297 1.916919e-01       3.122405417 0.1562995 #> 496  495 0.2332310 0.5750771467 1.916919e-01       3.128156205 0.1562995 #> 497  496 0.2332309 0.5750771630 1.916919e-01       3.133906993 0.1562995 #> 498  497 0.2332309 0.5750771783 1.916919e-01       3.139657780 0.1562995 #> 499  498 0.2332309 0.5750771929 1.916919e-01       3.145408566 0.1562995 #> 500  499 0.2332308 0.5750772067 1.916919e-01       3.151159352 0.1562995 #> 501  500 0.2332308 0.5750772198 1.916920e-01       3.156910137 0.1562995 #>      I_captive    R_captive I_captive_cumulative #> 1   0.00000000 0.000000e+00           0.00000000 #> 2   0.01005452 4.956801e-05           0.01010477 #> 3   0.02021696 1.973599e-04           0.02041848 #> 4   0.03048440 4.412525e-04           0.03093945 #> 5   0.04085456 7.798360e-04           0.04166619 #> 6   0.05132376 1.211014e-03           0.05259620 #> 7   0.06188843 1.733061e-03           0.06372685 #> 8   0.07254456 2.344213e-03           0.07505508 #> 9   0.08328776 3.042716e-03           0.08657736 #> 10  0.09411319 3.826823e-03           0.09828973 #> 11  0.10501566 4.694789e-03           0.11018779 #> 12  0.11598958 5.644866e-03           0.12226668 #> 13  0.12702898 6.675303e-03           0.13452111 #> 14  0.13812749 7.784339e-03           0.14694536 #> 15  0.14927837 8.970199e-03           0.15953323 #> 16  0.16047453 1.023109e-02           0.17227812 #> 17  0.17170851 1.156522e-02           0.18517299 #> 18  0.18297252 1.297074e-02           0.19821038 #> 19  0.19425846 1.444580e-02           0.21138246 #> 20  0.20555791 1.598853e-02           0.22468098 #> 21  0.21686219 1.759701e-02           0.23809737 #> 22  0.22816239 1.926930e-02           0.25162269 #> 23  0.23944933 2.100343e-02           0.26524771 #> 24  0.25071369 2.279741e-02           0.27896291 #> 25  0.26194596 2.464918e-02           0.29275850 #> 26  0.27313650 2.655668e-02           0.30662449 #> 27  0.28427560 2.851780e-02           0.32055070 #> 28  0.29535349 3.053040e-02           0.33452679 #> 29  0.30636037 3.259232e-02           0.34854231 #> 30  0.31728648 3.470133e-02           0.36258672 #> 31  0.32812210 3.685522e-02           0.37664946 #> 32  0.33885763 3.905170e-02           0.39071998 #> 33  0.34948361 4.128850e-02           0.40478776 #> 34  0.35999073 4.356329e-02           0.41884236 #> 35  0.37036993 4.587373e-02           0.43287347 #> 36  0.38061238 4.821747e-02           0.44687095 #> 37  0.39070955 5.059214e-02           0.46082485 #> 38  0.40065322 5.299534e-02           0.47472547 #> 39  0.41043553 5.542468e-02           0.48856336 #> 40  0.42004899 5.787777e-02           0.50232939 #> 41  0.42948655 6.035220e-02           0.51601477 #> 42  0.43874155 6.284557e-02           0.52961107 #> 43  0.44780782 6.535550e-02           0.54311025 #> 44  0.45667965 6.787961e-02           0.55650468 #> 45  0.46535183 7.041553e-02           0.56978718 #> 46  0.47381962 7.296093e-02           0.58295101 #> 47  0.48207884 7.551350e-02           0.59598989 #> 48  0.49012579 7.807094e-02           0.60889804 #> 49  0.49795731 8.063102e-02           0.62167016 #> 50  0.50557076 8.319150e-02           0.63430143 #> 51  0.51296400 8.575022e-02           0.64678753 #> 52  0.52013544 8.830507e-02           0.65912465 #> 53  0.52708395 9.085395e-02           0.67130945 #> 54  0.53380895 9.339484e-02           0.68333909 #> 55  0.54031028 9.592579e-02           0.69521121 #> 56  0.54658831 9.844487e-02           0.70692391 #> 57  0.55264380 1.009503e-01           0.71847575 #> 58  0.55847799 1.034402e-01           0.72986574 #> 59  0.56409251 1.059128e-01           0.74109329 #> 60  0.56948938 1.083667e-01           0.75215825 #> 61  0.57467099 1.108001e-01           0.76306084 #> 62  0.57964008 1.132116e-01           0.77380166 #> 63  0.58439970 1.155998e-01           0.78438165 #> 64  0.58895321 1.179632e-01           0.79480210 #> 65  0.59330423 1.203006e-01           0.80506457 #> 66  0.59745664 1.226108e-01           0.81517095 #> 67  0.60141453 1.248927e-01           0.82512335 #> 68  0.60518220 1.271452e-01           0.83492416 #> 69  0.60876412 1.293673e-01           0.84457597 #> 70  0.61216492 1.315582e-01           0.85408157 #> 71  0.61538936 1.337169e-01           0.86344393 #> 72  0.61844231 1.358427e-01           0.87266617 #> 73  0.62132871 1.379350e-01           0.88175156 #> 74  0.62405358 1.399930e-01           0.89070348 #> 75  0.62662201 1.420163e-01           0.89952541 #> 76  0.62903910 1.440043e-01           0.90822093 #> 77  0.63130995 1.459567e-01           0.91679365 #> 78  0.63343970 1.478730e-01           0.92524726 #> 79  0.63543344 1.497530e-01           0.93358548 #> 80  0.63729625 1.515964e-01           0.94181204 #> 81  0.63903316 1.534031e-01           0.94993070 #> 82  0.64064914 1.551729e-01           0.95794519 #> 83  0.64214912 1.569057e-01           0.96585926 #> 84  0.64353792 1.586015e-01           0.97367659 #> 85  0.64482033 1.602604e-01           0.98140087 #> 86  0.64600099 1.618823e-01           0.98903572 #> 87  0.64708449 1.634675e-01           0.99658473 #> 88  0.64807531 1.650160e-01           1.00405142 #> 89  0.64897781 1.665281e-01           1.01143926 #> 90  0.64979624 1.680040e-01           1.01875163 #> 91  0.65053476 1.694439e-01           1.02599186 #> 92  0.65119737 1.708481e-01           1.03316320 #> 93  0.65178800 1.722170e-01           1.04026882 #> 94  0.65231042 1.735510e-01           1.04731179 #> 95  0.65276831 1.748503e-01           1.05429512 #> 96  0.65316520 1.761155e-01           1.06122172 #> 97  0.65350450 1.773469e-01           1.06809443 #> 98  0.65378953 1.785449e-01           1.07491597 #> 99  0.65402345 1.797101e-01           1.08168899 #> 100 0.65420932 1.808429e-01           1.08841607 #> 101 0.65435008 1.819439e-01           1.09509966 #> 102 0.65444854 1.830135e-01           1.10174215 #> 103 0.65450742 1.840522e-01           1.10834584 #> 104 0.65452930 1.850607e-01           1.11491293 #> 105 0.65451666 1.860394e-01           1.12144554 #> 106 0.65447187 1.869888e-01           1.12794573 #> 107 0.65439720 1.879096e-01           1.13441543 #> 108 0.65429481 1.888024e-01           1.14085652 #> 109 0.65416677 1.896676e-01           1.14727081 #> 110 0.65401503 1.905058e-01           1.15366000 #> 111 0.65384147 1.913177e-01           1.16002574 #> 112 0.65364786 1.921038e-01           1.16636959 #> 113 0.65343589 1.928647e-01           1.17269305 #> 114 0.65320717 1.936008e-01           1.17899755 #> 115 0.65296320 1.943129e-01           1.18528445 #> 116 0.65270544 1.950015e-01           1.19155504 #> 117 0.65243523 1.956671e-01           1.19781055 #> 118 0.65215388 1.963104e-01           1.20405215 #> 119 0.65186259 1.969318e-01           1.21028095 #> 120 0.65156251 1.975319e-01           1.21649801 #> 121 0.65125473 1.981113e-01           1.22270432 #> 122 0.65094025 1.986705e-01           1.22890082 #> 123 0.65062005 1.992101e-01           1.23508842 #> 124 0.65029501 1.997305e-01           1.24126796 #> 125 0.64996598 2.002323e-01           1.24744024 #> 126 0.64963376 2.007160e-01           1.25360602 #> 127 0.64929907 2.011822e-01           1.25976600 #> 128 0.64896263 2.016312e-01           1.26592086 #> 129 0.64862506 2.020637e-01           1.27207123 #> 130 0.64828697 2.024801e-01           1.27821771 #> 131 0.64794893 2.028808e-01           1.28436084 #> 132 0.64761144 2.032664e-01           1.29050116 #> 133 0.64727501 2.036372e-01           1.29663916 #> 134 0.64694006 2.039938e-01           1.30277528 #> 135 0.64660702 2.043365e-01           1.30890997 #> 136 0.64627626 2.046659e-01           1.31504363 #> 137 0.64594814 2.049822e-01           1.32117663 #> 138 0.64562296 2.052860e-01           1.32730931 #> 139 0.64530104 2.055777e-01           1.33344200 #> 140 0.64498263 2.058575e-01           1.33957501 #> 141 0.64466798 2.061260e-01           1.34570861 #> 142 0.64435730 2.063834e-01           1.35184305 #> 143 0.64405080 2.066303e-01           1.35797858 #> 144 0.64374864 2.068668e-01           1.36411542 #> 145 0.64345099 2.070933e-01           1.37025377 #> 146 0.64315799 2.073103e-01           1.37639381 #> 147 0.64286976 2.075180e-01           1.38253571 #> 148 0.64258640 2.077167e-01           1.38867962 #> 149 0.64230800 2.079068e-01           1.39482569 #> 150 0.64203464 2.080886e-01           1.40097404 #> 151 0.64176639 2.082623e-01           1.40712479 #> 152 0.64150328 2.084283e-01           1.41327803 #> 153 0.64124537 2.085868e-01           1.41943386 #> 154 0.64099268 2.087380e-01           1.42559236 #> 155 0.64074523 2.088824e-01           1.43175359 #> 156 0.64050303 2.090201e-01           1.43791762 #> 157 0.64026607 2.091513e-01           1.44408450 #> 158 0.64003434 2.092764e-01           1.45025428 #> 159 0.63980784 2.093955e-01           1.45642698 #> 160 0.63958654 2.095089e-01           1.46260265 #> 161 0.63937041 2.096168e-01           1.46878130 #> 162 0.63915941 2.097194e-01           1.47496295 #> 163 0.63895351 2.098169e-01           1.48114760 #> 164 0.63875265 2.099095e-01           1.48733527 #> 165 0.63855679 2.099974e-01           1.49352596 #> 166 0.63836588 2.100809e-01           1.49971965 #> 167 0.63817985 2.101600e-01           1.50591635 #> 168 0.63799865 2.102349e-01           1.51211603 #> 169 0.63782220 2.103059e-01           1.51831869 #> 170 0.63765045 2.103731e-01           1.52452429 #> 171 0.63748332 2.104366e-01           1.53073283 #> 172 0.63732074 2.104966e-01           1.53694427 #> 173 0.63716264 2.105532e-01           1.54315858 #> 174 0.63700894 2.106067e-01           1.54937574 #> 175 0.63685957 2.106571e-01           1.55559571 #> 176 0.63671445 2.107045e-01           1.56181845 #> 177 0.63657349 2.107491e-01           1.56804393 #> 178 0.63643663 2.107911e-01           1.57427211 #> 179 0.63630377 2.108304e-01           1.58050295 #> 180 0.63617484 2.108673e-01           1.58673641 #> 181 0.63604976 2.109019e-01           1.59297245 #> 182 0.63592845 2.109343e-01           1.59921103 #> 183 0.63581082 2.109645e-01           1.60545210 #> 184 0.63569680 2.109926e-01           1.61169561 #> 185 0.63558630 2.110189e-01           1.61794152 #> 186 0.63547925 2.110433e-01           1.62418979 #> 187 0.63537556 2.110659e-01           1.63044038 #> 188 0.63527515 2.110869e-01           1.63669322 #> 189 0.63517795 2.111062e-01           1.64294829 #> 190 0.63508388 2.111241e-01           1.64920552 #> 191 0.63499286 2.111405e-01           1.65546488 #> 192 0.63490482 2.111555e-01           1.66172632 #> 193 0.63481967 2.111693e-01           1.66798980 #> 194 0.63473735 2.111818e-01           1.67425526 #> 195 0.63465778 2.111931e-01           1.68052266 #> 196 0.63458089 2.112034e-01           1.68679196 #> 197 0.63450660 2.112126e-01           1.69306311 #> 198 0.63443485 2.112208e-01           1.69933606 #> 199 0.63436557 2.112280e-01           1.70561078 #> 200 0.63429869 2.112344e-01           1.71188722 #> 201 0.63423414 2.112400e-01           1.71816533 #> 202 0.63417185 2.112447e-01           1.72444507 #> 203 0.63411177 2.112487e-01           1.73072641 #> 204 0.63405382 2.112520e-01           1.73700929 #> 205 0.63399796 2.112547e-01           1.74329368 #> 206 0.63394411 2.112567e-01           1.74957954 #> 207 0.63389221 2.112582e-01           1.75586682 #> 208 0.63384221 2.112591e-01           1.76215549 #> 209 0.63379405 2.112595e-01           1.76844552 #> 210 0.63374768 2.112594e-01           1.77473685 #> 211 0.63370304 2.112589e-01           1.78102946 #> 212 0.63366007 2.112579e-01           1.78732331 #> 213 0.63361873 2.112566e-01           1.79361836 #> 214 0.63357896 2.112549e-01           1.79991458 #> 215 0.63354072 2.112529e-01           1.80621193 #> 216 0.63350395 2.112506e-01           1.81251038 #> 217 0.63346861 2.112480e-01           1.81880991 #> 218 0.63343465 2.112451e-01           1.82511046 #> 219 0.63340203 2.112420e-01           1.83141202 #> 220 0.63337070 2.112386e-01           1.83771455 #> 221 0.63334062 2.112351e-01           1.84401803 #> 222 0.63331175 2.112313e-01           1.85032242 #> 223 0.63328405 2.112274e-01           1.85662770 #> 224 0.63325747 2.112234e-01           1.86293383 #> 225 0.63323199 2.112192e-01           1.86924079 #> 226 0.63320756 2.112149e-01           1.87554856 #> 227 0.63318414 2.112104e-01           1.88185710 #> 228 0.63316171 2.112059e-01           1.88816639 #> 229 0.63314022 2.112013e-01           1.89447642 #> 230 0.63311965 2.111967e-01           1.90078714 #> 231 0.63309996 2.111919e-01           1.90709855 #> 232 0.63308112 2.111871e-01           1.91341061 #> 233 0.63306309 2.111823e-01           1.91972331 #> 234 0.63304586 2.111775e-01           1.92603662 #> 235 0.63302939 2.111726e-01           1.93235053 #> 236 0.63301365 2.111677e-01           1.93866500 #> 237 0.63299862 2.111628e-01           1.94498003 #> 238 0.63298427 2.111579e-01           1.95129560 #> 239 0.63297058 2.111530e-01           1.95761167 #> 240 0.63295751 2.111481e-01           1.96392825 #> 241 0.63294505 2.111433e-01           1.97024530 #> 242 0.63293317 2.111384e-01           1.97656281 #> 243 0.63292186 2.111336e-01           1.98288077 #> 244 0.63291108 2.111289e-01           1.98919916 #> 245 0.63290082 2.111241e-01           1.99551796 #> 246 0.63289106 2.111194e-01           2.00183716 #> 247 0.63288178 2.111148e-01           2.00815675 #> 248 0.63287296 2.111102e-01           2.01447670 #> 249 0.63286458 2.111056e-01           2.02079701 #> 250 0.63285663 2.111011e-01           2.02711766 #> 251 0.63284908 2.110967e-01           2.03343864 #> 252 0.63284192 2.110923e-01           2.03975993 #> 253 0.63283513 2.110880e-01           2.04608153 #> 254 0.63282871 2.110837e-01           2.05240342 #> 255 0.63282263 2.110796e-01           2.05872560 #> 256 0.63281687 2.110754e-01           2.06504804 #> 257 0.63281144 2.110714e-01           2.07137075 #> 258 0.63280630 2.110674e-01           2.07769370 #> 259 0.63280146 2.110634e-01           2.08401689 #> 260 0.63279689 2.110596e-01           2.09034032 #> 261 0.63279259 2.110558e-01           2.09666396 #> 262 0.63278854 2.110521e-01           2.10298782 #> 263 0.63278473 2.110485e-01           2.10931188 #> 264 0.63278115 2.110449e-01           2.11563613 #> 265 0.63277780 2.110414e-01           2.12196057 #> 266 0.63277466 2.110380e-01           2.12828519 #> 267 0.63277171 2.110346e-01           2.13460998 #> 268 0.63276896 2.110313e-01           2.14093493 #> 269 0.63276640 2.110281e-01           2.14726004 #> 270 0.63276401 2.110250e-01           2.15358531 #> 271 0.63276179 2.110219e-01           2.15991071 #> 272 0.63275972 2.110189e-01           2.16623626 #> 273 0.63275781 2.110159e-01           2.17256193 #> 274 0.63275604 2.110131e-01           2.17888773 #> 275 0.63275441 2.110103e-01           2.18521365 #> 276 0.63275291 2.110075e-01           2.19153969 #> 277 0.63275153 2.110049e-01           2.19786583 #> 278 0.63275027 2.110023e-01           2.20419208 #> 279 0.63274912 2.109998e-01           2.21051843 #> 280 0.63274808 2.109973e-01           2.21684487 #> 281 0.63274714 2.109949e-01           2.22317141 #> 282 0.63274630 2.109925e-01           2.22949803 #> 283 0.63274554 2.109903e-01           2.23582473 #> 284 0.63274487 2.109880e-01           2.24215152 #> 285 0.63274428 2.109859e-01           2.24847837 #> 286 0.63274377 2.109838e-01           2.25480530 #> 287 0.63274333 2.109817e-01           2.26113230 #> 288 0.63274296 2.109797e-01           2.26745936 #> 289 0.63274265 2.109778e-01           2.27378647 #> 290 0.63274240 2.109759e-01           2.28011365 #> 291 0.63274221 2.109741e-01           2.28644088 #> 292 0.63274207 2.109723e-01           2.29276817 #> 293 0.63274199 2.109706e-01           2.29909550 #> 294 0.63274195 2.109689e-01           2.30542288 #> 295 0.63274195 2.109673e-01           2.31175031 #> 296 0.63274200 2.109657e-01           2.31807777 #> 297 0.63274208 2.109642e-01           2.32440528 #> 298 0.63274220 2.109627e-01           2.33073282 #> 299 0.63274236 2.109613e-01           2.33706040 #> 300 0.63274254 2.109599e-01           2.34338801 #> 301 0.63274276 2.109585e-01           2.34971565 #> 302 0.63274300 2.109572e-01           2.35604332 #> 303 0.63274327 2.109560e-01           2.36237102 #> 304 0.63274356 2.109547e-01           2.36869874 #> 305 0.63274387 2.109535e-01           2.37502649 #> 306 0.63274420 2.109524e-01           2.38135426 #> 307 0.63274455 2.109513e-01           2.38768205 #> 308 0.63274491 2.109502e-01           2.39400987 #> 309 0.63274529 2.109492e-01           2.40033770 #> 310 0.63274568 2.109482e-01           2.40666554 #> 311 0.63274609 2.109472e-01           2.41299341 #> 312 0.63274651 2.109463e-01           2.41932129 #> 313 0.63274693 2.109453e-01           2.42564918 #> 314 0.63274736 2.109445e-01           2.43197708 #> 315 0.63274780 2.109436e-01           2.43830500 #> 316 0.63274825 2.109428e-01           2.44463293 #> 317 0.63274870 2.109420e-01           2.45096087 #> 318 0.63274916 2.109413e-01           2.45728881 #> 319 0.63274962 2.109405e-01           2.46361677 #> 320 0.63275009 2.109398e-01           2.46994473 #> 321 0.63275055 2.109391e-01           2.47627270 #> 322 0.63275102 2.109385e-01           2.48260067 #> 323 0.63275149 2.109379e-01           2.48892865 #> 324 0.63275195 2.109372e-01           2.49525664 #> 325 0.63275242 2.109367e-01           2.50158463 #> 326 0.63275289 2.109361e-01           2.50791262 #> 327 0.63275335 2.109355e-01           2.51424061 #> 328 0.63275381 2.109350e-01           2.52056861 #> 329 0.63275427 2.109345e-01           2.52689661 #> 330 0.63275473 2.109340e-01           2.53322461 #> 331 0.63275518 2.109336e-01           2.53955262 #> 332 0.63275563 2.109331e-01           2.54588062 #> 333 0.63275608 2.109327e-01           2.55220863 #> 334 0.63275652 2.109323e-01           2.55853663 #> 335 0.63275696 2.109319e-01           2.56486464 #> 336 0.63275739 2.109315e-01           2.57119264 #> 337 0.63275782 2.109311e-01           2.57752064 #> 338 0.63275824 2.109308e-01           2.58384865 #> 339 0.63275866 2.109305e-01           2.59017665 #> 340 0.63275907 2.109301e-01           2.59650465 #> 341 0.63275948 2.109298e-01           2.60283265 #> 342 0.63275988 2.109295e-01           2.60916064 #> 343 0.63276027 2.109293e-01           2.61548864 #> 344 0.63276066 2.109290e-01           2.62181663 #> 345 0.63276104 2.109287e-01           2.62814462 #> 346 0.63276141 2.109285e-01           2.63447261 #> 347 0.63276178 2.109283e-01           2.64080059 #> 348 0.63276215 2.109280e-01           2.64712857 #> 349 0.63276250 2.109278e-01           2.65345655 #> 350 0.63276285 2.109276e-01           2.65978453 #> 351 0.63276319 2.109274e-01           2.66611250 #> 352 0.63276353 2.109272e-01           2.67244047 #> 353 0.63276386 2.109271e-01           2.67876844 #> 354 0.63276418 2.109269e-01           2.68509640 #> 355 0.63276450 2.109267e-01           2.69142437 #> 356 0.63276481 2.109266e-01           2.69775232 #> 357 0.63276512 2.109264e-01           2.70408028 #> 358 0.63276541 2.109263e-01           2.71040823 #> 359 0.63276571 2.109262e-01           2.71673617 #> 360 0.63276599 2.109260e-01           2.72306412 #> 361 0.63276627 2.109259e-01           2.72939206 #> 362 0.63276654 2.109258e-01           2.73571999 #> 363 0.63276681 2.109257e-01           2.74204793 #> 364 0.63276707 2.109256e-01           2.74837586 #> 365 0.63276732 2.109255e-01           2.75470378 #> 366 0.63276757 2.109254e-01           2.76103171 #> 367 0.63276781 2.109253e-01           2.76735963 #> 368 0.63276805 2.109252e-01           2.77368754 #> 369 0.63276828 2.109252e-01           2.78001545 #> 370 0.63276851 2.109251e-01           2.78634336 #> 371 0.63276873 2.109250e-01           2.79267127 #> 372 0.63276894 2.109250e-01           2.79899917 #> 373 0.63276915 2.109249e-01           2.80532707 #> 374 0.63276935 2.109249e-01           2.81165497 #> 375 0.63276955 2.109248e-01           2.81798286 #> 376 0.63276974 2.109248e-01           2.82431075 #> 377 0.63276993 2.109247e-01           2.83063863 #> 378 0.63277011 2.109247e-01           2.83696652 #> 379 0.63277029 2.109246e-01           2.84329440 #> 380 0.63277046 2.109246e-01           2.84962227 #> 381 0.63277063 2.109246e-01           2.85595015 #> 382 0.63277080 2.109245e-01           2.86227802 #> 383 0.63277096 2.109245e-01           2.86860589 #> 384 0.63277111 2.109245e-01           2.87493375 #> 385 0.63277126 2.109245e-01           2.88126161 #> 386 0.63277141 2.109245e-01           2.88758947 #> 387 0.63277155 2.109244e-01           2.89391733 #> 388 0.63277169 2.109244e-01           2.90024518 #> 389 0.63277182 2.109244e-01           2.90657304 #> 390 0.63277195 2.109244e-01           2.91290089 #> 391 0.63277208 2.109244e-01           2.91922873 #> 392 0.63277220 2.109244e-01           2.92555657 #> 393 0.63277232 2.109244e-01           2.93188442 #> 394 0.63277243 2.109244e-01           2.93821226 #> 395 0.63277254 2.109243e-01           2.94454009 #> 396 0.63277265 2.109243e-01           2.95086793 #> 397 0.63277276 2.109243e-01           2.95719576 #> 398 0.63277286 2.109243e-01           2.96352359 #> 399 0.63277296 2.109243e-01           2.96985141 #> 400 0.63277305 2.109243e-01           2.97617924 #> 401 0.63277315 2.109243e-01           2.98250706 #> 402 0.63277323 2.109243e-01           2.98883488 #> 403 0.63277332 2.109243e-01           2.99516270 #> 404 0.63277340 2.109243e-01           3.00149052 #> 405 0.63277349 2.109243e-01           3.00781834 #> 406 0.63277356 2.109244e-01           3.01414615 #> 407 0.63277364 2.109244e-01           3.02047396 #> 408 0.63277371 2.109244e-01           3.02680177 #> 409 0.63277378 2.109244e-01           3.03312958 #> 410 0.63277385 2.109244e-01           3.03945739 #> 411 0.63277392 2.109244e-01           3.04578519 #> 412 0.63277398 2.109244e-01           3.05211300 #> 413 0.63277404 2.109244e-01           3.05844080 #> 414 0.63277410 2.109244e-01           3.06476860 #> 415 0.63277416 2.109244e-01           3.07109640 #> 416 0.63277422 2.109244e-01           3.07742419 #> 417 0.63277427 2.109244e-01           3.08375199 #> 418 0.63277432 2.109244e-01           3.09007978 #> 419 0.63277437 2.109245e-01           3.09640758 #> 420 0.63277442 2.109245e-01           3.10273537 #> 421 0.63277446 2.109245e-01           3.10906316 #> 422 0.63277451 2.109245e-01           3.11539095 #> 423 0.63277455 2.109245e-01           3.12171874 #> 424 0.63277459 2.109245e-01           3.12804652 #> 425 0.63277463 2.109245e-01           3.13437431 #> 426 0.63277467 2.109245e-01           3.14070209 #> 427 0.63277471 2.109245e-01           3.14702988 #> 428 0.63277474 2.109246e-01           3.15335766 #> 429 0.63277478 2.109246e-01           3.15968544 #> 430 0.63277481 2.109246e-01           3.16601322 #> 431 0.63277484 2.109246e-01           3.17234100 #> 432 0.63277487 2.109246e-01           3.17866878 #> 433 0.63277490 2.109246e-01           3.18499656 #> 434 0.63277493 2.109246e-01           3.19132434 #> 435 0.63277495 2.109246e-01           3.19765211 #> 436 0.63277498 2.109246e-01           3.20397989 #> 437 0.63277500 2.109246e-01           3.21030766 #> 438 0.63277503 2.109247e-01           3.21663543 #> 439 0.63277505 2.109247e-01           3.22296321 #> 440 0.63277507 2.109247e-01           3.22929098 #> 441 0.63277509 2.109247e-01           3.23561875 #> 442 0.63277511 2.109247e-01           3.24194652 #> 443 0.63277513 2.109247e-01           3.24827429 #> 444 0.63277515 2.109247e-01           3.25460206 #> 445 0.63277517 2.109247e-01           3.26092983 #> 446 0.63277518 2.109247e-01           3.26725760 #> 447 0.63277520 2.109248e-01           3.27358537 #> 448 0.63277521 2.109248e-01           3.27991313 #> 449 0.63277523 2.109248e-01           3.28624090 #> 450 0.63277524 2.109248e-01           3.29256867 #> 451 0.63277526 2.109248e-01           3.29889643 #> 452 0.63277527 2.109248e-01           3.30522420 #> 453 0.63277528 2.109248e-01           3.31155196 #> 454 0.63277529 2.109248e-01           3.31787973 #> 455 0.63277530 2.109248e-01           3.32420749 #> 456 0.63277531 2.109248e-01           3.33053525 #> 457 0.63277532 2.109248e-01           3.33686302 #> 458 0.63277533 2.109248e-01           3.34319078 #> 459 0.63277534 2.109249e-01           3.34951854 #> 460 0.63277535 2.109249e-01           3.35584630 #> 461 0.63277536 2.109249e-01           3.36217406 #> 462 0.63277536 2.109249e-01           3.36850183 #> 463 0.63277537 2.109249e-01           3.37482959 #> 464 0.63277538 2.109249e-01           3.38115735 #> 465 0.63277538 2.109249e-01           3.38748511 #> 466 0.63277539 2.109249e-01           3.39381287 #> 467 0.63277540 2.109249e-01           3.40014063 #> 468 0.63277540 2.109249e-01           3.40646839 #> 469 0.63277541 2.109249e-01           3.41279614 #> 470 0.63277541 2.109249e-01           3.41912390 #> 471 0.63277542 2.109249e-01           3.42545166 #> 472 0.63277542 2.109249e-01           3.43177942 #> 473 0.63277542 2.109249e-01           3.43810718 #> 474 0.63277543 2.109250e-01           3.44443494 #> 475 0.63277543 2.109250e-01           3.45076269 #> 476 0.63277543 2.109250e-01           3.45709045 #> 477 0.63277544 2.109250e-01           3.46341821 #> 478 0.63277544 2.109250e-01           3.46974596 #> 479 0.63277544 2.109250e-01           3.47607372 #> 480 0.63277544 2.109250e-01           3.48240148 #> 481 0.63277545 2.109250e-01           3.48872923 #> 482 0.63277545 2.109250e-01           3.49505699 #> 483 0.63277545 2.109250e-01           3.50138475 #> 484 0.63277545 2.109250e-01           3.50771250 #> 485 0.63277545 2.109250e-01           3.51404026 #> 486 0.63277545 2.109250e-01           3.52036802 #> 487 0.63277545 2.109250e-01           3.52669577 #> 488 0.63277546 2.109250e-01           3.53302353 #> 489 0.63277546 2.109250e-01           3.53935128 #> 490 0.63277546 2.109250e-01           3.54567904 #> 491 0.63277546 2.109250e-01           3.55200679 #> 492 0.63277546 2.109250e-01           3.55833455 #> 493 0.63277546 2.109250e-01           3.56466230 #> 494 0.63277546 2.109250e-01           3.57099006 #> 495 0.63277546 2.109250e-01           3.57731781 #> 496 0.63277546 2.109250e-01           3.58364557 #> 497 0.63277546 2.109251e-01           3.58997332 #> 498 0.63277546 2.109251e-01           3.59630108 #> 499 0.63277546 2.109251e-01           3.60262883 #> 500 0.63277546 2.109251e-01           3.60895659 #> 501 0.63277546 2.109251e-01           3.61528434"},{"path":"/reference/whitetailedSIRS.html","id":null,"dir":"Reference","previous_headings":"","what":"whitetailedSIRS: A package to project SARS-CoV-2 outbreak dynamics in\nwhite-tailed deer — whitetailedSIRS","title":"whitetailedSIRS: A package to project SARS-CoV-2 outbreak dynamics in\nwhite-tailed deer — whitetailedSIRS","text":"software release contains several R scripts generate epidemic projections SARS-CoV-2 white tailed deer populations using **S**usceptible-****nfected-**R**ecovered-**S**usceptible (SIRS) modeling framework. provide workflow vignettes used Rosenblatt et al. Prep Cook et al. Prep. Users able specify transmission parameters human-deer deer-deer transmission quantify changes outbreak dynamics. outputs package ggplot friendly, part, use list-column workflow working multiple simulations. Details model can found vignettes.","code":""}]
