[{"path":"/articles/SIRS_analysis_by_contexts.html","id":"basic-simulation-parameters","dir":"Articles","previous_headings":"","what":"Basic Simulation Parameters","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"loading packages, set several parameters remain constant across simulations. set seed reproducible results (set.seed). define number iterations simulations particular context (nsamples). set human prevalence levels (I_human_null). define duration SIRS projection days (times).","code":"set.seed(23) nsamples <- 200 I_human_null <- 0.05 times <- seq(0, 120, by = 1)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"expert-elicitated-parameters","dir":"Articles","previous_headings":"","what":"Expert Elicitated Parameters","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"","code":"elicitation_data <- draw_elicitation_samples(nsamples = nsamples)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"contexts-for-sars-cov-2-introduction-and-spread-in-white-tailed-deer-populations","dir":"Articles","previous_headings":"","what":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Following Rosenblatt et al. (2023), four contexts defined, including outdoor captive ranch, intensive captive facility, wild deer rural conditions, wild deer suburban conditions. RMD file, contexts simulated independently . briefly describe context, calculate various proximity rates infection probabilities, derive transmission rates SARS-CoV-2 contexts.","code":""},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"outdoor-captive-ranch","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","what":"Outdoor captive ranch","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"modeled population captive deer housed outdoor ranching facility. assumed proximity rates deer context estimated wild contexts, increase proximity rates due supplemental feeding. assume proximity rates humans deer context estimated wild, suburban context, duration proximity events longer, reflecting typical captive facility.","code":""},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"proximity-rates","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations > Outdoor captive ranch","what":"Proximity Rates","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Proximity rates derived rate model developed Habib et al. (2011), function habitat conditions (habitat) density (nwild/A_W). uses Habib et al. (2011) model analysis, fixed density 10 deer per sq km habitat 26% wooded habitat (classified calc_contact_rate function type_contact = “med”). also used expert elicitation estimates probability direct contact fluid transmission. Next, define various proximity rates ranch context. Object names reflect parameters must included SIRS ODE solver (e.g. c_ww_ranch, set 0).","code":"nWild <- rpois(nsamples,1000) #Abundance A_w <- 100 #Area habitat <- \"med\" #Habitat classification sigma_season <- 1 #Season adjustment for proximity rate  sigma_dc <- get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\") #Probability of direct contact between deer, given proximity. c_ww_ranch <- rep(0, nsamples) #Deer-to-deer proximity rate in wild (set to 0; events per day). c_cw_null <- rep(0, nsamples) #Deer-to-deer proximity rate along fenceline (set to 0; events per day). c_cc_ranch <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17) #Deer-to-deer proximity rate in ranch context, mimicing wild proximity rates with the influence of baiting (events per day).  c_hw_ranch <- rep(0, nsamples) #Human-to-deer proximity rate in wild (set to 0; events per day). c_hc_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 #Human-to-deer proximity rate in ranch context, mimicing suburban proximitty rates (events per day)."},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"infection-probabilities","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations > Outdoor captive ranch","what":"Infection probabilities","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"calculate infection probabilities three transmission pathways - aerosol transmission deer--deer, fluid transmission deer--deer, aerosol transmission human--deer. , use various package functions define parameters estimate infection probability given proximity contact.","code":"C_nu_human <- rnorm(n = nsamples, mean = 10^5.6, sd = 10^1.2)#viral load in humans (genomic copies per ml) C_nu_deer <- 10^5.6 * get_EE_param_vals(data = elicitation_data, my_param = \"Viral Load\") #viral load in deer saliva, relative to humans (genomic copies per ml)  r_deer <- get_EE_param_vals(data = elicitation_data, my_param = \"Dose-Response\")# Dose response coefficient for deer and SARS-CoV-2 #Infection probability calculation of aerosol transmission from deer-to-deer t_contact_deer_deer_null <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer Proximity Duration (minutes)\") #Estimate duration of proximity event... nu_aero_deer_deer_ranch <- calc_nu_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples) #...and estimate probability of infection given that duration of proximity event.  nu_aero_deer_deer_wild_null <- rep(0, nsamples) #Estimate infection probability in out in the wild as 0 (needs to be included for SIRS ODE equations)  #Infection probability of 0.1 ml of saliva being transferred between deer on contact nu_dc_deer_deer_null <- calc_nu_dc(C_nu = C_nu_deer, nsamples = nsamples) #Calculate infection probability  #Infection probability calculation of aerosol transmission from humans-to-deer t_contact_deer_human_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\") #Estimate duration of human-deer proximity event in ranch facility context... nu_aero_deer_human_ranch <- calc_nu_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_ranch / 60,                                         r = r_deer, nsamples = nsamples)#... and calculate infection probability given the duration of a human-deer proximity event. nu_aero_deer_human_wild_null <- rep(0, nsamples)#Estimate human-to-deer infection probability out in the wild as 0 (needs to be included for SIRS ODE equations)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"recovery-and-immunity-loss-rates","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations > Outdoor captive ranch","what":"Recovery and Immunity Loss Rates","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"simulations, animals recover infection given rate (gamma_recov), lose immunity become susceptible given rate (alpha_immunity). use recovery rate based 6 day infectious period (Palmer et al. 2021), immunity loss rate based expert elicited estimates. recovery rate repeated across iterations simulation (nsamples). immunity loss rate derived [nsamples] draws error distribution estimated expert elicitation process.","code":"gamma_recov <- rep(1/6, nsamples) alpha_immunity_null <- 1 / get_EE_param_vals(data = elicitation_data, my_param = 'Temporary Immunity')"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"compile-parameters-and-run-sirs-ode-solver-for-context","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations > Outdoor captive ranch","what":"Compile parameters and run SIRS ODE solver for context","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Now parameters defined SIRS model, run three functions define starting conditions, arrange parameters defined calculated derived parameters, run ODE solver. look proj.ranch object, can see items stored first list item, including iteration identifier (run_id), initial compartment sizes (inits), SIRS parameters (params), start end projected infection ranch context. can now continue run ODE solver contexts. new parameters defined context; several referenced ranch context .","code":"captive.inits <- initial_compartments(S_wild_prop = 0, draws = nsamples)  ranch.params <- alternative(alpha_immunity = alpha_immunity_null,                             c_ww = c_ww_ranch, c_cw = c_cw_null,c_cc = c_cc_ranch,                             c_hw = c_hw_ranch, c_hc = c_hc_ranch,                             nu_aero_deer_deer_wild = nu_aero_deer_deer_wild_null, nu_aero_deer_deer_captive = nu_aero_deer_deer_ranch, nu_aero_deer_human_wild = nu_aero_deer_human_wild_null, nu_aero_deer_human_capt = nu_aero_deer_human_ranch, sigma_dc = sigma_dc, nu_dc_deer_deer = nu_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj.ranch <- run(iter = nsamples, initial_compartments = captive.inits, parameters = ranch.params, times = times, name = \"Outdoor ranch\") proj.ranch$run_id[1] #> [1] 1 proj.ranch$inits[1] #> [[1]] #>    S_wild    I_wild    R_wild S_captive I_captive R_captive  #>         0         0         0         1         0         0 proj.ranch$params[1] #> [[1]] #> alpha_immunity   beta_aero_ww   beta_aero_cw   beta_aero_cc   beta_aero_hw  #>   0.0078654614   0.0000000000   0.0000000000   0.1564436786   0.0000000000  #>   beta_aero_hc     beta_dc_ww     beta_dc_cw     beta_dc_cc    gamma_recov  #>   0.0001100403   0.0000000000   0.0000000000   0.0039325117   0.1666666667  #>        I_human          boost  #>   0.0500000000   0.0000000000 head(proj.ranch$ode_proj[[1]]) #>      time S_wild I_wild R_wild S_captive    I_captive    R_captive #> [1,]    0      0      0      0 1.0000000 0.000000e+00 0.000000e+00 #> [2,]    1      0      0      0 0.9999941 5.484743e-06 4.552724e-07 #> [3,]    2      0      0      0 0.9999873 1.093505e-05 1.814661e-06 #> [4,]    3      0      0      0 0.9999796 1.635111e-05 4.065383e-06 #> [5,]    4      0      0      0 0.9999711 2.173310e-05 7.196358e-06 #> [6,]    5      0      0      0 0.9999617 2.708124e-05 1.119294e-05 tail(proj.ranch$ode_proj[[1]]) #>        time S_wild I_wild R_wild S_captive    I_captive   R_captive #> [116,]  115      0      0      0 0.9960029 0.0004408439 0.003556224 #> [117,]  116      0      0      0 0.9959550 0.0004432580 0.003601749 #> [118,]  117      0      0      0 0.9959070 0.0004456517 0.003647316 #> [119,]  118      0      0      0 0.9958591 0.0004480252 0.003692923 #> [120,]  119      0      0      0 0.9958111 0.0004503785 0.003738564 #> [121,]  120      0      0      0 0.9957631 0.0004527118 0.003784237"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"intensive-captive-facility","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","what":"Intensive captive facility","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"considered captive deer held facility focused captive breeding exposition. Deer facility predominantly indoors high stocking densities low indoor air exchange rates (AER; 1-hr). estimated proximity rates duration proximity using expert elicitation.","code":"c_ww_intensive <- rep(0, nsamples) c_cc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Deer Proximity Rate, Captive (per day)\") c_hw_intensive <- rep(0, nsamples) c_hc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120  nu_aero_deer_deer_intensive <- calc_nu_aero(C_nu = C_nu_deer,                                             t_contact = t_contact_deer_deer_null / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  t_contact_deer_human_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")   nu_aero_deer_human_intensive <- calc_nu_aero(ER = 0.53, C_nu = C_nu_human,                                              t_contact = t_contact_deer_human_intensive / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  intensive.params <- alternative(    c_ww = c_ww_intensive, c_cw = c_cw_null, c_cc = c_cc_intensive,     c_hw = c_hw_intensive, c_hc = c_hc_intensive,     nu_aero_deer_deer_wild = nu_aero_deer_human_wild_null, nu_aero_deer_deer_captive =  nu_aero_deer_deer_intensive, nu_aero_deer_human_wild = nu_aero_deer_human_wild_null, nu_aero_deer_human_capt = nu_aero_deer_human_intensive, nu_dc_deer_deer = nu_dc_deer_deer_null,    alpha_immunity = alpha_immunity_null, sigma_dc = sigma_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj.intensive <- run(iter = nsamples, initial_compartments = captive.inits, parameters = intensive.params, times = times, name = \"Intensive facility\")"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"wild-deer-in-rural-conditions","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","what":"Wild deer in rural conditions","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"context, wild deer free-ranging area rural human density (3.1 humans/km2). assumed deer context subject regulated hunting either using still-hunting, ground blind treestand approaches. also assumed baiting backyard feeding illegal may still occur. used Habib et al.’s (2011) proximity rate model. estimated duration deer-deer proximity events, rates duration human-deer proximity events using expert elicitation.","code":"c_ww_rural <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild, sigma_season = 1) c_cc_rural <- rep(0, nsamples) c_hw_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") /120 c_hc_rural <- rep(0, nsamples)  t_contact_deer_human_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Rural (minutes)\")  nu_aero_deer_deer_rural <- calc_nu_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  nu_aero_deer_deer_captive_null <- rep(0, nsamples)  nu_aero_deer_human_rural <- calc_nu_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_rural / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  nu_aero_deer_human_captive_null <- rep(0, nsamples)  wild.inits <- initial_compartments(S_captive_prop = 0, draws = nsamples)  rural.params <- alternative(c_ww = c_ww_rural, c_cw = c_cw_null, c_cc = c_cc_rural, c_hw = c_hw_rural, c_hc = c_hc_rural, nu_aero_deer_deer_wild = nu_aero_deer_deer_rural, nu_aero_deer_deer_captive = nu_aero_deer_deer_captive_null, nu_aero_deer_human_wild = nu_aero_deer_human_rural,  nu_aero_deer_human_capt = nu_aero_deer_human_captive_null, nu_dc_deer_deer = nu_dc_deer_deer_null,alpha_immunity = alpha_immunity_null, sigma_dc = sigma_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj.rural <- run(iter = nsamples, initial_compartments = wild.inits, parameters = rural.params, times = times, name = \"Wild, rural\")"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"wild-deer-in-suburban-conditions","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","what":"Wild deer in suburban conditions","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Wild deer free-ranging area suburban human density (100 humans/km2). Deer--deer proximity rates derived using parameters used rural setting. primary difference context wild, rural context higher human--deer proximity rates longer duration proximity events estimated expert elicitation.","code":"c_ww_suburban <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild, sigma_season = 1) c_cc_suburban <- rep(0, nsamples) c_hw_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 c_hc_suburban <- rep(0, nsamples)  t_contact_deer_human_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Suburban (minutes)\")  nu_aero_deer_deer_suburban <- calc_nu_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  nu_aero_deer_human_suburban <- calc_nu_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_suburban / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  suburban.params <- alternative(c_ww = c_ww_suburban, c_cw = c_cw_null, c_cc = c_cc_suburban, c_hw = c_hw_suburban, c_hc = c_hc_suburban, nu_aero_deer_deer_wild = nu_aero_deer_deer_suburban, nu_aero_deer_deer_captive = nu_aero_deer_deer_captive_null, nu_aero_deer_human_wild = nu_aero_deer_human_suburban,  nu_aero_deer_human_capt = nu_aero_deer_human_captive_null, nu_dc_deer_deer = nu_dc_deer_deer_null,alpha_immunity = alpha_immunity_null, sigma_dc = sigma_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj.suburban <- run(iter = nsamples, initial_compartments = wild.inits, parameters = suburban.params, times = times, name = \"Wild, suburban\")"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"compile-dataset-across-all-contexts","dir":"Articles","previous_headings":"","what":"Compile dataset across all contexts","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Finally, going summarize four measurements iteration summarize across contexts. First, combine projections context one list object, summarize average prevalence (Infected) SARS-CoV-2 persists end 120-day projection (Persists). save resulting summary dataframe future use. Next, step context’s parameters estimate strength introduction (quantified force--infection) spread (quantified basic reproductive number R0). combine prevalence persistence summary create dataset visualized another vignette. develop plots tables results data frame. simple summary end vignette, median spread (R0), probability introduction humans (FOI, log10-transformed), average prevalence 120-day fall projection (Prevalence), infections end 120-day fall projection (Persistence).","code":"sirs_results_contexts <- rbind(proj.ranch,proj.intensive, proj.rural, proj.suburban)  sirs_results_contexts %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(sirs_results_contexts$Context)[1],length(times)*nsamples),rep(unique(sirs_results_contexts$Context)[2],length(times)*nsamples), rep(unique(sirs_results_contexts$Context)[3],length(times)*nsamples),rep(unique(sirs_results_contexts$Context)[4],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%    summarize(Wild = mean(I_wild), Captive = mean(I_captive), Infected = Wild + Captive, Persist_wild = last(I_wild) >=0.0001, Persist_captive = last(I_captive) >=0.0001, Persist = as.logical(Persist_wild + Persist_captive)) %>%    mutate(., Context = factor(Context, levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) %>%     select(., -Wild, -Captive, -Persist_wild, -Persist_captive) %>%    group_by(.,Context) %>%    arrange(., Context, run_id) -> Prev_Persist_df  head(Prev_Persist_df) #> # A tibble: 6 × 4 #> # Groups:   Context [1] #>   Context       run_id Infected Persist #>   <fct>          <int>    <dbl> <lgl>   #> 1 Outdoor ranch      1 0.000258 TRUE    #> 2 Outdoor ranch      2 0.0549   TRUE    #> 3 Outdoor ranch      3 0.0230   TRUE    #> 4 Outdoor ranch      4 0.0446   TRUE    #> 5 Outdoor ranch      5 0.0505   TRUE    #> 6 Outdoor ranch      6 0.000804 TRUE ranch.df <- list_cbind(map(ranch.params, as_data_frame)) colnames(ranch.df) <-  names(ranch.params) ranch.df %>%    mutate(., run_id = min(Prev_Persist_df[which(Prev_Persist_df$Context==\"Outdoor ranch\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Outdoor ranch\", Setting = \"Captive\") %>%    select(., run_id, Context,  Setting, r0, FOI) -> ranch.r0.FOI  intensive.df <- list_cbind(map(intensive.params, as_data_frame)) colnames(intensive.df) <-  names(intensive.params) intensive.df %>%    mutate(., run_id = min(Prev_Persist_df[which(Prev_Persist_df$Context==\"Intensive facility\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Intensive facility\", Setting = \"Captive\") %>%    select(., run_id, Context,  Setting, r0, FOI) -> intensive.r0.FOI  rural.df <- list_cbind(map(rural.params, as_data_frame)) colnames(rural.df) <-  names(rural.params) rural.df %>%    mutate(., run_id = min(Prev_Persist_df[which(Prev_Persist_df$Context==\"Wild, rural\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Wild, rural\", Setting = \"Wild\") %>%    select(., run_id, Context, Setting,  r0, FOI) -> rural.r0.FOI  suburban.df <- list_cbind(map(suburban.params, as_data_frame)) colnames(suburban.df) <-  names(suburban.params) suburban.df %>%    mutate(., run_id = min(Prev_Persist_df[which(Prev_Persist_df$Context==\"Wild, suburban\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Wild, suburban\", Setting = \"Wild\") %>%    select(., run_id, Context, Setting, r0, FOI) -> suburban.r0.FOI  r0.FOI <- rbind(ranch.r0.FOI,intensive.r0.FOI, rural.r0.FOI,suburban.r0.FOI)  #Merge with average prevalence (step 1) and persistence (step 2) merge(r0.FOI,Prev_Persist_df[,c(\"run_id\",\"Infected\", \"Persist\")], by = \"run_id\", all.x = TRUE) %>%    mutate(Context = factor(Context,  levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) -> df df %>%    group_by(., Context) %>%    reframe(., R0.Median = quantile(r0,probs = c(0.5)), FOI.Median = log10(quantile(FOI,probs = c(0.5))), Prevalence.Median = quantile(Infected, probs = c(0.5)), Persistence.Median = sum(Persist)/nsamples) #> # A tibble: 4 × 5 #>   Context            R0.Median FOI.Median Prevalence.Median Persistence.Median #>   <fct>                  <dbl>      <dbl>             <dbl>              <dbl> #> 1 Outdoor ranch          1.76       -5.11        0.0403                  0.82  #> 2 Intensive facility     6.44       -4.70        0.0705                  0.965 #> 3 Wild, rural            0.865      -7.04        0.00000871              0.435 #> 4 Wild, suburban         0.865      -5.76        0.000116                0.53"},{"path":"/articles/Visualize_by_context.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Summarize introduction, spread, prevalence, and persistence","text":"Now dataset simulations, can begin visualize various characteristics outbreaks differ contexts. figures used published results. , load dataset remind R many iterations run context (nsamples).","code":"df <- whitetailedSIRS::example_results nsamples <- 200"},{"path":"/articles/Visualize_by_context.html","id":"prevalence-and-persistence","dir":"Articles","previous_headings":"","what":"Prevalence and Persistence","title":"Summarize introduction, spread, prevalence, and persistence","text":"","code":"ggplot(df, aes(x = Context, y = Infected*100)) +   geom_boxplot()+   stat_summary(fun=mean, geom=\"point\", shape=\"+\", size=8) +   theme_classic()+   scale_y_continuous(\"Average prevalence (%)\")+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> prevalence  #plot persistence group_by(df, Context) %>%    summarize(., Persistence = sum(Persist)) %>%    mutate(LCL = binom.confint(Persistence, n = nsamples, methods = \"exact\")$lower, pred = binom.confint(Persistence, n = nsamples, methods = \"exact\")$mean ,UCL = binom.confint(Persistence, n = nsamples, methods = \"exact\")$upper) %>%    mutate(Context = factor(Context, levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) %>%    ggplot(., aes(x = Context, y = pred))+   geom_point()+   geom_errorbar(aes(ymin = LCL, ymax = UCL))+   scale_fill_grey()+   theme_classic()+   scale_y_continuous(\"Probability of persistence\", limits = c(0,1))+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> persistence  ggpubr::ggarrange(prevalence, persistence,nrow =1, ncol=2)"},{"path":"/articles/Visualize_by_context.html","id":"strength-of-introduction-foi-and-spread-r0","dir":"Articles","previous_headings":"","what":"Strength of introduction (FOI) and spread (R0)","title":"Summarize introduction, spread, prevalence, and persistence","text":"","code":"#plot r0 ggplot(df, aes(x = Context, y = r0)) +   geom_boxplot()+   stat_summary(fun=mean, geom=\"point\", shape=\"+\", size=8) +   theme_classic()+   geom_hline(yintercept = 1)+   scale_y_continuous(\"Basic reproductive number (r0)\", limits = c(0,20))+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> r0  #plot FOI ggplot(df, aes(x = Context, y = log10(FOI))) +   geom_boxplot()+   stat_summary(fun.y=mean, geom=\"point\", shape=\"+\", size=8) +   theme_classic()+   scale_y_continuous(\"Spillover hazard from humans (FOI)\", limits = c(-8,-2), breaks = c(-6,-5,-4,-3), labels = c(\"1:10^6\",\"1:10^5\", \"1:10^4\", \"1:10^3\"))+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> FOI  ggpubr::ggarrange(r0, FOI,nrow =1, ncol=2)"},{"path":"/articles/Visualize_by_context.html","id":"interaction-between-strengths-of-introduction-and-spread-and-prevalence-and-persistence-","dir":"Articles","previous_headings":"","what":"Interaction between strengths of introduction and spread, and prevalence and persistence.","title":"Summarize introduction, spread, prevalence, and persistence","text":"","code":"#Composite plot showing how R0 and FOI interact to impact prevelence df %>%    mutate(., r0_bin = case_when(r0 <= 1 ~ \"Unsustained spread\",                                r0 > 1 & r0 <= 3 ~ \"Low spread\",                                r0 > 3 & r0 <= 5 ~ \"Medium spread\",                                r0 > 5 ~ \"High spread\"),           r0_bin = factor(r0_bin, levels = c(\"Unsustained spread\",\"Low spread\",\"Medium spread\",\"High spread\"))) %>%   ggplot(., aes(log10(FOI),Infected*100))+   geom_point(aes(color = Context))+   facet_grid(.~r0_bin)+   scale_color_manual(values = c(\"black\",\"gray80\", \"#66A61E\",\"#66D61E\"))+   stat_smooth(method = \"glm\", method.args = list(family=quasi(link='log')), formula = y~x, color = \"black\")+   scale_y_continuous(name = \"Average prevalence (%)\", limits = c(0,20))+   theme_classic()+   theme(strip.text = element_text(size = 12),         axis.text.x = element_blank(),         axis.title.x = element_blank(),         axis.title.y = element_text(size = 12),axis.text.y = element_text(size = 10), legend.text = element_text(size=10), legend.title = element_text(size=12)) -> Prevalence.plot  df %>%    mutate(., r0_bin = case_when(r0 <= 1 ~ \"Unsustained spread\",                                r0 > 1 & r0 <= 3 ~ \"Low spread\",                                r0 > 3 & r0 <= 5 ~ \"Medium spread\",                                r0 > 5 ~ \"High spread\"),           r0_bin = factor(r0_bin, levels = c(\"Unsustained spread\",\"Low spread\",\"Medium spread\",\"High spread\"))) %>%   ggplot(., aes(log10(FOI),as.numeric(Persist)))+   geom_point(aes(color = Context))+   scale_color_manual(values = c(\"black\",\"gray80\", \"#66A61E\",\"#66D61E\"))+   facet_grid(.~r0_bin)+   stat_smooth(method = \"glm\",method.args = list(family = \"binomial\"), se = F, color = \"gray20\")+   scale_y_continuous(name = \"Probability of SARS-CoV-2 persisting\", limits = c(0,1), breaks = c(0,0.5,1))+   scale_x_continuous(name = \"Human-to-deer Force-of-Infection (FOI)\", breaks = c(-9,-6,-4), labels = c(\"1:10^9\",\"1:10^6\",\"1:10 000\"))+   theme_classic() +   theme(axis.title = element_text(size = 12), axis.text = element_text(size = 10), strip.text = element_blank(), legend.text = element_text(size=10), legend.title = element_text(size=12)) ->  Persistence.plot  ggpubr::ggarrange(Prevalence.plot, Persistence.plot, nrow =2, ncol=1, common.legend = T)+   annotate(\"label\", x = 0.1, y = .8, label = \"A\", fill = \"white\", size = 6) +   annotate(\"label\", x = 0.1, y = .4, label = \"B\", fill = \"white\", size = 6)"},{"path":"/articles/sir_model_description.html","id":"beta-definitions","dir":"Articles","previous_headings":"","what":"2.3. \\(\\beta\\) Definitions","title":"sir_model_description","text":"Several \\(\\beta\\) values included model incorporate various direct transmission pathways (superscripts outlined Section 2.2) wild deer, captive deer, humans (subscripts outlined Section 2.2). basic structure \\(\\beta\\) values product proximity contact rate infection probability given contact.","code":""},{"path":"/articles/sir_model_description.html","id":"aerosol-transmission","dir":"Articles","previous_headings":"2.3. \\(\\beta\\) Definitions","what":"2.3.1. Aerosol Transmission","title":"sir_model_description","text":"Aerosolized transmission rates (\\(\\beta^{Aero}\\)) product rate susceptible individual enters shared airspace infected individual (within 1.5m) probability infection given proximity. detail deer-deer proximity rates wild, captivity, across fence lines separating settings (Section 2.3.1.1), human-deer proximity rates wild captive environments (Section 2.3.1.2), infection probability given proximity (Section 2.3.1.3). build transmission rates (\\(\\beta^{Aero}\\)) deer humans deer various settings (Section 2.3.1.4).","code":""},{"path":"/articles/sir_model_description.html","id":"deer-deer-proximity-rates","dir":"Articles","previous_headings":"2.3. \\(\\beta\\) Definitions > 2.3.1. Aerosol Transmission","what":"2.3.1.1. Deer-deer proximity rates","title":"sir_model_description","text":"Wild deer - per capita rate proximity deer wild likely density dependent, though previous research concluded frequency-dependent (proportion population infected) transmission plays role well disease ecology (Smith et al. 2009). Habib et al. (2011) estimated intermediate density dependence across various densities white-tailed deer habitat availability eastern Alberta, Canada. use Habib et al.’s (2011) calculation daily proximity rate using varying deer densities seasonal variation white-tailed deer behavior (\\(\\sigma_{season}\\); estimated Williams et al. 2014; Table 1, Appendix 2). estimate intermediate density dependence using deer per 100 km2 match inferences original model developed Habib et al. (2011). \\[\\begin{align} \\text{proximity rate, wild} \\sim \\sigma_{season} \\cdot c \\bigg( \\frac{N^{1-q}}{} \\bigg) \\end{align}\\] : - \\(\\sigma_{season}\\) : season scaling (derived Williams et al 2014; Appendix ) - \\(c\\) : contact scaling constant (influences slope density-contact relationship; reported Habib et al. 2011; Appendix ) - \\(N\\) : total population size - \\(q\\) : concavity scaling constant (0-1, 0 equating density dependence 1 equating frequency dependence; reported Habib et al. 2011, Appendix ) - \\(\\) : area inhabited N Captive deer - per capita rate proximity deer captivity unstudied likely highly dependent facility type practices. lower density facilities mimic natural densities natural conditions estimate proximity rates based calculation wild populations (Eq. 11). use expert-elicited estimates deer proximity rates (proximity events per day) higher intensity captive operations (\\(c_{CC}\\)). Fence line interactions – estimate per capita proximity rates along fence lines separating wild captive deer herds using multiple estimates derived literature (\\(c_{WC}\\)).","code":""},{"path":"/articles/sir_model_description.html","id":"human-deer-proximity-rates","dir":"Articles","previous_headings":"2.3. \\(\\beta\\) Definitions > 2.3.1. Aerosol Transmission","what":"2.3.1.2. Human-deer proximity rates","title":"sir_model_description","text":"Human - wild deer proximity rates – Human-deer interactions understudied literature, instead use expert elicitation estimate rate proximity humans deer wild conditions (\\(c_{HW}\\)). expert elicitation process estimated human-deer proximity rates two scenarios differed human density development, reflecting rural suburban conditions. Human – captive deer proximity rates – used expert elicitation estimate human-deer proximity rate intensive captive facilities, reflecting range activities including operational tasks, routine veterinary tasks, visitors interacting captive animals. used general description provide general, initial estimate unstudied proximity rate (\\(c_{HC}\\)), acknowledging rate likely enterprise- facility-specific.","code":""},{"path":"/articles/sir_model_description.html","id":"infection-probability-given-proximity","dir":"Articles","previous_headings":"2.3. \\(\\beta\\) Definitions > 2.3.1. Aerosol Transmission","what":"2.3.1.3 Infection probability given proximity","title":"sir_model_description","text":"probability infection (\\(\\nu^{Aero}\\)) given proximity function instantaneous dose received dose response relationship. estimate dose received susceptible individual proximity infected individual, model 1) emission SARS-CoV-2 infected individual, 2) resulting concentration SARS-CoV-2 designated airspace around infected individual, considering virus emission virus loss, 3) amount SARS-CoV-2 inhaled susceptible individual given proximity infected individual. parameters exist literature focused human SARS-CoV-2 infection can adopted . First, infected individual emits SARS-CoV-2 particular rate (\\(ER_q\\); quanta/hr) product viral load sputum (\\(C_{\\nu}\\); RNA copies/ml), conversion factor (\\(C_i\\); quanta/RNA copy), inhalation/exhalation rate (\\(IR\\); \\(m^3\\)/hr), exhaled droplet volume concentration (\\(V_d\\); ml exhaled droplets/\\(m^3\\) exhaled; Mikszewski et al. 2021). \\[\\begin{align} {ER}_q = C_{\\nu} \\cdot C_i \\cdot {IR} \\cdot V_d \\end{align}\\] can model instantaneous concentration SARS-CoV-2 (\\(C\\); quanta/\\(m^3\\)) well-mixed airspace around infected individual emitting SARS-CoV-2 (\\({ER}_q\\); quanta/hr) fixed volume (\\(V\\); \\(m^3\\)), accounting loss rate (\\({IVRR}\\); \\(hr^{-1}\\)) sum air exchange (\\({AER}\\); \\(hr^{-1}\\)), settling (\\(s\\); \\(hr^{-1}\\), inactivation rates (\\(\\lambda\\); \\(hr^{-1}\\); modified Buonanno et al. 2020). \\[\\begin{align} C = \\frac{{ER}_q}{{IVRR} \\cdot V} \\end{align}\\] \\[\\begin{align} {IVRR} = {AER} + s + \\lambda \\end{align}\\] susceptible individual enters contaminated airspace surrounding infected individual, dose (\\(Q_A\\); quanta) product inhalation rate susceptible individual (\\(IR\\); \\(m^3\\)/hr), concentration SARS-CoV-2 fixed volume (\\(C\\); quanta/\\(m^3\\)), duration time susceptible individual stays within contaminated airspace contact (\\(t_{contact}\\); hr). \\[\\begin{align} Q = IR \\cdot C \\cdot t_{contact} \\end{align}\\] amount SARS-CoV-2 inhaled susceptible deer (\\(Q_A\\)) converted probability infection using Wells-Riley infection model (Equation 8). model, probability individual developing sustaining infection SARS-CoV-2 function dose received (measured quanta; \\(Q\\)) species-specific probability infection 1 quantum (\\(r\\); \\(r_{human} = 1\\) corresponds 1 quantum causing infection 63% susceptible individuals; HID63). use expert elicitation estimate dose response relationship white-tailed deer (\\(r_{deer}\\)). \\[\\begin{align} \\nu^{Aero} = 1 - e^{-rQ} \\end{align}\\] dose received probability infection calculated deer-deer human-deer proximity events based species-specific exhalation/inhalation rate, viral loads, dose response relationships, various durations proximity events particular contexts.","code":"calc_nu_aero <- function(AER,                          s,                          lambda,                          C_nu,                          C_i,                          IR,                          V_d,                          V_air,                          t_contact,                          r) {        # Calculate the viral particle loss rate as the sum     # of air exchange, settling rate, and inactivation    IVRR <- AER + s + lambda        # calculate emission rate of viral particles    ER_q <- C_nu * C_i * IR * V_d        # Calculate instantaneous concentration of viral particles.    C_inst <- ER_q / (IVRR * V_air) #V_air is airspace volume        # Calculate viral dose in quanta as product of     # inhalation rate, instantaneous concentration of viral particles    # and the duration of the contact    Q <- IR * C_inst * t_contact        # Use Wells-Riley model to transform amount of virus inhaled    # into a probability of infection via aerosol    nu_aero <- 1 - exp(-r * Q)        return(nu_aero) }"},{"path":"/articles/sir_model_description.html","id":"aerosol-transmission-rates-betaaero","dir":"Articles","previous_headings":"2.3. \\(\\beta\\) Definitions > 2.3.1. Aerosol Transmission","what":"2.3.1.4 Aerosol transmission rates (\\(\\beta^{Aero}\\))","title":"sir_model_description","text":"various aerosol transmission rates used SIRS model. Parameter values listed Table 1. Aerosol transmission wild deer: \\[\\begin{align} \\beta_{WW}^{Aero} = \\sigma_{season} \\cdot c \\bigg(\\frac{N_W^{(1-q)}}{A_W} \\bigg) \\cdot \\nu^{Aero} \\end{align}\\] \\(\\sigma_{season}\\) = seasonal adjustment density-contact relationship (Section 2.3.1.1) \\(c\\) = scaling constant \\(q\\) = concavity scaling constant \\(N_W\\) = Total wild population size \\(A_W\\) = Area inhabited wild population \\(\\nu^{Aero}\\) = Probability infection aerosols (Section 2.3.1.3) Aerosol transmission captive deer: \\[\\begin{align} \\beta_{CC}^{Aero} = c_{CC} \\cdot \\nu^{Aero} \\end{align}\\] \\(c_{CC}\\) = Captivity proximity rate (Section 2.3.1.1) \\(\\nu^{Aero}\\) = Probability infection aerosols (Section 2.3.1.3) Aerosol transmission wild captive deer across fence: \\[\\begin{align} \\beta_{CW}^{Aero} = c_{WC} \\cdot \\nu^{Aero} \\end{align}\\] \\(c_{WC}\\) = Fence line proximity rate wild captive deer (Section 2.3.1.1) \\(\\nu^{Aero}\\) = Probability infection aerosols (Section 2.3.1.3) Aerosol transmission humans wild deer: \\[\\begin{align} \\beta_{HW}^{Aero} = c_{HW} \\cdot \\nu^{Aero} \\end{align}\\] \\(c_{HW}\\) = Proximity rate humans wild deer (Section 2.3.1.2) \\(\\nu^{Aero}\\) = Probability infection aerosols (Section 2.3.1.3) Aerosol transmission humans captive deer: \\[\\begin{align} \\beta_{HC}^{Aero} = c_{HC} \\cdot \\nu^{Aero} \\end{align}\\] \\(c_{HC}\\) = Proximity rate humans captive deer (Section 2.3.1.2) \\(\\nu^{Aero}\\) = Probability infection aerosols (Section 2.3.1.3)","code":""},{"path":"/articles/sir_model_description.html","id":"fluid-transmission","dir":"Articles","previous_headings":"2.3. \\(\\beta\\) Definitions","what":"2.3.2 Fluid Transmission","title":"sir_model_description","text":"transmission rate SARS-CoV-2 via fluid transfer direct contact (\\(\\beta^{DC}\\)) product rate susceptible individual enters shared airspace infected individual (within 1.5m), probability two individuals making physical contact, probability infection given contact. simply take deer-deer proximity rates detailed (Section 2.3.1.1) multiply expert-elicited estimates physical contact probability (\\(\\sigma^{DC}\\)) determine rate physical contact. detail infection probability given physical contact (Section 2.3.2.1). build transmission rates (\\(\\beta^{Aero}\\)) deer (Section 2.3.2.2). consider transmission pathway deer, human deer. paragraph , towards end, transmission rates \\(\\beta^{Aero}\\), think \\(\\beta^{DC}\\).","code":""},{"path":"/articles/sir_model_description.html","id":"infection-probability-given-physical-contact","dir":"Articles","previous_headings":"2.3. \\(\\beta\\) Definitions > 2.3.2 Fluid Transmission","what":"2.3.2.1 Infection probability given physical contact","title":"sir_model_description","text":"use Wells-Riley dose response model estimates infection probability log-logistic function dose (\\(d^{dc}\\); plaque-forming units, PFU) dose-response function (\\(k\\); Watanabe et al. 2010). dose received product typical volume sputum transferred given contact (\\(V^{DC}\\)) concentration SARS-CoV-2 sputum (\\(C_{\\nu}\\)). initially assume contact 100\\(\\mu\\)l sputum transferred individuals making contact. adjust volume across simulations identify volume threshold rapidly increases transmission risk. \\[\\begin{align} \\nu^{DC} = 1 - e^{-(d^{DC}/k)} \\end{align}\\] \\[\\begin{align} d^{DC} = V^{DC} \\cdot C_{\\nu} \\cdot pfuConv \\end{align}\\]","code":"# function for nu_direct_contact  calc_nu_DC<- function(V_DC, C_nu, pfu_conv, k){        # calculate dose received as function of volume of sputum and viral particles concentration    d_DC <- V_DC * C_nu * pfu_conv        # calculate infection probability     nu_DC <- 1 - exp(-d_DC/k)        return(nu_DC) }"},{"path":"/articles/sir_model_description.html","id":"fluid-transmission-betadc","dir":"Articles","previous_headings":"2.3. \\(\\beta\\) Definitions > 2.3.2 Fluid Transmission","what":"2.3.2.2. Fluid Transmission (\\(\\beta^{DC}\\))","title":"sir_model_description","text":"various direct contact transmission rates used SIRS model. Parameter values listed Table 1. Direct contact transmission wild deer: \\[\\begin{align} \\beta_{WW}^{DC} = \\sigma_{season} \\cdot c \\cdot \\bigg( \\frac{N_W^{(1-q)}}{A_W} \\bigg) \\cdot \\sigma^{DC} \\cdot \\nu^{DC} \\end{align}\\] \\(\\sigma_{season}\\) = seasonal adjustment density-contact relationship (Section 2.3.1.1) \\(c\\) = scaling constant \\(q\\) = concavity scaling constant \\(N_W\\) = Total wild population size \\(A_W\\) = Area inhabited wild population \\(\\sigma^{DC}\\) = Probability deer making direct contact (Section 2.3.2.1) \\(\\nu^{DC}\\) = Probability infection direct contact (Section 2.3.2.2). Direct contact transmission captive deer: \\[\\begin{align} \\beta_{CC}^{DC} = c_{CC} \\cdot \\sigma^{DC} \\cdot \\nu^{DC} \\end{align}\\] \\(c_{CC}\\) = Captivity proximity rate (Section 2.3.1.1) \\(\\sigma^{DC}\\) = Probability physical contact (Section 2.3.2) \\(\\nu^{DC}\\) = Probability infection physical contact (Section 2.3.2.1) Direct contact transmission wild captive deer along fence line (assuming possible): \\[\\begin{align} \\beta_{CW}^{DC} = c_{WC} \\cdot \\sigma^{DC} \\cdot \\nu^{DC} \\end{align}\\] \\(c_{WC}\\) = Fenceline contact rate wild captive deer (Section 2.3.1.1) \\(\\sigma^{DC}\\) = Probability physical contact (Section 2.3.2) \\(\\nu^{DC}\\) = Probability infection physical contact (Section 2.3.2.1)","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Javi Rudolph. Author, maintainer. Fer Arce. Author, contributor. Elias Rosenblatt. Author, contributor. Jonathan Cook. Contributor. Graziella DiRenzo. Contributor. Brittany Mosher. Contributor. Mike Runge. Contributor. Evan Grant. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rudolph J, Arce F, Rosenblatt E (2023). whitetailedSIRS: Generate Deer Disease Dyanmics SIRS Framework. R package version 0.0.0.9000, https://github.com/disease-decision-analysis--research/whitetailedSIRS.","code":"@Manual{,   title = {whitetailedSIRS: Generate Deer Disease Dyanmics Under an SIRS Framework},   author = {Javi Rudolph and Fer Arce and Elias Rosenblatt},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/disease-decision-analysis-and-research/whitetailedSIRS}, }"},{"path":"/index.html","id":"whitetailedsirs","dir":"","previous_headings":"","what":"Generate Deer Disease Dyanmics Under an SIRS Framework","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"goal whitetailedSIRS provide simple package generate epidemic projections white tailed deer populations using Susceptible-Infected-Recovered-Susceptible (SIRS) modeling framework. outputs package ggplot friendly, part, use list-column workflow working multiple simulations. Details model can found vignettes.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"can install development version whitetailedSIRS GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"disease-decision-analysis-and-research/whitetailedSIRS\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"basic example run simple projection using base function:","code":"library(whitetailedSIRS) ## basic example code example_inits <- c(S_wild = 1,                     I_wild = 0,                     R_wild = 0,                    S_captive = 1,                    I_captive = 0,                    R_captive = 0)  # length of time to run this for   example_times <-  seq(0, 500, by = 1)  # The parameters we are using in the simulation example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     phi_cw = 0,                     phi_wc = 0,                     gamma_recov = 0.01,                     I_human = 0.05) library(deSolve) library(rootSolve)  example_out <- ode(y = example_inits, times = example_times, parms = example_params, func = whitetailedSIRS::simple_sirs)  example_eq <- runsteady(y = example_inits, parms = example_params, func = whitetailedSIRS::simple_sirs) library(tidyverse) example_out %>%     as_tibble() %>%     pivot_longer(-time, names_to = \"compartment\", values_to = \"proportion\") %>%     separate(compartment, sep = \"_\", c(\"sir_type\", \"pop_type\")) %>%     mutate(sir_type = factor(sir_type, levels = c(\"S\", \"I\", \"R\")),           pop_type = factor(pop_type, levels = c(\"wild\", \"captive\"))) %>%     ggplot(aes(x = time, y = proportion, color = sir_type, linetype = pop_type)) +    geom_line() +    labs(title = \"SIR dynamics\", y = \"Proportion of population\", x = \"Time in days\",         color = \"SIR\", linetype = \"Population type\") +    theme_bw() example_eq$y %>%     as_tibble_row() %>%     pivot_longer(cols = everything(), names_to = \"compartment\", values_to = \"proportion\") %>%     separate(compartment, sep = \"_\", c(\"sir_type\", \"pop_type\")) %>%     mutate(sir_type = factor(sir_type, levels = c(\"S\", \"I\", \"R\")),           pop_type = factor(pop_type, levels = c(\"wild\", \"captive\"))) %>%     ggplot(aes(x = sir_type,                alpha = pop_type,               y = proportion, fill = sir_type)) +    geom_col(position = \"dodge\") +    labs(title = \"Equilibrium proportions\", x = \"Compartment\", alpha = \"Population type\", fill = \"SIR\") +    scale_alpha_discrete(range = c(1, 0.4)) +    ylim(0, 1) +    theme_bw()"},{"path":"/reference/Epi_sirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple function to generate SIRS model projections — Epi_sirs","title":"Simple function to generate SIRS model projections — Epi_sirs","text":"Epi_sirs written work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points.","code":""},{"path":"/reference/Epi_sirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple function to generate SIRS model projections — Epi_sirs","text":"","code":"Epi_sirs(time, state, parameters)"},{"path":"/reference/Epi_sirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple function to generate SIRS model projections — Epi_sirs","text":"time vector values generate projection (length days). state initial state compartment populations. named vector starting values S_wild, I_wild, R_wild, S_captive, I_captive, R_captive. parameters list parameters generate projection. parameters include transmission parameters, immunity recovery rates, proportion infected humans.","code":""},{"path":"/reference/Epi_sirs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple function to generate SIRS model projections — Epi_sirs","text":"used deSolve::ode() function, return dataframe proportion individuals SIR compartments time point.","code":""},{"path":"/reference/Epi_sirs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple function to generate SIRS model projections — Epi_sirs","text":"","code":"# prepare the input parameters: example_inits <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, S_captive = 1,                    I_captive = 0, R_captive = 0)  # set the time to run example_times <-  seq(0, 500, by = 1) # Set parameters of transmission, immunity, recovery  example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     gamma_recov = 0.01,                     I_human = 0.05,                     boost = 0)  # run the ode function:  deSolve::ode(y = example_inits, times = example_times, parms = example_params, func = whitetailedSIRS::Epi_sirs) #>     time    S_wild       I_wild       R_wild S_captive  I_captive    R_captive #> 1      0 1.0000000 0.0000000000 0.000000e+00 1.0000000 0.00000000 0.000000e+00 #> 2      1 0.9993937 0.0006033453 2.972120e-06 0.9898960 0.01005447 4.952954e-05 #> 3      2 0.9985719 0.0014152679 1.282810e-05 0.9795861 0.02021672 1.971848e-04 #> 4      3 0.9975291 0.0024394532 3.143763e-05 0.9690747 0.03048420 4.411150e-04 #> 5      4 0.9962606 0.0036789666 6.042078e-05 0.9583659 0.04085440 7.797231e-04 #> 6      5 0.9947604 0.0051376972 1.019176e-04 0.9474655 0.05132361 1.210903e-03 #> 7      6 0.9930238 0.0068185479 1.576558e-04 0.9363788 0.06188829 1.732952e-03 #> 8      7 0.9910463 0.0087243155 2.294167e-04 0.9251115 0.07254442 2.344106e-03 #> 9      8 0.9888235 0.0108575342 3.189569e-04 0.9136698 0.08328762 3.042611e-03 #> 10     9 0.9863516 0.0132203970 4.280010e-04 0.9020602 0.09411306 3.826719e-03 #> 11    10 0.9836270 0.0158147917 5.582446e-04 0.8902898 0.10501553 4.694687e-03 #> 12    11 0.9806464 0.0186422575 7.113503e-04 0.8783658 0.11598946 5.644766e-03 #> 13    12 0.9774071 0.0217039608 8.889445e-04 0.8662959 0.12702886 6.675204e-03 #> 14    13 0.9739067 0.0250006762 1.092615e-03 0.8540884 0.13812738 7.784242e-03 #> 15    14 0.9701433 0.0285327644 1.323910e-03 0.8417516 0.14927827 8.970104e-03 #> 16    15 0.9661155 0.0323001547 1.584329e-03 0.8292946 0.16047443 1.023100e-02 #> 17    16 0.9618223 0.0363023277 1.875330e-03 0.8167265 0.17170841 1.156513e-02 #> 18    17 0.9572634 0.0405382982 2.198316e-03 0.8040569 0.18297243 1.297065e-02 #> 19    18 0.9524388 0.0450066010 2.554638e-03 0.7912959 0.19425837 1.444571e-02 #> 20    19 0.9473491 0.0497052787 2.945591e-03 0.7784537 0.20555783 1.598844e-02 #> 21    20 0.9419957 0.0546318712 3.372409e-03 0.7655410 0.21686212 1.759692e-02 #> 22    21 0.9363803 0.0597834082 3.836263e-03 0.7525685 0.22816231 1.926922e-02 #> 23    22 0.9305053 0.0651564035 4.338258e-03 0.7395474 0.23944927 2.100335e-02 #> 24    23 0.9243737 0.0707468522 4.879429e-03 0.7264890 0.25071363 2.279733e-02 #> 25    24 0.9179890 0.0765502310 5.460738e-03 0.7134050 0.26194590 2.464910e-02 #> 26    25 0.9113554 0.0825615008 6.083072e-03 0.7003070 0.27313645 2.655660e-02 #> 27    26 0.9044776 0.0887751127 6.747240e-03 0.6872067 0.28427555 2.851773e-02 #> 28    27 0.8973610 0.0951850166 7.453969e-03 0.6741162 0.29535344 3.053033e-02 #> 29    28 0.8900114 0.1017846729 8.203903e-03 0.6610474 0.30636033 3.259225e-02 #> 30    29 0.8824353 0.1085670677 8.997600e-03 0.6480123 0.31728644 3.470126e-02 #> 31    30 0.8746397 0.1155247296 9.835530e-03 0.6350228 0.32812207 3.685515e-02 #> 32    31 0.8666322 0.1226497512 1.071807e-02 0.6220908 0.33885761 3.905164e-02 #> 33    32 0.8584207 0.1299338118 1.164552e-02 0.6092280 0.34948358 4.128843e-02 #> 34    33 0.8500137 0.1373682032 1.261807e-02 0.5964461 0.35999071 4.356323e-02 #> 35    34 0.8414203 0.1449438585 1.363582e-02 0.5837564 0.37036992 4.587367e-02 #> 36    35 0.8326498 0.1526513823 1.469878e-02 0.5711702 0.38061237 4.821741e-02 #> 37    36 0.8237120 0.1604810834 1.580688e-02 0.5586984 0.39070954 5.059208e-02 #> 38    37 0.8146171 0.1684230094 1.695992e-02 0.5463515 0.40065322 5.299528e-02 #> 39    38 0.8053754 0.1764669821 1.815764e-02 0.5341398 0.41043553 5.542463e-02 #> 40    39 0.7959977 0.1846026354 1.939966e-02 0.5220733 0.42004899 5.787772e-02 #> 41    40 0.7864950 0.1928194528 2.068554e-02 0.5101613 0.42948655 6.035215e-02 #> 42    41 0.7768785 0.2011068067 2.201472e-02 0.4984129 0.43874156 6.284552e-02 #> 43    42 0.7671594 0.2094539972 2.338657e-02 0.4868367 0.44780783 6.535545e-02 #> 44    43 0.7573494 0.2178502916 2.480035e-02 0.4754408 0.45667967 6.787956e-02 #> 45    44 0.7474598 0.2262849633 2.625527e-02 0.4642327 0.46535184 7.041549e-02 #> 46    45 0.7375022 0.2347473302 2.775042e-02 0.4532195 0.47381964 7.296089e-02 #> 47    46 0.7274884 0.2432267924 2.928485e-02 0.4424077 0.48207886 7.551346e-02 #> 48    47 0.7174296 0.2517128691 3.085751e-02 0.4318033 0.49012582 7.807090e-02 #> 49    48 0.7073375 0.2601952334 3.246728e-02 0.4214117 0.49795734 8.063098e-02 #> 50    49 0.6972233 0.2686637464 3.411297e-02 0.4112378 0.50557078 8.319146e-02 #> 51    50 0.6870982 0.2771084887 3.579335e-02 0.4012858 0.51296403 8.575019e-02 #> 52    51 0.6769731 0.2855197912 3.750709e-02 0.3915595 0.52013547 8.830503e-02 #> 53    52 0.6668589 0.2938882623 3.925285e-02 0.3820621 0.52708398 9.085391e-02 #> 54    53 0.6567660 0.3022048140 4.102921e-02 0.3727962 0.53380898 9.339481e-02 #> 55    54 0.6467046 0.3104606848 4.283470e-02 0.3637639 0.54031032 9.592576e-02 #> 56    55 0.6366847 0.3186474614 4.466783e-02 0.3549668 0.54658834 9.844485e-02 #> 57    56 0.6267158 0.3267570966 4.652706e-02 0.3464059 0.55264384 1.009502e-01 #> 58    57 0.6168073 0.3347819252 4.841082e-02 0.3380818 0.55847803 1.034401e-01 #> 59    58 0.6069678 0.3427146779 5.031752e-02 0.3299946 0.56409255 1.059128e-01 #> 60    59 0.5972060 0.3505484922 5.224552e-02 0.3221439 0.56948942 1.083667e-01 #> 61    60 0.5875299 0.3582769207 5.419321e-02 0.3145289 0.57467103 1.108001e-01 #> 62    61 0.5779471 0.3658939373 5.615892e-02 0.3071483 0.57964012 1.132116e-01 #> 63    62 0.5684651 0.3733939416 5.814100e-02 0.3000005 0.58439974 1.155997e-01 #> 64    63 0.5590905 0.3807717599 6.013778e-02 0.2930836 0.58895325 1.179632e-01 #> 65    64 0.5498297 0.3880226453 6.214761e-02 0.2863951 0.59330427 1.203006e-01 #> 66    65 0.5406889 0.3951422751 6.416883e-02 0.2799325 0.59745667 1.226108e-01 #> 67    66 0.5316735 0.4021267465 6.619978e-02 0.2736927 0.60141456 1.248927e-01 #> 68    67 0.5227886 0.4089725708 6.823883e-02 0.2676726 0.60518223 1.271452e-01 #> 69    68 0.5140390 0.4156766659 7.028436e-02 0.2618685 0.60876416 1.293673e-01 #> 70    69 0.5054289 0.4222363471 7.233477e-02 0.2562769 0.61216496 1.315582e-01 #> 71    70 0.4969622 0.4286493172 7.438848e-02 0.2508937 0.61538940 1.337169e-01 #> 72    71 0.4886424 0.4349136551 7.644394e-02 0.2457150 0.61844234 1.358427e-01 #> 73    72 0.4804726 0.4410278030 7.849962e-02 0.2407363 0.62132874 1.379349e-01 #> 74    73 0.4724554 0.4469905538 8.055403e-02 0.2359534 0.62405362 1.399930e-01 #> 75    74 0.4645933 0.4528010368 8.260571e-02 0.2313617 0.62662205 1.420163e-01 #> 76    75 0.4568881 0.4584587030 8.465324e-02 0.2269566 0.62903913 1.440043e-01 #> 77    76 0.4493415 0.4639633108 8.669523e-02 0.2227334 0.63130998 1.459567e-01 #> 78    77 0.4419547 0.4693149099 8.873035e-02 0.2186873 0.63343973 1.478730e-01 #> 79    78 0.4347289 0.4745138262 9.075728e-02 0.2148135 0.63543347 1.497530e-01 #> 80    79 0.4276646 0.4795606459 9.277477e-02 0.2111073 0.63729628 1.515964e-01 #> 81    80 0.4207622 0.4844562000 9.478161e-02 0.2075637 0.63903319 1.534031e-01 #> 82    81 0.4140218 0.4892015482 9.677662e-02 0.2041780 0.64064917 1.551728e-01 #> 83    82 0.4074434 0.4937979639 9.875868e-02 0.2009452 0.64214914 1.569057e-01 #> 84    83 0.4010264 0.4982469185 1.007267e-01 0.1978606 0.64353795 1.586015e-01 #> 85    84 0.3947703 0.5025500663 1.026797e-01 0.1949193 0.64482035 1.602604e-01 #> 86    85 0.3886742 0.5067092301 1.046166e-01 0.1921167 0.64600102 1.618823e-01 #> 87    86 0.3827371 0.5107263866 1.065366e-01 0.1894480 0.64708452 1.634675e-01 #> 88    87 0.3769577 0.5146036523 1.084387e-01 0.1869087 0.64807534 1.650160e-01 #> 89    88 0.3713347 0.5183432703 1.103220e-01 0.1844941 0.64897783 1.665281e-01 #> 90    89 0.3658665 0.5219475973 1.121859e-01 0.1821998 0.64979627 1.680040e-01 #> 91    90 0.3605513 0.5254190909 1.140296e-01 0.1800213 0.65053478 1.694439e-01 #> 92    91 0.3553874 0.5287602977 1.158523e-01 0.1779545 0.65119739 1.708481e-01 #> 93    92 0.3503727 0.5319738418 1.176535e-01 0.1759949 0.65178802 1.722170e-01 #> 94    93 0.3455052 0.5350624143 1.194324e-01 0.1741386 0.65231045 1.735510e-01 #> 95    94 0.3407827 0.5380287623 1.211886e-01 0.1723813 0.65276833 1.748503e-01 #> 96    95 0.3362028 0.5408756796 1.229215e-01 0.1707193 0.65316522 1.761155e-01 #> 97    96 0.3317633 0.5436059976 1.246307e-01 0.1691486 0.65350452 1.773468e-01 #> 98    97 0.3274618 0.5462225761 1.263156e-01 0.1676655 0.65378955 1.785449e-01 #> 99    98 0.3232957 0.5487282953 1.279760e-01 0.1662664 0.65402347 1.797101e-01 #> 100   99 0.3192624 0.5511260487 1.296115e-01 0.1649477 0.65420934 1.808429e-01 #> 101  100 0.3153595 0.5534187353 1.312218e-01 0.1637060 0.65435010 1.819439e-01 #> 102  101 0.3115842 0.5556092533 1.328065e-01 0.1625380 0.65444856 1.830135e-01 #> 103  102 0.3079340 0.5577004941 1.343655e-01 0.1614403 0.65450743 1.840522e-01 #> 104  103 0.3044061 0.5596953363 1.358985e-01 0.1604100 0.65452931 1.850607e-01 #> 105  104 0.3009979 0.5615966410 1.374054e-01 0.1594440 0.65451667 1.860394e-01 #> 106  105 0.2977067 0.5634072464 1.388861e-01 0.1585393 0.65447188 1.869888e-01 #> 107  106 0.2945296 0.5651299640 1.403404e-01 0.1576931 0.65439721 1.879096e-01 #> 108  107 0.2914642 0.5667675744 1.417683e-01 0.1569028 0.65429483 1.888024e-01 #> 109  108 0.2885075 0.5683228237 1.431696e-01 0.1561656 0.65416678 1.896676e-01 #> 110  109 0.2856570 0.5697984204 1.445445e-01 0.1554791 0.65401504 1.905058e-01 #> 111  110 0.2829100 0.5711970324 1.458929e-01 0.1548408 0.65384148 1.913177e-01 #> 112  111 0.2802638 0.5725212844 1.472149e-01 0.1542483 0.65364787 1.921038e-01 #> 113  112 0.2777157 0.5737737559 1.485105e-01 0.1536994 0.65343590 1.928647e-01 #> 114  113 0.2752632 0.5749569789 1.497798e-01 0.1531920 0.65320717 1.936008e-01 #> 115  114 0.2729037 0.5760734363 1.510229e-01 0.1527239 0.65296321 1.943129e-01 #> 116  115 0.2706345 0.5771255608 1.522399e-01 0.1522930 0.65270544 1.950015e-01 #> 117  116 0.2684532 0.5781157329 1.534311e-01 0.1518976 0.65243524 1.956671e-01 #> 118  117 0.2663573 0.5790462808 1.545964e-01 0.1515357 0.65215389 1.963104e-01 #> 119  118 0.2643443 0.5799194788 1.557363e-01 0.1512056 0.65186260 1.969318e-01 #> 120  119 0.2624117 0.5807375474 1.568507e-01 0.1509056 0.65156252 1.975319e-01 #> 121  120 0.2605573 0.5815026521 1.579400e-01 0.1506340 0.65125473 1.981113e-01 #> 122  121 0.2587786 0.5822169037 1.590045e-01 0.1503892 0.65094026 1.986705e-01 #> 123  122 0.2570734 0.5828823582 1.600442e-01 0.1501699 0.65062005 1.992101e-01 #> 124  123 0.2554394 0.5835010163 1.610595e-01 0.1499745 0.65029501 1.997305e-01 #> 125  124 0.2538744 0.5840748239 1.620507e-01 0.1498017 0.64996599 2.002323e-01 #> 126  125 0.2523762 0.5846056723 1.630181e-01 0.1496502 0.64963376 2.007160e-01 #> 127  126 0.2509427 0.5850953985 1.639619e-01 0.1495187 0.64929908 2.011822e-01 #> 128  127 0.2495718 0.5855457857 1.648824e-01 0.1494061 0.64896263 2.016312e-01 #> 129  128 0.2482615 0.5859585635 1.657799e-01 0.1493112 0.64862506 2.020637e-01 #> 130  129 0.2470097 0.5863354092 1.666549e-01 0.1492329 0.64828697 2.024801e-01 #> 131  130 0.2458146 0.5866779477 1.675075e-01 0.1491703 0.64794893 2.028808e-01 #> 132  131 0.2446742 0.5869877526 1.683381e-01 0.1491222 0.64761145 2.032664e-01 #> 133  132 0.2435866 0.5872663472 1.691470e-01 0.1490878 0.64727501 2.036372e-01 #> 134  133 0.2425501 0.5875152046 1.699347e-01 0.1490662 0.64694006 2.039938e-01 #> 135  134 0.2415629 0.5877357495 1.707014e-01 0.1490565 0.64660702 2.043365e-01 #> 136  135 0.2406232 0.5879293584 1.714475e-01 0.1490579 0.64627626 2.046659e-01 #> 137  136 0.2397294 0.5880973608 1.721732e-01 0.1490696 0.64594814 2.049822e-01 #> 138  137 0.2388798 0.5882410400 1.728791e-01 0.1490910 0.64562297 2.052860e-01 #> 139  138 0.2380729 0.5883616346 1.735654e-01 0.1491213 0.64530104 2.055777e-01 #> 140  139 0.2373071 0.5884603386 1.742325e-01 0.1491598 0.64498263 2.058575e-01 #> 141  140 0.2365809 0.5885383032 1.748808e-01 0.1492060 0.64466798 2.061260e-01 #> 142  141 0.2358928 0.5885966376 1.755106e-01 0.1492592 0.64435730 2.063834e-01 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 359 rows ]"},{"path":"/reference/alternative.html","id":null,"dir":"Reference","previous_headings":"","what":"alternative: a function to define parameters for solving white-tailed deer SIRS ODE equations — alternative","title":"alternative: a function to define parameters for solving white-tailed deer SIRS ODE equations — alternative","text":"alternative: function define parameters solving white-tailed deer SIRS ODE equations","code":""},{"path":"/reference/alternative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alternative: a function to define parameters for solving white-tailed deer SIRS ODE equations — alternative","text":"","code":"alternative(   alpha_immunity = NULL,   c_ww = NULL,   c_cw = NULL,   c_cc = NULL,   c_hw = NULL,   c_hc = NULL,   nu_aero_deer_deer_wild = NULL,   nu_aero_deer_deer_captive = NULL,   nu_aero_deer_human_wild = NULL,   nu_aero_deer_human_capt = NULL,   sigma_dc = NULL,   nu_dc_deer_deer = NULL,   gamma_recov = NULL,   I_human = NULL,   boost = NULL )"},{"path":"/reference/alternative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"alternative: a function to define parameters for solving white-tailed deer SIRS ODE equations — alternative","text":"alpha_immunity Inverse duration temporary immunity entering recovered compartment (per day, 0-1) c_ww Proximity rate (<=1.5m) wild deer (proximity events per day) c_cw Proximity rate (<=1.5m) captive wild deer along fencelines(proximity events per day) c_cc Proximity rate (<=1.5m) captive deer (proximity events per day) c_hw Proximity rate (<=1.5m) humans wild deer (proximity events per day) c_hc Proximity rate (<=1.5m) humans captive deer (proximity events per day) nu_aero_deer_deer_wild Probability infection via aerosol transmission wild deer nu_aero_deer_deer_captive Probability infection via aerosol transmission captive deer nu_aero_deer_human_wild Probability infection via aerosol transmission humans wild deer nu_aero_deer_human_capt Probability infection via aerosol transmission humans captive deer sigma_dc Probability direct contact deer, given proximity nu_dc_deer_deer Probability infection via fluid transmission deer gamma_recov Duration recovery infection (days) I_human Prevalence human population (Proportion) boost Boosting rate captive deer (Proportion)","code":""},{"path":"/reference/alternative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"alternative: a function to define parameters for solving white-tailed deer SIRS ODE equations — alternative","text":"Returns list vectors parameter","code":""},{"path":"/reference/alternative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"alternative: a function to define parameters for solving white-tailed deer SIRS ODE equations — alternative","text":"alternative() creates list parameter values fed SIRS ODE solver. length item output determined length arguments, must equal. argument(s) filled outputs another function package (e.g. calc_contact_rate, calc_nu_aero, calc_nu_dc, draw_elicitation_samples), user must fill argument vector values length arguments.","code":""},{"path":"/reference/alternative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"alternative: a function to define parameters for solving white-tailed deer SIRS ODE equations — alternative","text":"","code":"alternative(alpha_immunity = c((1/30),(1/60),(1/90),(1/120),(1/150)), c_ww = rep(10,5), c_cw = rep(1,5), c_cc = rep(20,5), c_hw = rep(0.01,5), c_hc = rep(0.25,5), nu_aero_deer_deer_wild = rep(0.01,5), nu_aero_deer_deer_captive = rep(0.1,5), nu_aero_deer_human_wild = rep(0.001,5), nu_aero_deer_human_capt = rep(0.05,5), sigma_dc = rep(0.2,5), nu_dc_deer_deer = rep(0.02,5), gamma_recov = rep(1/6,5), I_human = rep(0.05,5), boost = rep(0,5)) #> $alpha_immunity #> [1] 0.033333333 0.016666667 0.011111111 0.008333333 0.006666667 #>  #> $beta_aero_ww #> [1] 0.1 0.1 0.1 0.1 0.1 #>  #> $beta_aero_cw #> [1] 0.01 0.01 0.01 0.01 0.01 #>  #> $beta_aero_cc #> [1] 2 2 2 2 2 #>  #> $beta_aero_hw #> [1] 1e-05 1e-05 1e-05 1e-05 1e-05 #>  #> $beta_aero_hc #> [1] 0.0125 0.0125 0.0125 0.0125 0.0125 #>  #> $beta_dc_ww #> [1] 0.04 0.04 0.04 0.04 0.04 #>  #> $beta_dc_cw #> [1] 0.004 0.004 0.004 0.004 0.004 #>  #> $beta_dc_cc #> [1] 0.08 0.08 0.08 0.08 0.08 #>  #> $gamma_recov #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 #>  #> $I_human #> [1] 0.05 0.05 0.05 0.05 0.05 #>  #> $boost #> [1] 0 0 0 0 0 #>"},{"path":"/reference/calc_contact_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Contact rate calculation for wild deer — calc_contact_rate","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"Contact rate calculation wild deer","code":""},{"path":"/reference/calc_contact_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"","code":"calc_contact_rate(   sigma_season = NULL,   scaling_c = NULL,   N_w = NULL,   q = NULL,   A_w = NULL,   nsamples = NULL,   seed = NULL,   type_contact = NULL )"},{"path":"/reference/calc_contact_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"sigma_season value season scaling (derived Williams et al 2014; Appendix ). Default set 1 scaling_c value contact scaling constant (influences slope density-contact relationship; reported Habib et al. 2011; Appendix ) N_w total population size deer. Defaults random draw Poisson dist w/mean = 1000 q value concavity scaling constant (0-1, 0 equating density dependence 1 equating frequency dependence; reported Habib et al. 2011, Appendix ) A_w area inhabited N. Default set 100 nsamples number values returned. Default 1, return vector > 2 seed specified, sets seed function type_contact option \"low\", \"medium\", \"high\" based parameters Habib 2011 table. set \"manual\", manual input scaling_c q needed.","code":""},{"path":"/reference/calc_contact_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"returns number numeric vector nsamples > 1","code":""},{"path":"/reference/calc_contact_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"","code":"calc_contact_rate(type_contact = \"low\") #> [1] 4.074851 calc_contact_rate(sigma_season = 1, scaling_c = 16.37, N_w = 1000, q = 0.53, A_w = 100) #> [1] \"Type of contact must be specified as 'low', 'med', 'high'. If set to 'manual', user must provide scaling_c and q values \" calc_contact_rate(c(1,1), c(16.37, 16.37), rpois(2, 1000), c(0.53, 0.53), c(100, 100)) #> [1] \"Type of contact must be specified as 'low', 'med', 'high'. If set to 'manual', user must provide scaling_c and q values \""},{"path":"/reference/calc_nu_aero.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability of infection via aerosol \\(\\nu^{AERO}\\) — calc_nu_aero","title":"Calculate probability of infection via aerosol \\(\\nu^{AERO}\\) — calc_nu_aero","text":"calc_nu_aero calculate one value probability infection using defaults arguments provided. Defaults described sir_model_description document sourced literature expert elicitation.","code":""},{"path":"/reference/calc_nu_aero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability of infection via aerosol \\(\\nu^{AERO}\\) — calc_nu_aero","text":"","code":"calc_nu_aero(   AER = NULL,   s = NULL,   lambda = NULL,   C_nu = NULL,   C_i = NULL,   IR = NULL,   ER = NULL,   V_d = NULL,   V_air = NULL,   t_contact = NULL,   r = NULL,   nsamples = NULL,   seed = NULL )"},{"path":"/reference/calc_nu_aero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability of infection via aerosol \\(\\nu^{AERO}\\) — calc_nu_aero","text":"AER air exchange \\(hr^{-1}\\). Default set 4. s settling rate; \\(hr^{-1}\\) Default set 0.24 lambda innactivation rates \\(hr^{-1}\\). Default set 0.63 C_nu viral load sputum; RNA copies/ml. Default samples expert elicited distribution parameter 'Viral Load' C_i conversion factor quanta/RNA copy. Default set 0.0014 IR inhalation rate; \\(m^3/hr\\).Default set 0.846 ER exhalation rate; \\(m^3/hr\\). Default IR = ER V_d exhaled droplet volume concentration; ml exhaled droplets/ \\(m^3\\). Default 0.009 V_air fixed volume; \\(m^3\\). Default 7.07 t_contact time contact contaminated airspace (hr). r species-specific probability infection 1 quantum. Default r_deer expert elicited values. nsamples default 1, specified > 1 draw nsamples default distributions parameters seed setting seed, specify number","code":""},{"path":"/reference/calc_nu_aero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability of infection via aerosol \\(\\nu^{AERO}\\) — calc_nu_aero","text":"numeric vector length equal nsamples values nu_aero","code":""},{"path":"/reference/calc_nu_aero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate probability of infection via aerosol \\(\\nu^{AERO}\\) — calc_nu_aero","text":"Mathematical background calculation. infected individual emits viral particles particular rate \\(ER_q\\) quanta/hr product arguments described : $$ER_q = C_{\\nu} \\cdot C_i   \\cdot ER \\cdot V_d$$ used model instantaneous concentration viral particles (C) well-mixed air space (quanta/\\(m^3\\)) around infected individual follows: $$C = \\frac{ER_q}{IVRR \\cdot V_{air}}$$ loss rate (IVRR) given : $$AER + s + \\lambda$$ susceptible individual enters contaminated airspace surrounding infected individual, dose (\\(Q_A\\)) product inhalation rate, concentration viral particles, time contact: $$Q_A = IR   \\cdot C \\cdot t_{contact}$$ dose \\(Q_A\\) converted probability infection using Wells-Riley infection model function dose received species-specific probability infection 1 quantum. $$\\nu^{AERO} = 1 - e^{-rQ}$$","code":""},{"path":"/reference/calc_nu_aero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate probability of infection via aerosol \\(\\nu^{AERO}\\) — calc_nu_aero","text":"","code":"calc_nu_aero() # will return a single value using defaults #> [1] 0.01887638"},{"path":"/reference/calc_nu_dc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability of infection given physical contact \\(\\nu^{DC}\\) — calc_nu_dc","title":"Calculate probability of infection given physical contact \\(\\nu^{DC}\\) — calc_nu_dc","text":"#' calc_nu_dc calculate one value probability infection using defaults arguments provided. Defaults described sir_model_description document sourced literature expert elicitation.","code":""},{"path":"/reference/calc_nu_dc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability of infection given physical contact \\(\\nu^{DC}\\) — calc_nu_dc","text":"","code":"calc_nu_dc(   V_DC = NULL,   C_nu = NULL,   pfu_conv = NULL,   k = NULL,   nsamples = NULL,   seed = NULL )"},{"path":"/reference/calc_nu_dc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability of infection given physical contact \\(\\nu^{DC}\\) — calc_nu_dc","text":"V_DC Transferred volume (ml). Default 0.1 C_nu viral load sputum; RNA copies/ml. Default samples expert elicited distribution parameter 'Viral Load'. Concentration infectious particles sputum (gc per ml) pfu_conv conversion value (PFU per GC). Set 1/10^5.2 k set 410 default nsamples number samples wanted. Default set 1 seed sets seed random draws parameter default distributions.","code":""},{"path":"/reference/calc_nu_dc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability of infection given physical contact \\(\\nu^{DC}\\) — calc_nu_dc","text":"returns number vector probability values probability infection via direct contact.","code":""},{"path":"/reference/calc_nu_dc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate probability of infection given physical contact \\(\\nu^{DC}\\) — calc_nu_dc","text":"Mathematical background calculate infection probability given physical contact. use Wells-Riley dose response model estimates infection probability log-logistic function dose (\\(d^{dc}\\); plaque-forming units, PFU) dose-response function (\\(k\\); Watanabe et al. 2010). dose received product typical volume sputum transferred given contact (\\(V^{DC}\\)) concentration SARS-CoV-2 sputum (\\(C_{\\nu}\\)). initially assume contact \\(100\\mu l\\) sputum transferred individuals making contact. $$\\nu^{DC} = 1 - e^{-(d^{DC}/k)}$$ $$d^{DC} = V^{DC} \\cdot C_{\\nu} \\cdot pfuConv$$","code":""},{"path":"/reference/calc_nu_dc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate probability of infection given physical contact \\(\\nu^{DC}\\) — calc_nu_dc","text":"","code":"calc_nu_dc() # will run the defaults #> [1] 0.0007854773 calc_nu_dc(nsamples = 10) # use defaults with a random draw for values of C_nu from expert elicitation #>  [1] 0.0005969594 0.0008876092 0.0013632448 0.0009713599 0.0008715417 #>  [6] 0.0007283003 0.0007070701 0.0008091565 0.0005818548 0.0009081185"},{"path":"/reference/contact_rate_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Contact rate parameters — contact_rate_params","title":"Contact rate parameters — contact_rate_params","text":"Modeling relationship density contact rates wild deer populations. Habib et al. (2011) used radio-collared deer eastern Alberta , part, estimate contact rates deer group deer different groups. results unique calculate per capita contact rate terms deer contacted/individual/time. differs many approaches, just look raw probability two collared individuals place time. Habib et al. (2011) estimated home ranges, contact rates, resource selection functions across variable densities habitat conditions (areas 12%, 26%, 53%, 67% wooded habitat). simulated individual white-tailed deer movements based observed data estimate total number individuals contact, sum contact rates within group different groups. estimated likely parameters per-capita contact rate.","code":""},{"path":"/reference/contact_rate_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contact rate parameters — contact_rate_params","text":"","code":"contact_rate_params"},{"path":"/reference/contact_rate_params.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Contact rate parameters — contact_rate_params","text":"contact_rate_params","code":""},{"path":"/reference/contact_rate_params.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Contact rate parameters — contact_rate_params","text":"https://doi.org/10.1016/j.ecolmodel.2011.05.007","code":""},{"path":"/reference/draw_elicitation_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Random draw of parameters from expert elicitation — draw_elicitation_samples","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"Random draw parameters expert elicitation","code":""},{"path":"/reference/draw_elicitation_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"","code":"draw_elicitation_samples(   elicitation_data = NULL,   nsamples = NULL,   seed = NULL,   return_df = FALSE )"},{"path":"/reference/draw_elicitation_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"elicitation_data defaults package data expert elicitation. requires dataframe columns parameter name, mu, sd, distribution family. function written around elicitation_data dataset provided package. nsamples number samples draw. none set, defaults 1. seed specified, seed set. left NULL seed set. return_df TRUE object returned data frame. FALSE return list column","code":""},{"path":"/reference/draw_elicitation_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"returns tibble list column samples drawn unless otherwise specified return_df argument.","code":""},{"path":"/reference/draw_elicitation_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"","code":"draw_elicitation_samples() # this will return the default elicitation_data with an additional column for a random sample of 1 for each parameter. #> # A tibble: 15 × 5 #>    parameter                                           mu    sd family my_sample #>    <chr>                                            <dbl> <dbl> <chr>  <list>    #>  1 Temporary Immunity                              4.72   0.626 log-n… <dbl [1]> #>  2 Wastewater Infections                          -1.35   1.49  log-n… <dbl [1]> #>  3 Fomite Infections                              -0.0414 1.03  log-n… <dbl [1]> #>  4 Viral Load                                      0.216  0.344 log-n… <dbl [1]> #>  5 Dose-Response                                   0.277  0.272 log-n… <dbl [1]> #>  6 Deer Proximity Duration (minutes)               1.55   1.27  log-n… <dbl [1]> #>  7 Direct Contact Probability                     -1.46   0.708 logit… <dbl [1]> #>  8 Proximity rate with baiting (17 events withou…  3.47   0.226 log-n… <dbl [1]> #>  9 Deer-Human Proximity Rate, Rural (per 120 day… -1.59   1.70  log-n… <dbl [1]> #> 10 Deer-Human Proximity Duration, Rural (minutes) -0.355  0.979 log-n… <dbl [1]> #> 11 Deer-Human Proximity Rate, Suburban (per 120 …  0.573  0.951 log-n… <dbl [1]> #> 12 Deer-Human Proximity Duration, Suburban (minu…  0.432  0.929 log-n… <dbl [1]> #> 13 Deer-Human Proximity Rate, Captive (per 120 d…  2.52   1.13  log-n… <dbl [1]> #> 14 Deer-Human Proximity Duration, Captive (minut…  1.79   1.15  log-n… <dbl [1]> #> 15 Deer-Deer Proximity Rate, Captive (per day)     3.47   0.913 log-n… <dbl [1]> draw_elicitation_samples(return_df = TRUE) # will return the same as above but expanded as a dataframe instead of a tibble with a list column #> # A tibble: 15 × 5 #>    parameter                                           mu    sd family my_sample #>    <chr>                                            <dbl> <dbl> <chr>      <dbl> #>  1 Temporary Immunity                              4.72   0.626 log-n…   52.6    #>  2 Wastewater Infections                          -1.35   1.49  log-n…    0.448  #>  3 Fomite Infections                              -0.0414 1.03  log-n…    2.09   #>  4 Viral Load                                      0.216  0.344 log-n…    1.04   #>  5 Dose-Response                                   0.277  0.272 log-n…    1.17   #>  6 Deer Proximity Duration (minutes)               1.55   1.27  log-n…    7.11   #>  7 Direct Contact Probability                     -1.46   0.708 logit…    0.243  #>  8 Proximity rate with baiting (17 events withou…  3.47   0.226 log-n…   57.0    #>  9 Deer-Human Proximity Rate, Rural (per 120 day… -1.59   1.70  log-n…    0.0631 #> 10 Deer-Human Proximity Duration, Rural (minutes) -0.355  0.979 log-n…    2.05   #> 11 Deer-Human Proximity Rate, Suburban (per 120 …  0.573  0.951 log-n…    1.74   #> 12 Deer-Human Proximity Duration, Suburban (minu…  0.432  0.929 log-n…    4.11   #> 13 Deer-Human Proximity Rate, Captive (per 120 d…  2.52   1.13  log-n…   19.9    #> 14 Deer-Human Proximity Duration, Captive (minut…  1.79   1.15  log-n…   10.5    #> 15 Deer-Deer Proximity Rate, Captive (per day)     3.47   0.913 log-n…   67.2"},{"path":"/reference/elicitation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"elicitation_data — elicitation_data","title":"elicitation_data — elicitation_data","text":"Group averaged (using quantile averaging) parameter estimates parameters derived using expert elicitation. Parameters include 1) Days recovered individual can reinfected SARS-CoV-2 (Parameter = Temporary Immunity; units = days), 2) Number individuals infected via wastewater every 100 individuals infected via direct transmission (Parameter = Wastewater Infections; units = individuals), 3) Number individuals infected via formites every 100 individuals infected via direct transmission (Parameter = Fomite Infections; units = individuals), 4) Ratio deer sputum viral load : humansputum viral load (Parameter = Viral Load; units = multiplicative ratio), 5) Dose-response value quantum dosage using Wells-Riley dose response model (Parameter = Dose-Response; units = r value). 6) deer-deer contact duration (minutes), 7) deer-deer direct contact probability, 8) deer-deer proximity rate baiting (per day; 17 events per day without baiting), 9) deer-human proximity rate, rural (per 120 days), 10) deer-human proximity duration, rural (minutes), 11) deer-human proximity rate, suburban (per 120 days), 12) deer-human proximity duration, suburban (minutes), 13) deer-human proximity rate, captive (per 120 days), 14) deer-human proximity duration, captive (minutes), 15) deer-deer proximity rate captivity (per day).","code":""},{"path":"/reference/elicitation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"elicitation_data — elicitation_data","text":"","code":"elicitation_data"},{"path":[]},{"path":"/reference/elicitation_data.html","id":"elicitation-data","dir":"Reference","previous_headings":"","what":"elicitation_data","title":"elicitation_data — elicitation_data","text":"data frame 4 columns 15 rows, row corresponding elicited parameter: parameter Parameter elicited mu mean value sd standard deviation family distribution family parameters given","code":""},{"path":"/reference/elicitation_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"elicitation_data — elicitation_data","text":"Contact: Elias Rosenblatt erosenbl@uvm.edu","code":""},{"path":"/reference/get_EE_param_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"get_EE_param_vals: Prepare random draws inputs SIRS ODE equations.","code":""},{"path":"/reference/get_EE_param_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"","code":"get_EE_param_vals(data, my_param)"},{"path":"/reference/get_EE_param_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"data Dataset containing random draws parameters estimate expert elicitation. my_param Character string parameters estimated expert elicitation.","code":""},{"path":"/reference/get_EE_param_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"vector random samples error distributions estimated expert elicitation, length determined number iterations run simulation (nsamples argument, draw_elicitation_samples.R).","code":""},{"path":"/reference/get_EE_param_vals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"function requires draw_elicitation_samples() run prior. output draw_elicitation_samples input argument function (my_param).  Options parameters include: \"Temporary Immunity\", \"Wastewater Infections\",\"Fomite Infections\",\"Viral Load\",\"Dose-Response\", \"Deer Proximity Duration (minutes)\", \"Direct Contact Probability\", \"Proximity rate baiting (17 events without baiting)\", \"Deer-Human Proximity Rate, Rural (per 120 days)\", \"Deer-Human Proximity Duration, Rural (minutes)\", \"Deer-Human Proximity Rate, Suburban (per 120 days)\", \"Deer-Human Proximity Duration, Suburban (minutes)\", \"Deer-Human Proximity Rate, Captive (per 120 days)\", \"Deer-Human Proximity Duration, Captive (minutes)\", \"Deer-Deer Proximity Rate, Captive (per day)\". one parameter may retrieved get_EE_param_vals() call.","code":""},{"path":[]},{"path":"/reference/get_EE_param_vals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"","code":"draw_elicitation_samples(nsamples = 50) #> # A tibble: 15 × 5 #>    parameter                                           mu    sd family my_sample #>    <chr>                                            <dbl> <dbl> <chr>  <list>    #>  1 Temporary Immunity                              4.72   0.626 log-n… <dbl>     #>  2 Wastewater Infections                          -1.35   1.49  log-n… <dbl>     #>  3 Fomite Infections                              -0.0414 1.03  log-n… <dbl>     #>  4 Viral Load                                      0.216  0.344 log-n… <dbl>     #>  5 Dose-Response                                   0.277  0.272 log-n… <dbl>     #>  6 Deer Proximity Duration (minutes)               1.55   1.27  log-n… <dbl>     #>  7 Direct Contact Probability                     -1.46   0.708 logit… <dbl>     #>  8 Proximity rate with baiting (17 events withou…  3.47   0.226 log-n… <dbl>     #>  9 Deer-Human Proximity Rate, Rural (per 120 day… -1.59   1.70  log-n… <dbl>     #> 10 Deer-Human Proximity Duration, Rural (minutes) -0.355  0.979 log-n… <dbl>     #> 11 Deer-Human Proximity Rate, Suburban (per 120 …  0.573  0.951 log-n… <dbl>     #> 12 Deer-Human Proximity Duration, Suburban (minu…  0.432  0.929 log-n… <dbl>     #> 13 Deer-Human Proximity Rate, Captive (per 120 d…  2.52   1.13  log-n… <dbl>     #> 14 Deer-Human Proximity Duration, Captive (minut…  1.79   1.15  log-n… <dbl>     #> 15 Deer-Deer Proximity Rate, Captive (per day)     3.47   0.913 log-n… <dbl>     get_EE_param_vals(my_param = \"Temporary Immunity\") #> Error in filter(., parameter == my_param): argument \"data\" is missing, with no default"},{"path":"/reference/initial_compartments.html","id":null,"dir":"Reference","previous_headings":"","what":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"Define starting compartment sizes SIRS ODE Solver","code":""},{"path":"/reference/initial_compartments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"","code":"initial_compartments(   S_wild_prop = 1,   I_wild_prop = 0,   R_wild_prop = 0,   S_captive_prop = 1,   I_captive_prop = 0,   R_captive_prop = 0,   draws = NULL )"},{"path":"/reference/initial_compartments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"S_wild_prop Size susceptible compartment wild population (proportion) I_wild_prop Size infectious compartment wild population (proportion) R_wild_prop Size recovered compartment wild population (proportion) S_captive_prop Size susceptible compartment captive population (proportion) I_captive_prop Size infectious compartment captive population (proportion) R_captive_prop Size recovered compartment captive population (proportion) draws $Number iterations simulation","code":""},{"path":"/reference/initial_compartments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"List six vectors, repeating starting conditions specified user. Length vectors determined draws argument.","code":""},{"path":"/reference/initial_compartments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"Provides vector compartment sizes wild captive populations. function pairs wild captive deer populations transmission populations can occur. Values (except draws parameter) must proportions, must sum one population.","code":""},{"path":"/reference/initial_compartments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"","code":"initial_compartments(S_wild_prop = 0, draws = 5) #Starting conditions for a simulation focused only on captive deer #> $S_wild #> [1] 0 0 0 0 0 #>  #> $I_wild #> [1] 0 0 0 0 0 #>  #> $R_wild #> [1] 0 0 0 0 0 #>  #> $S_captive #> [1] 1 1 1 1 1 #>  #> $I_captive #> [1] 0 0 0 0 0 #>  #> $R_captive #> [1] 0 0 0 0 0 #>  initial_compartments(draws = 5) #Starting conditions for a simulation of introduction and spread in both wild and captive deer. #> $S_wild #> [1] 1 1 1 1 1 #>  #> $I_wild #> [1] 0 0 0 0 0 #>  #> $R_wild #> [1] 0 0 0 0 0 #>  #> $S_captive #> [1] 1 1 1 1 1 #>  #> $I_captive #> [1] 0 0 0 0 0 #>  #> $R_captive #> [1] 0 0 0 0 0 #>"},{"path":"/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ODE Solver for SIRS model — run","title":"Run ODE Solver for SIRS model — run","text":"Run ODE Solver SIRS model","code":""},{"path":"/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ODE Solver for SIRS model — run","text":"","code":"run(   iter = NULL,   initial_compartments = example_inits,   parameters = NULL,   times = NULL,   name = NULL )"},{"path":"/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run ODE Solver for SIRS model — run","text":"iter Number iterations, often referred 'nsamples' package examples initial_compartments Initial compartment sizes (proportions, stored list) parameters SIRS parameters, stored list times Length projection (days) name Name context simulated","code":""},{"path":"/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ODE Solver for SIRS model — run","text":"#List containing iteration details, including initial compartment sizes, parameters, context name, daily, proportional sizes SIRS compartment.","code":""},{"path":"/reference/run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run ODE Solver for SIRS model — run","text":"","code":"nsamples = 10  example_inits <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, S_captive = 1,                    I_captive = 0, R_captive = 0)  # set the time to run example_times <-  seq(0, 365, by = 1) # Set parameters of transmission, immunity, recovery  example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     gamma_recov = 0.01,                     I_human = 0.05,                     boost = 0)  run(iter = nsamples, initial_compartments = example_inits, parameters = example_params, times = example_times, name = Test) #> Error in run(iter = nsamples, initial_compartments = example_inits, parameters = example_params,     times = example_times, name = Test): object 'Test' not found"},{"path":"/reference/run_sirs_projection.html","id":null,"dir":"Reference","previous_headings":"","what":"In progress Run SIRS projection — run_sirs_projection","title":"In progress Run SIRS projection — run_sirs_projection","text":"function still development wrapper functions package generate projection SIRS model using defaults specified number samples","code":""},{"path":"/reference/run_sirs_projection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"In progress Run SIRS projection — run_sirs_projection","text":"","code":"run_sirs_projection(   nsamples = 100,   seed = 123,   wild_scenario = \"rural\",   ndays = 120,   type_contact = \"low\",   ... )"},{"path":"/reference/run_sirs_projection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"In progress Run SIRS projection — run_sirs_projection","text":"nsamples number samples return seed specified set seed wild_scenario deafult 'rural' can also calculate 'suburban' ndays number days projection specified 120 ...","code":""},{"path":"/reference/run_sirs_projection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"In progress Run SIRS projection — run_sirs_projection","text":"returns list column tibble parameters sirs projection.","code":""},{"path":"/reference/simple_sirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple function to generate SIRS model projections — simple_sirs","title":"Simple function to generate SIRS model projections — simple_sirs","text":"simple_sirs written work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points.","code":""},{"path":"/reference/simple_sirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple function to generate SIRS model projections — simple_sirs","text":"","code":"simple_sirs(time, state, parameters)"},{"path":"/reference/simple_sirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple function to generate SIRS model projections — simple_sirs","text":"time vector values generate projection (length days). state initial state compartment populations. named vector starting values S_wild, I_wild, R_wild, S_captive, I_captive, R_captive. parameters list parameters generate projection. parameters include transmission parameters, immunity recovery rates, proportion infected humans.","code":""},{"path":"/reference/simple_sirs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple function to generate SIRS model projections — simple_sirs","text":"used deSolve::ode() function, return dataframe proportion individuals SIR compartments time point.","code":""},{"path":"/reference/simple_sirs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple function to generate SIRS model projections — simple_sirs","text":"","code":"# prepare the input parameters: example_inits <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, S_captive = 1,                    I_captive = 0, R_captive = 0)  # set the time to run example_times <-  seq(0, 500, by = 1) # Set parameters of transmission, immunity, recovery  example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     phi_cw = 0,                     phi_wc = 0,                     gamma_recov = 0.01,                     I_human = 0.05)  # run the ode function:  deSolve::ode(y = example_inits, times = example_times, parms = example_params, func = whitetailedSIRS::simple_sirs) #>     time    S_wild       I_wild       R_wild S_captive  I_captive    R_captive #> 1      0 1.0000000 0.0000000000 0.000000e+00 1.0000000 0.00000000 0.000000e+00 #> 2      1 0.9993937 0.0006033453 2.972120e-06 0.9898960 0.01005447 4.952954e-05 #> 3      2 0.9985719 0.0014152679 1.282810e-05 0.9795861 0.02021672 1.971848e-04 #> 4      3 0.9975291 0.0024394532 3.143763e-05 0.9690747 0.03048420 4.411150e-04 #> 5      4 0.9962606 0.0036789666 6.042078e-05 0.9583659 0.04085440 7.797231e-04 #> 6      5 0.9947604 0.0051376972 1.019176e-04 0.9474655 0.05132361 1.210903e-03 #> 7      6 0.9930238 0.0068185479 1.576558e-04 0.9363788 0.06188829 1.732952e-03 #> 8      7 0.9910463 0.0087243155 2.294167e-04 0.9251115 0.07254442 2.344106e-03 #> 9      8 0.9888235 0.0108575342 3.189569e-04 0.9136698 0.08328762 3.042611e-03 #> 10     9 0.9863516 0.0132203970 4.280010e-04 0.9020602 0.09411306 3.826719e-03 #> 11    10 0.9836270 0.0158147917 5.582446e-04 0.8902898 0.10501553 4.694687e-03 #> 12    11 0.9806464 0.0186422575 7.113503e-04 0.8783658 0.11598946 5.644766e-03 #> 13    12 0.9774071 0.0217039608 8.889445e-04 0.8662959 0.12702886 6.675204e-03 #> 14    13 0.9739067 0.0250006762 1.092615e-03 0.8540884 0.13812738 7.784242e-03 #> 15    14 0.9701433 0.0285327644 1.323910e-03 0.8417516 0.14927827 8.970104e-03 #> 16    15 0.9661155 0.0323001547 1.584329e-03 0.8292946 0.16047443 1.023100e-02 #> 17    16 0.9618223 0.0363023277 1.875330e-03 0.8167265 0.17170841 1.156513e-02 #> 18    17 0.9572634 0.0405382982 2.198316e-03 0.8040569 0.18297243 1.297065e-02 #> 19    18 0.9524388 0.0450066010 2.554638e-03 0.7912959 0.19425837 1.444571e-02 #> 20    19 0.9473491 0.0497052787 2.945591e-03 0.7784537 0.20555783 1.598844e-02 #> 21    20 0.9419957 0.0546318712 3.372409e-03 0.7655410 0.21686212 1.759692e-02 #> 22    21 0.9363803 0.0597834082 3.836263e-03 0.7525685 0.22816231 1.926922e-02 #> 23    22 0.9305053 0.0651564035 4.338258e-03 0.7395474 0.23944927 2.100335e-02 #> 24    23 0.9243737 0.0707468522 4.879429e-03 0.7264890 0.25071363 2.279733e-02 #> 25    24 0.9179890 0.0765502310 5.460738e-03 0.7134050 0.26194590 2.464910e-02 #> 26    25 0.9113554 0.0825615008 6.083072e-03 0.7003070 0.27313645 2.655660e-02 #> 27    26 0.9044776 0.0887751127 6.747240e-03 0.6872067 0.28427555 2.851773e-02 #> 28    27 0.8973610 0.0951850166 7.453969e-03 0.6741162 0.29535344 3.053033e-02 #> 29    28 0.8900114 0.1017846729 8.203903e-03 0.6610474 0.30636033 3.259225e-02 #> 30    29 0.8824353 0.1085670677 8.997600e-03 0.6480123 0.31728644 3.470126e-02 #> 31    30 0.8746397 0.1155247296 9.835530e-03 0.6350228 0.32812207 3.685515e-02 #> 32    31 0.8666322 0.1226497512 1.071807e-02 0.6220908 0.33885761 3.905164e-02 #> 33    32 0.8584207 0.1299338118 1.164552e-02 0.6092280 0.34948358 4.128843e-02 #> 34    33 0.8500137 0.1373682032 1.261807e-02 0.5964461 0.35999071 4.356323e-02 #> 35    34 0.8414203 0.1449438585 1.363582e-02 0.5837564 0.37036992 4.587367e-02 #> 36    35 0.8326498 0.1526513823 1.469878e-02 0.5711702 0.38061237 4.821741e-02 #> 37    36 0.8237120 0.1604810834 1.580688e-02 0.5586984 0.39070954 5.059208e-02 #> 38    37 0.8146171 0.1684230094 1.695992e-02 0.5463515 0.40065322 5.299528e-02 #> 39    38 0.8053754 0.1764669821 1.815764e-02 0.5341398 0.41043553 5.542463e-02 #> 40    39 0.7959977 0.1846026354 1.939966e-02 0.5220733 0.42004899 5.787772e-02 #> 41    40 0.7864950 0.1928194528 2.068554e-02 0.5101613 0.42948655 6.035215e-02 #> 42    41 0.7768785 0.2011068067 2.201472e-02 0.4984129 0.43874156 6.284552e-02 #> 43    42 0.7671594 0.2094539972 2.338657e-02 0.4868367 0.44780783 6.535545e-02 #> 44    43 0.7573494 0.2178502916 2.480035e-02 0.4754408 0.45667967 6.787956e-02 #> 45    44 0.7474598 0.2262849633 2.625527e-02 0.4642327 0.46535184 7.041549e-02 #> 46    45 0.7375022 0.2347473302 2.775042e-02 0.4532195 0.47381964 7.296089e-02 #> 47    46 0.7274884 0.2432267924 2.928485e-02 0.4424077 0.48207886 7.551346e-02 #> 48    47 0.7174296 0.2517128691 3.085751e-02 0.4318033 0.49012582 7.807090e-02 #> 49    48 0.7073375 0.2601952334 3.246728e-02 0.4214117 0.49795734 8.063098e-02 #> 50    49 0.6972233 0.2686637464 3.411297e-02 0.4112378 0.50557078 8.319146e-02 #> 51    50 0.6870982 0.2771084887 3.579335e-02 0.4012858 0.51296403 8.575019e-02 #> 52    51 0.6769731 0.2855197912 3.750709e-02 0.3915595 0.52013547 8.830503e-02 #> 53    52 0.6668589 0.2938882623 3.925285e-02 0.3820621 0.52708398 9.085391e-02 #> 54    53 0.6567660 0.3022048140 4.102921e-02 0.3727962 0.53380898 9.339481e-02 #> 55    54 0.6467046 0.3104606848 4.283470e-02 0.3637639 0.54031032 9.592576e-02 #> 56    55 0.6366847 0.3186474614 4.466783e-02 0.3549668 0.54658834 9.844485e-02 #> 57    56 0.6267158 0.3267570966 4.652706e-02 0.3464059 0.55264384 1.009502e-01 #> 58    57 0.6168073 0.3347819252 4.841082e-02 0.3380818 0.55847803 1.034401e-01 #> 59    58 0.6069678 0.3427146779 5.031752e-02 0.3299946 0.56409255 1.059128e-01 #> 60    59 0.5972060 0.3505484922 5.224552e-02 0.3221439 0.56948942 1.083667e-01 #> 61    60 0.5875299 0.3582769207 5.419321e-02 0.3145289 0.57467103 1.108001e-01 #> 62    61 0.5779471 0.3658939373 5.615892e-02 0.3071483 0.57964012 1.132116e-01 #> 63    62 0.5684651 0.3733939416 5.814100e-02 0.3000005 0.58439974 1.155997e-01 #> 64    63 0.5590905 0.3807717599 6.013778e-02 0.2930836 0.58895325 1.179632e-01 #> 65    64 0.5498297 0.3880226453 6.214761e-02 0.2863951 0.59330427 1.203006e-01 #> 66    65 0.5406889 0.3951422751 6.416883e-02 0.2799325 0.59745667 1.226108e-01 #> 67    66 0.5316735 0.4021267465 6.619978e-02 0.2736927 0.60141456 1.248927e-01 #> 68    67 0.5227886 0.4089725708 6.823883e-02 0.2676726 0.60518223 1.271452e-01 #> 69    68 0.5140390 0.4156766659 7.028436e-02 0.2618685 0.60876416 1.293673e-01 #> 70    69 0.5054289 0.4222363471 7.233477e-02 0.2562769 0.61216496 1.315582e-01 #> 71    70 0.4969622 0.4286493172 7.438848e-02 0.2508937 0.61538940 1.337169e-01 #> 72    71 0.4886424 0.4349136551 7.644394e-02 0.2457150 0.61844234 1.358427e-01 #> 73    72 0.4804726 0.4410278030 7.849962e-02 0.2407363 0.62132874 1.379349e-01 #> 74    73 0.4724554 0.4469905538 8.055403e-02 0.2359534 0.62405362 1.399930e-01 #> 75    74 0.4645933 0.4528010368 8.260571e-02 0.2313617 0.62662205 1.420163e-01 #> 76    75 0.4568881 0.4584587030 8.465324e-02 0.2269566 0.62903913 1.440043e-01 #> 77    76 0.4493415 0.4639633108 8.669523e-02 0.2227334 0.63130998 1.459567e-01 #> 78    77 0.4419547 0.4693149099 8.873035e-02 0.2186873 0.63343973 1.478730e-01 #> 79    78 0.4347289 0.4745138262 9.075728e-02 0.2148135 0.63543347 1.497530e-01 #> 80    79 0.4276646 0.4795606459 9.277477e-02 0.2111073 0.63729628 1.515964e-01 #> 81    80 0.4207622 0.4844562000 9.478161e-02 0.2075637 0.63903319 1.534031e-01 #> 82    81 0.4140218 0.4892015482 9.677662e-02 0.2041780 0.64064917 1.551728e-01 #> 83    82 0.4074434 0.4937979639 9.875868e-02 0.2009452 0.64214914 1.569057e-01 #> 84    83 0.4010264 0.4982469185 1.007267e-01 0.1978606 0.64353795 1.586015e-01 #> 85    84 0.3947703 0.5025500663 1.026797e-01 0.1949193 0.64482035 1.602604e-01 #> 86    85 0.3886742 0.5067092301 1.046166e-01 0.1921167 0.64600102 1.618823e-01 #> 87    86 0.3827371 0.5107263866 1.065366e-01 0.1894480 0.64708452 1.634675e-01 #> 88    87 0.3769577 0.5146036523 1.084387e-01 0.1869087 0.64807534 1.650160e-01 #> 89    88 0.3713347 0.5183432703 1.103220e-01 0.1844941 0.64897783 1.665281e-01 #> 90    89 0.3658665 0.5219475973 1.121859e-01 0.1821998 0.64979627 1.680040e-01 #> 91    90 0.3605513 0.5254190909 1.140296e-01 0.1800213 0.65053478 1.694439e-01 #> 92    91 0.3553874 0.5287602977 1.158523e-01 0.1779545 0.65119739 1.708481e-01 #> 93    92 0.3503727 0.5319738418 1.176535e-01 0.1759949 0.65178802 1.722170e-01 #> 94    93 0.3455052 0.5350624143 1.194324e-01 0.1741386 0.65231045 1.735510e-01 #> 95    94 0.3407827 0.5380287623 1.211886e-01 0.1723813 0.65276833 1.748503e-01 #> 96    95 0.3362028 0.5408756796 1.229215e-01 0.1707193 0.65316522 1.761155e-01 #> 97    96 0.3317633 0.5436059976 1.246307e-01 0.1691486 0.65350452 1.773468e-01 #> 98    97 0.3274618 0.5462225761 1.263156e-01 0.1676655 0.65378955 1.785449e-01 #> 99    98 0.3232957 0.5487282953 1.279760e-01 0.1662664 0.65402347 1.797101e-01 #> 100   99 0.3192624 0.5511260487 1.296115e-01 0.1649477 0.65420934 1.808429e-01 #> 101  100 0.3153595 0.5534187353 1.312218e-01 0.1637060 0.65435010 1.819439e-01 #> 102  101 0.3115842 0.5556092533 1.328065e-01 0.1625380 0.65444856 1.830135e-01 #> 103  102 0.3079340 0.5577004941 1.343655e-01 0.1614403 0.65450743 1.840522e-01 #> 104  103 0.3044061 0.5596953363 1.358985e-01 0.1604100 0.65452931 1.850607e-01 #> 105  104 0.3009979 0.5615966410 1.374054e-01 0.1594440 0.65451667 1.860394e-01 #> 106  105 0.2977067 0.5634072464 1.388861e-01 0.1585393 0.65447188 1.869888e-01 #> 107  106 0.2945296 0.5651299640 1.403404e-01 0.1576931 0.65439721 1.879096e-01 #> 108  107 0.2914642 0.5667675744 1.417683e-01 0.1569028 0.65429483 1.888024e-01 #> 109  108 0.2885075 0.5683228237 1.431696e-01 0.1561656 0.65416678 1.896676e-01 #> 110  109 0.2856570 0.5697984204 1.445445e-01 0.1554791 0.65401504 1.905058e-01 #> 111  110 0.2829100 0.5711970324 1.458929e-01 0.1548408 0.65384148 1.913177e-01 #> 112  111 0.2802638 0.5725212844 1.472149e-01 0.1542483 0.65364787 1.921038e-01 #> 113  112 0.2777157 0.5737737559 1.485105e-01 0.1536994 0.65343590 1.928647e-01 #> 114  113 0.2752632 0.5749569789 1.497798e-01 0.1531920 0.65320717 1.936008e-01 #> 115  114 0.2729037 0.5760734363 1.510229e-01 0.1527239 0.65296321 1.943129e-01 #> 116  115 0.2706345 0.5771255608 1.522399e-01 0.1522930 0.65270544 1.950015e-01 #> 117  116 0.2684532 0.5781157329 1.534311e-01 0.1518976 0.65243524 1.956671e-01 #> 118  117 0.2663573 0.5790462808 1.545964e-01 0.1515357 0.65215389 1.963104e-01 #> 119  118 0.2643443 0.5799194788 1.557363e-01 0.1512056 0.65186260 1.969318e-01 #> 120  119 0.2624117 0.5807375474 1.568507e-01 0.1509056 0.65156252 1.975319e-01 #> 121  120 0.2605573 0.5815026521 1.579400e-01 0.1506340 0.65125473 1.981113e-01 #> 122  121 0.2587786 0.5822169037 1.590045e-01 0.1503892 0.65094026 1.986705e-01 #> 123  122 0.2570734 0.5828823582 1.600442e-01 0.1501699 0.65062005 1.992101e-01 #> 124  123 0.2554394 0.5835010163 1.610595e-01 0.1499745 0.65029501 1.997305e-01 #> 125  124 0.2538744 0.5840748239 1.620507e-01 0.1498017 0.64996599 2.002323e-01 #> 126  125 0.2523762 0.5846056723 1.630181e-01 0.1496502 0.64963376 2.007160e-01 #> 127  126 0.2509427 0.5850953985 1.639619e-01 0.1495187 0.64929908 2.011822e-01 #> 128  127 0.2495718 0.5855457857 1.648824e-01 0.1494061 0.64896263 2.016312e-01 #> 129  128 0.2482615 0.5859585635 1.657799e-01 0.1493112 0.64862506 2.020637e-01 #> 130  129 0.2470097 0.5863354092 1.666549e-01 0.1492329 0.64828697 2.024801e-01 #> 131  130 0.2458146 0.5866779477 1.675075e-01 0.1491703 0.64794893 2.028808e-01 #> 132  131 0.2446742 0.5869877526 1.683381e-01 0.1491222 0.64761145 2.032664e-01 #> 133  132 0.2435866 0.5872663472 1.691470e-01 0.1490878 0.64727501 2.036372e-01 #> 134  133 0.2425501 0.5875152046 1.699347e-01 0.1490662 0.64694006 2.039938e-01 #> 135  134 0.2415629 0.5877357495 1.707014e-01 0.1490565 0.64660702 2.043365e-01 #> 136  135 0.2406232 0.5879293584 1.714475e-01 0.1490579 0.64627626 2.046659e-01 #> 137  136 0.2397294 0.5880973608 1.721732e-01 0.1490696 0.64594814 2.049822e-01 #> 138  137 0.2388798 0.5882410400 1.728791e-01 0.1490910 0.64562297 2.052860e-01 #> 139  138 0.2380729 0.5883616346 1.735654e-01 0.1491213 0.64530104 2.055777e-01 #> 140  139 0.2373071 0.5884603386 1.742325e-01 0.1491598 0.64498263 2.058575e-01 #> 141  140 0.2365809 0.5885383032 1.748808e-01 0.1492060 0.64466798 2.061260e-01 #> 142  141 0.2358928 0.5885966376 1.755106e-01 0.1492592 0.64435730 2.063834e-01 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 359 rows ]"}]
