[{"path":"/articles/Connected_Systems.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SARS-CoV-2 introduction and spread in connected systems","text":"Now dataset scenario (whitetailedSIRS::SIRS_analysis_by_contexts), can test connected systems (wild captive separated fence line) differ outbreak characteristics, compared isolated scenario. scenarios connected, may differences prevalence, cumulative cases, persistence due fence line interactions. analysis corresponds Objective 5 Rosenblatt et al. Prep.","code":""},{"path":"/articles/Connected_Systems.html","id":"data-input-and-common-parameter-values","dir":"Articles","previous_headings":"","what":"Data input and common parameter values","title":"SARS-CoV-2 introduction and spread in connected systems","text":", load dataset remind R many iterations run context (nsamples). set seed consistent results, identify human prevalence duration projection (days). set parameters used consistently across simulations vignette.","code":"set.seed(23) df <- whitetailedSIRS::scenario_results nsamples <- 200  #Bring in estimates from expert elicitation elicitation_data <- draw_elicitation_samples(nsamples = nsamples)  #Fixed parameters I_human_null <- 0.05 times <- seq(0, 120, by = 1)  #Parameters commonly used across projections nWild <- rpois(nsamples,1000) #Abundance A_w <- 100 #Area habitat <- \"med\" #Habitat classification  C_nu_human <- rnorm(n = nsamples, mean = 10^5.6, sd = 10^1.2)#viral load in humans (genomic copies per ml) C_nu_deer <- 10^5.6 * get_EE_param_vals(data = elicitation_data, my_param = \"Viral Load\") #viral load in deer saliva, relative to humans (genomic copies per ml)  r_deer <- get_EE_param_vals(data = elicitation_data, my_param = \"Dose-Response\")# Dose response coefficient for deer and SARS-CoV-2  epsilon_dc <- get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\") #Probability of direct contact between deer, given proximity.  sigma_dc_deer_deer_null <- calc_sigma_dc(C_nu = C_nu_deer, nsamples = nsamples) #Infection probability of 0.1 ml of saliva being transferred between deer on contact  t_contact_deer_deer_null <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer Proximity Duration (minutes)\") #Estimate duration of deer-deer proximity event...  inits.fall <- initial_compartments(draws = nsamples) #Calculate initial distributions of animals across SIR compartments inits.steady <- initial_compartments(draws = nsamples, steady = TRUE) #Calculate initial distributions of animals across SIR compartments, excluding solving cumulative cases.  gamma_recov <- rep(1/6, nsamples) alpha_immunity_null <- 1 / get_EE_param_vals(data = elicitation_data, my_param = 'Temporary Immunity')"},{"path":"/articles/Connected_Systems.html","id":"system-calculation","dir":"Articles","previous_headings":"","what":"System calculation","title":"SARS-CoV-2 introduction and spread in connected systems","text":", combine wild scenario captive scenario, fence line separating populations. combination, define new parameters defined previously. work combinations, fewer parameters added exist earlier combinations.","code":""},{"path":"/articles/Connected_Systems.html","id":"captive-deer-in-outdoor-ranch-facilties-connected-to-wild-rural-deer","dir":"Articles","previous_headings":"System calculation","what":"Captive deer in outdoor ranch facilties connected to wild, rural deer","title":"SARS-CoV-2 introduction and spread in connected systems","text":"","code":"#Ranch side of the fence... omega_cc_ranch <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17) #Deer-to-deer proximity rate in ranch context, mimicking wild proximity rates with the influence of baiting (events per day).  sigma_aero_deer_deer_null <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples) #...and estimate probability of infection given that duration of proximity event.  t_contact_deer_human_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\") #Estimate duration of human-deer proximity event in ranch facility context...  omega_hc_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 #Human-to-deer proximity rate in ranch context, mimicking suburban proximitty rates (events per day).  sigma_aero_deer_human_ranch <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_ranch / 60,                                         r = r_deer, nsamples = nsamples)#... and calculate infection probability given the duration of a human-deer proximity event.  #Fenceline interactions occure omega_cw <- 0.00072 / get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\") #Deer-to-deer proximity rate along fenceline (events per day).  #... and on the wild side of the fence: omega_ww <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild)  t_contact_deer_human_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Rural (minutes)\")  omega_hw_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") /120  sigma_aero_deer_human_rural <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_rural / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  ranch_rural.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural <- run(iter = nsamples, initial_compartments = inits.fall, initial_compartments_steady = inits.steady, params = ranch_rural.params, times = times, name = \"Outdoor ranch and rural system\")"},{"path":"/articles/Connected_Systems.html","id":"captive-deer-in-outdoor-ranch-facilties-connected-to-wild-suburban-deer","dir":"Articles","previous_headings":"System calculation","what":"Captive deer in outdoor ranch facilties connected to wild, suburban deer","title":"SARS-CoV-2 introduction and spread in connected systems","text":"modify ’s happening wild side fence suburban context, can keep captive side parameterized describe outdoor ranch facility scenario.","code":"t_contact_deer_human_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Suburban (minutes)\")  omega_hw_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120  sigma_aero_deer_human_suburban <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_suburban / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  ranch_suburban.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban <- run(iter = nsamples, initial_compartments = inits.fall, initial_compartments_steady = inits.steady, params = ranch_suburban.params, times = times, name = \"Outdoor ranch and suburban system\")"},{"path":"/articles/Connected_Systems.html","id":"captive-deer-in-intensive-facilties-connected-to-wild-rural-deer","dir":"Articles","previous_headings":"System calculation","what":"Captive deer in intensive facilties connected to wild, rural deer","title":"SARS-CoV-2 introduction and spread in connected systems","text":"Since defined parameter sets wild scenarios, modify ’s happening captive side fence.","code":"omega_cc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Deer Proximity Rate, Captive (per day)\")  sigma_aero_deer_deer_intensive <- calc_sigma_aero(C_nu = C_nu_deer,                                             t_contact = t_contact_deer_deer_null / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  omega_hc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120  t_contact_deer_human_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")   sigma_aero_deer_human_intensive <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                              t_contact = t_contact_deer_human_intensive / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  intensive_rural.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural <- run(iter = nsamples, initial_compartments = inits.fall, initial_compartments_steady = inits.steady, params = intensive_rural.params, times = times, name = \"Intensive facility and rural system\")"},{"path":"/articles/Connected_Systems.html","id":"captive-deer-in-intensive-facilties-connected-to-wild-suburban-deer","dir":"Articles","previous_headings":"System calculation","what":"Captive deer in intensive facilties connected to wild, suburban deer","title":"SARS-CoV-2 introduction and spread in connected systems","text":"Finally, final combination intensive captive facilities wild, suburban deer.","code":"intensive_suburban.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban <- run(iter = nsamples, initial_compartments = inits.fall, initial_compartments_steady = inits.steady, params = intensive_suburban.params, times = times, name = \"Intensive facility and suburban system\")"},{"path":"/articles/Connected_Systems.html","id":"summarize-prevalence-cumulative-infections-and-persistence-for-each-system","dir":"Articles","previous_headings":"","what":"Summarize prevalence, cumulative infections, and persistence for each system","title":"SARS-CoV-2 introduction and spread in connected systems","text":"whitetailedSIRS::SIRS_analysis_by_context, compute average prevalence, cumulative infections, persistence system (captive:wild scenario combination).","code":"persist.threshold <- 0.001 #Set prevalence threshold  #Ranch and rural system proj_ranch_rural %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(proj_ranch_rural$Context)[1],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%    summarize(Wild = mean(I_wild), Captive = mean(I_captive), Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative)) %>%     mutate(., Context = factor(Context, levels = c(\"Outdoor ranch and rural system\"))) %>%    arrange(., run_id) -> Prev_cumulative_ranch_rural_system_df #> `summarise()` has grouped output by 'Context'. You can override using the #> `.groups` argument.  proj_ranch_rural %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(proj_ranch_rural$Context)[1],nsamples))) %>%   mutate(., Persist_wild = I_wild > persist.threshold, Persist_captive = I_captive > persist.threshold) %>%    mutate(., Context = factor(Context, levels = c(\"Outdoor ranch and rural system\"))) %>%    select(., run_id, Context, Persist_wild, Persist_captive) %>%     merge(Prev_cumulative_ranch_rural_system_df,.) %>%        arrange(., run_id)-> Prev_cumulative_persist_ranch_rural_system_df  #Ranch and suburban system proj_ranch_suburban %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(proj_ranch_suburban$Context)[1],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%    summarize(Wild = mean(I_wild), Captive = mean(I_captive), Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative)) %>%     mutate(., Context = factor(Context, levels = c(\"Outdoor ranch and suburban system\"))) %>%    arrange(., run_id) -> Prev_cumulative_ranch_suburban_system_df #> `summarise()` has grouped output by 'Context'. You can override using the #> `.groups` argument.  proj_ranch_suburban %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(proj_ranch_suburban$Context)[1],nsamples))) %>%   mutate(., Persist_wild = I_wild > persist.threshold, Persist_captive = I_captive > persist.threshold) %>%    mutate(., Context = factor(Context, levels = c(\"Outdoor ranch and suburban system\"))) %>%    select(., run_id, Context, Persist_wild, Persist_captive) %>%     merge(Prev_cumulative_ranch_suburban_system_df,.) %>%        arrange(., run_id)-> Prev_cumulative_persist_ranch_suburban_system_df  #Intensive facility and rural system proj_intensive_rural %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(proj_intensive_rural$Context)[1],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%    summarize(Wild = mean(I_wild), Captive = mean(I_captive), Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative)) %>%     mutate(., Context = factor(Context, levels = c(\"Intensive facility and rural system\"))) %>%    arrange(., run_id) -> Prev_cumulative_intensive_rural_system_df #> `summarise()` has grouped output by 'Context'. You can override using the #> `.groups` argument.  proj_intensive_rural %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(proj_intensive_rural$Context)[1],nsamples))) %>%   mutate(., Persist_wild = I_wild > persist.threshold, Persist_captive = I_captive > persist.threshold) %>%    mutate(., Context = factor(Context, levels = c(\"Intensive facility and rural system\"))) %>%    select(., run_id, Context, Persist_wild, Persist_captive) %>%     merge(Prev_cumulative_intensive_rural_system_df,.) %>%        arrange(., run_id)-> Prev_cumulative_persist_intensive_rural_system_df  #Ranch and suburban system proj_intensive_suburban %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(proj_intensive_suburban$Context)[1],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%    summarize(Wild = mean(I_wild), Captive = mean(I_captive), Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative)) %>%     mutate(., Context = factor(Context, levels = c(\"Intensive facility and suburban system\"))) %>%    arrange(., run_id) -> Prev_cumulative_intensive_suburban_system_df #> `summarise()` has grouped output by 'Context'. You can override using the #> `.groups` argument.  proj_intensive_suburban %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(proj_intensive_suburban$Context)[1],nsamples))) %>%   mutate(., Persist_wild = I_wild > persist.threshold, Persist_captive = I_captive > persist.threshold) %>%    mutate(., Context = factor(Context, levels = c(\"Intensive facility and suburban system\"))) %>%    select(., run_id, Context, Persist_wild, Persist_captive) %>%     merge(Prev_cumulative_intensive_suburban_system_df,.) %>%        arrange(., run_id)-> Prev_cumulative_persist_intensive_suburban_system_df"},{"path":"/articles/Connected_Systems.html","id":"compare-outbreak-metrics-to-simulations-with-isolated-scenarios","dir":"Articles","previous_headings":"","what":"Compare outbreak metrics to simulations with isolated scenarios","title":"SARS-CoV-2 introduction and spread in connected systems","text":", take results whitetailedSIRS::SIRS_analysis_by_contexts calculate differences prevalence, cumulative infections, persistence fenceline interactions can occur. can combine summarize differences outbreak metrics. resulting table presented Rosenblatt et al. Prep Table 2.","code":"#Calculate change in prevalence and persistence #step 1: prep single context run_ids to correspond to systems df %>%     mutate(., run_id = case_when(Context == \"Outdoor ranch\" ~ run_id-0,       Context == \"Intensive facility\" ~ run_id-200,       Context == \"Wild, rural\" ~ run_id-400,       Context == \"Wild, suburban\" ~ run_id-600,)) -> df_to_match  #Ranch, rural Prev_cumulative_persist_ranch_rural_system_df %>%     merge(., df_to_match[which(df_to_match$Context== \"Outdoor ranch\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"System_wild_prevalence\" = \"Wild\", \"System_captive_prevalence\" = \"Captive\", \"System_wild_cumulative\" = \"Cumulative_wild_infections\", \"System_captive_cumulative\" = \"Cumulative_captive_infections\",\"System_wild_persistence\" = \"Persist_wild\", \"System_captive_persistence\" = \"Persist_captive\", \"Context_captive_prevalence\" = \"Prevalence\", \"Context_captive_persistence\" = \"Persist\", \"Context_captive_cumulative\" = \"Cumulative_infections\") %>%     merge(., df_to_match[which(df_to_match$Context== \"Wild, rural\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"Context_wild_prevalence\" = \"Prevalence\", \"Context_wild_persistence\" = \"Persist\", \"Context_wild_cumulative\" = \"Cumulative_infections\") %>%     mutate(., Change_Prev_Wild = System_wild_prevalence - Context_wild_prevalence,            Change_Prev_Captive = System_captive_prevalence - Context_captive_prevalence,            Proportional_Change_Prev_Wild = Change_Prev_Wild/Context_wild_prevalence,            Proportional_Change_Prev_Captive = Change_Prev_Captive/Context_captive_prevalence,            Change_Cumulative_Wild = System_wild_cumulative - Context_wild_cumulative,            Change_Cumulative_Captive = System_captive_cumulative - Context_captive_cumulative,            Change_Persist_Wild = System_wild_persistence - Context_wild_persistence,            Change_Persist_Captive = System_captive_persistence - Context_captive_persistence) %>%     select(., Context, Change_Prev_Wild, Change_Prev_Captive, Proportional_Change_Prev_Wild, Proportional_Change_Prev_Captive, Change_Cumulative_Wild, Change_Cumulative_Captive, Change_Persist_Wild, Change_Persist_Captive) %>%     rename(., System = Context) -> ranch_rural_results  #Ranch, suburban Prev_cumulative_persist_ranch_suburban_system_df %>%     merge(., df_to_match[which(df_to_match$Context== \"Outdoor ranch\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"System_wild_prevalence\" = \"Wild\", \"System_captive_prevalence\" = \"Captive\", \"System_wild_cumulative\" = \"Cumulative_wild_infections\", \"System_captive_cumulative\" = \"Cumulative_captive_infections\",\"System_wild_persistence\" = \"Persist_wild\", \"System_captive_persistence\" = \"Persist_captive\", \"Context_captive_prevalence\" = \"Prevalence\", \"Context_captive_persistence\" = \"Persist\", \"Context_captive_cumulative\" = \"Cumulative_infections\") %>%     merge(., df_to_match[which(df_to_match$Context== \"Wild, suburban\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"Context_wild_prevalence\" = \"Prevalence\", \"Context_wild_persistence\" = \"Persist\", \"Context_wild_cumulative\" = \"Cumulative_infections\") %>%     mutate(., Change_Prev_Wild = System_wild_prevalence - Context_wild_prevalence,            Change_Prev_Captive = System_captive_prevalence - Context_captive_prevalence,            Proportional_Change_Prev_Wild = Change_Prev_Wild/Context_wild_prevalence,            Proportional_Change_Prev_Captive = Change_Prev_Captive/Context_captive_prevalence,            Change_Cumulative_Wild = System_wild_cumulative - Context_wild_cumulative,            Change_Cumulative_Captive = System_captive_cumulative - Context_captive_cumulative,            Change_Persist_Wild = System_wild_persistence - Context_wild_persistence,            Change_Persist_Captive = System_captive_persistence - Context_captive_persistence) %>%     select(., Context, Change_Prev_Wild, Change_Prev_Captive, Proportional_Change_Prev_Wild, Proportional_Change_Prev_Captive, Change_Cumulative_Wild, Change_Cumulative_Captive, Change_Persist_Wild, Change_Persist_Captive) %>%     rename(., System = Context) -> ranch_suburban_results  #Intensive, rural Prev_cumulative_persist_intensive_rural_system_df %>%     merge(., df_to_match[which(df_to_match$Context== \"Intensive facility\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"System_wild_prevalence\" = \"Wild\", \"System_captive_prevalence\" = \"Captive\", \"System_wild_cumulative\" = \"Cumulative_wild_infections\", \"System_captive_cumulative\" = \"Cumulative_captive_infections\",\"System_wild_persistence\" = \"Persist_wild\", \"System_captive_persistence\" = \"Persist_captive\", \"Context_captive_prevalence\" = \"Prevalence\", \"Context_captive_persistence\" = \"Persist\", \"Context_captive_cumulative\" = \"Cumulative_infections\") %>%     merge(., df_to_match[which(df_to_match$Context== \"Wild, rural\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"Context_wild_prevalence\" = \"Prevalence\", \"Context_wild_persistence\" = \"Persist\", \"Context_wild_cumulative\" = \"Cumulative_infections\") %>%     mutate(., Change_Prev_Wild = System_wild_prevalence - Context_wild_prevalence,            Change_Prev_Captive = System_captive_prevalence - Context_captive_prevalence,            Proportional_Change_Prev_Wild = Change_Prev_Wild/Context_wild_prevalence,            Proportional_Change_Prev_Captive = Change_Prev_Captive/Context_captive_prevalence,            Change_Cumulative_Wild = System_wild_cumulative - Context_wild_cumulative,            Change_Cumulative_Captive = System_captive_cumulative - Context_captive_cumulative,            Change_Persist_Wild = System_wild_persistence - Context_wild_persistence,            Change_Persist_Captive = System_captive_persistence - Context_captive_persistence) %>%     select(., Context, Change_Prev_Wild, Change_Prev_Captive, Proportional_Change_Prev_Wild, Proportional_Change_Prev_Captive, Change_Cumulative_Wild, Change_Cumulative_Captive, Change_Persist_Wild, Change_Persist_Captive) %>%     rename(., System = Context) -> intensive_rural_results  #Intensive, suburban Prev_cumulative_persist_intensive_suburban_system_df %>%     merge(., df_to_match[which(df_to_match$Context== \"Intensive facility\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"System_wild_prevalence\" = \"Wild\", \"System_captive_prevalence\" = \"Captive\", \"System_wild_cumulative\" = \"Cumulative_wild_infections\", \"System_captive_cumulative\" = \"Cumulative_captive_infections\",\"System_wild_persistence\" = \"Persist_wild\", \"System_captive_persistence\" = \"Persist_captive\", \"Context_captive_prevalence\" = \"Prevalence\", \"Context_captive_persistence\" = \"Persist\", \"Context_captive_cumulative\" = \"Cumulative_infections\") %>%     merge(., df_to_match[which(df_to_match$Context== \"Wild, suburban\"),c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\") %>%     rename(., \"Context_wild_prevalence\" = \"Prevalence\", \"Context_wild_persistence\" = \"Persist\", \"Context_wild_cumulative\" = \"Cumulative_infections\") %>%     mutate(., Change_Prev_Wild = System_wild_prevalence - Context_wild_prevalence,            Change_Prev_Captive = System_captive_prevalence - Context_captive_prevalence,            Proportional_Change_Prev_Wild = Change_Prev_Wild/Context_wild_prevalence,            Proportional_Change_Prev_Captive = Change_Prev_Captive/Context_captive_prevalence,            Change_Cumulative_Wild = System_wild_cumulative - Context_wild_cumulative,            Change_Cumulative_Captive = System_captive_cumulative - Context_captive_cumulative,            Change_Persist_Wild = System_wild_persistence - Context_wild_persistence,            Change_Persist_Captive = System_captive_persistence - Context_captive_persistence) %>%     select(., Context, Change_Prev_Wild, Change_Prev_Captive, Proportional_Change_Prev_Wild, Proportional_Change_Prev_Captive, Change_Cumulative_Wild, Change_Cumulative_Captive, Change_Persist_Wild, Change_Persist_Captive) %>%     rename(., System = Context) -> intensive_suburban_results sirs_results_systems <- rbind(ranch_suburban_results,intensive_suburban_results,ranch_rural_results,intensive_rural_results)  sirs_results_systems %>%     group_by(., System) %>%     summarise(., Wild_Prevalence_Change = paste0(round(median(Change_Prev_Wild)*100,4), \" (\", round(quantile(Change_Prev_Wild,probs = 0.1)*100,4), \"-\",round(quantile(Change_Prev_Wild,probs = 0.9)*100,4),\")\"), Captive_Prevalence_Change = paste0(round(median(Change_Prev_Captive)*100,4), \" (\", round(quantile(Change_Prev_Captive,probs = 0.1)*100,4), \"-\",round(quantile(Change_Prev_Captive,probs = 0.9)*100,4),\")\"),               Wild_Prevalence_Proportional_Change = paste0(round(median(Proportional_Change_Prev_Wild)*100,4), \" (\", round(quantile(Proportional_Change_Prev_Wild,probs = 0.1)*100,4), \"-\",round(quantile(Proportional_Change_Prev_Wild,probs = 0.9)*100,4),\")\"), Proportional_Captive_Prevalence_Change = paste0(round(median(Proportional_Change_Prev_Captive)*100,4), \" (\", round(quantile(Proportional_Change_Prev_Captive,probs = 0.1)*100,4), \"-\",round(quantile(Proportional_Change_Prev_Captive,probs = 0.9)*100,4),\")\"),              Wild_Cumulative_Change = paste0(round(median(Change_Cumulative_Wild)*100,4), \" (\", round(quantile(Change_Cumulative_Wild,probs = 0.1)*100,4), \"-\",round(quantile(Change_Cumulative_Wild,probs = 0.9)*100,4),\")\"), Captive_Cumulative_Change = paste0(round(median(Change_Cumulative_Captive)*100,4), \" (\", round(quantile(Change_Cumulative_Captive,probs = 0.1)*100,4), \"-\",round(quantile(Change_Cumulative_Captive,probs = 0.9)*100,4),\")\"),               Wild_Persist_Change = paste0(round(binom.confint(sum(Change_Persist_Wild),nsamples,methods = \"exact\")$mean,2), \" (\", round(binom.confint(sum(Change_Persist_Wild),nsamples,methods = \"exact\", conf.level = 0.80)$lower,2), \"-\", round(binom.confint(sum(Change_Persist_Wild),nsamples,methods = \"exact\", conf.level = 0.80)$upper,2), \")\"),              Captive_Persist_Change = sum(Change_Persist_Captive)) ->fence_effect  fence_effect %>%   kbl() %>%   kable_paper(\"hover\", full_width = T)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"establish-systems-and-test-alternatives","dir":"Articles","previous_headings":"","what":"Establish Systems and Test Alternatives","title":"Evaluation of management alternatives across systems","text":"define captive-wild system, simulate SARS-CoV-2 outbreaks interventions, apply 12 candidate interventions altering relevant parameter. 13 simulations (1 action + 12 interventions) combined one data frame end code chunk.","code":""},{"path":"/articles/Management_Alternatives_Systems.html","id":"combined-system-of-outdoor-ranch-facilities-and-wild-deer-in-a-suburban-setting","dir":"Articles","previous_headings":"Establish Systems and Test Alternatives","what":"Combined system of outdoor ranch facilities and wild deer in a suburban setting","title":"Evaluation of management alternatives across systems","text":"####Calcualte prevalence, cumulative infections, persistence interventions outdoor ranch : wild, suburban system","code":"ranch_suburban.inits.fall <- initial_compartments(draws = nsamples) ranch_suburban.inits.steady <- initial_compartments(draws = nsamples, steady = TRUE)   ranch_suburban.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_null <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params, times = times, name = \"Baseline\")  #Alternatives #1. 10% density reduction omega_ww_alt1_density.red.10 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.9)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   ranch_suburban.params_alt1 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt1_density.red.10, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt1 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt1, times = times, name = \"Reduce wild density by 10%\")  #2. 25% density reduction omega_ww_alt2_density.red.25 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  ranch_suburban.params_alt2 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt2_density.red.25, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt2 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt2, times = times, name = \"Reduce wild density by 25%\")  #3. Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  ranch_suburban.params_alt3 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt3 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt3, times = times, name = \"Eliminate baiting\")  #4. Pause research (assuming random 1-50% of human-wild deer interaction) omega_hw_alt4_pause.research <- omega_hw_suburban*runif(nsamples, min = 0.5, max = 0.99) #reduce human deer proximity rate in the wild up to 50%  ranch_suburban.params_alt4 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_alt4_pause.research, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt4 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt4, times = times, name = \"Pause Research\")  #5. Require PPE for humans in wild settings sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_suburban/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  ranch_suburban.params_alt5 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt5 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt5, times = times, name = \"PPE, Wild\")  #6. Require PPE for humans in captive settings sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_ranch/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  ranch_suburban.params_alt6 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt6 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt6, times = times, name = \"PPE, Captive\")  #7. Require PPE for humans in wild and captive settings (use derived parameters from 5 and 6)  ranch_suburban.params_alt7 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_suburban_alt7 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt7, times = times, name = \"PPE, Both\")  #8. Vaccinate captive deer (start with r_captive = 1) ranch_suburban.inits_alt8 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) ranch_suburban.inits_alt8.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  proj_ranch_suburban_alt8 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits_alt8, initial_compartments_steady = ranch_suburban.inits_alt8.steady,params = ranch_suburban.params, times = times, name = \"Vaccinate captive deer\")  #9. Vaccinate and boost captive deer (start with r_captive = 1) ranch_suburban.inits_alt9 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) ranch_suburban.inits_alt9.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  boost_alt9 <- rep(0.9,nsamples)  ranch_suburban.params_alt9 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)   proj_ranch_suburban_alt9 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits_alt9, initial_compartments_steady = ranch_suburban.inits_alt9.steady, params = ranch_suburban.params_alt9, times = times, name = \"Vaccinate and boost captive deer\")  #10. Double fence captive facilities omega_cw_alt10 <- rep(0, nsamples)  ranch_suburban.params_alt10 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw_alt10, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_ranch_suburban_alt10 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt10, times = times, name = \"Double-fence captive facilities\")  #11. Restrict human interaction (using proportional reduction from suburban to rural) human_restrictions <- (get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") / 120)/(get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") / 120)  ranch_suburban.params_alt11 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban*human_restrictions, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_ranch_suburban_alt11 <- run(iter = nsamples, initial_compartments = ranch_suburban.inits.fall, initial_compartments_steady = ranch_suburban.inits.steady, params = ranch_suburban.params_alt11, times = times, name = \"Restrict human interactions\")  #12. Improve indoor facility air exchange (does not apply to outdoor ranch facilities)  proj_ranch_suburban <- rbind(proj_ranch_suburban_null, proj_ranch_suburban_alt1, proj_ranch_suburban_alt2, proj_ranch_suburban_alt3, proj_ranch_suburban_alt4, proj_ranch_suburban_alt5, proj_ranch_suburban_alt6, proj_ranch_suburban_alt7, proj_ranch_suburban_alt8, proj_ranch_suburban_alt9, proj_ranch_suburban_alt10, proj_ranch_suburban_alt11) persist.threshold <- 0.001  proj_ranch_suburban %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_ranch_suburban_df  proj_ranch_suburban %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Outdoor ranch and suburban deer\",nrow(.)), Alternative = c(rep(unique(proj_ranch_suburban$Context)[1],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[2],length(times)*nsamples), rep(unique(proj_ranch_suburban$Context)[3],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[4],length(times)*nsamples), rep(unique(proj_ranch_suburban$Context)[5],length(times)*nsamples), rep(unique(proj_ranch_suburban$Context)[6],length(times)*nsamples), rep(unique(proj_ranch_suburban$Context)[7],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[8],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[9],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[10],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[11],length(times)*nsamples),rep(unique(proj_ranch_suburban$Context)[12],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_ranch_suburban_df, by = \"run_id\")-> alternatives_for_ranch_suburban_complex"},{"path":"/articles/Management_Alternatives_Systems.html","id":"combined-system-of-outdoor-ranch-facilities-and-wild-deer-in-a-rural-setting","dir":"Articles","previous_headings":"Establish Systems and Test Alternatives","what":"Combined system of outdoor ranch facilities and wild deer in a rural setting","title":"Evaluation of management alternatives across systems","text":"","code":"ranch_rural.inits.fall <- initial_compartments(draws = nsamples) ranch_rural.inits.steady <- initial_compartments(draws = nsamples, steady = TRUE)  ranch_rural.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_null <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params, times = times, name = \"Baseline\")  #Alternatives #1. 10% density reduction omega_ww_alt1_density.red.10 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.9)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   ranch_rural.params_alt1 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt1_density.red.10, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt1 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt1, times = times, name = \"Reduce wild density by 10%\")  #2. 25% density reduction omega_ww_alt2_density.red.25 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  ranch_rural.params_alt2 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt2_density.red.25, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt2 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt2, times = times, name = \"Reduce wild density by 25%\")  #3. Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  ranch_rural.params_alt3 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt3 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt3, times = times, name = \"Eliminate baiting\")  #4. Pause research (assuming random 1-50% of human-wild deer interaction) omega_hw_alt4_pause.research <- omega_hw_rural*runif(nsamples, min = 0.5, max = 0.99) #reduce human deer proximity rate in the wild up to 50%  ranch_rural.params_alt4 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_alt4_pause.research, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt4 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt4, times = times, name = \"Pause Research\")  #5. Require PPE for humans in wild settings sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_rural/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  ranch_rural.params_alt5 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt5 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt5, times = times, name = \"PPE, Wild\")  #6. Require PPE for humans in captive settings sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_ranch/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  ranch_rural.params_alt6 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt6 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt6, times = times, name = \"PPE, Captive\")  #7. Require PPE for humans in wild and captive settings (use derived parameters from 5 and 6)  ranch_rural.params_alt7 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_ranch_rural_alt7 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt7, times = times, name = \"PPE, Both\")  #8. Vaccinate captive deer (start with r_captive = 1) ranch_rural.inits_alt8 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) ranch_rural.inits_alt8_steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = T)  proj_ranch_rural_alt8 <- run(iter = nsamples, initial_compartments = ranch_rural.inits_alt8, initial_compartments_steady = ranch_rural.inits_alt8_steady, params = ranch_rural.params, times = times, name = \"Vaccinate captive deer\")  #9. Vaccinate and boost captive deer (start with r_captive = 1) ranch_rural.inits_alt9 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) ranch_rural.inits_alt9_steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = T)   boost_alt9 <- rep(0.9,nsamples)  ranch_rural.params_alt9 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)   proj_ranch_rural_alt9 <- run(iter = nsamples, initial_compartments = ranch_rural.inits_alt9, initial_compartments_steady = ranch_rural.inits_alt9_steady, params = ranch_rural.params_alt9, times = times, name = \"Vaccinate and boost captive deer\")  #10. Double fence captive facilities omega_cw_alt10 <- rep(0, nsamples)  ranch_rural.params_alt10 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw_alt10, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_ranch_rural_alt10 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt10, times = times, name = \"Double-fence captive facilities\")  #11. Restrict human interaction (using proportional reduction from suburban to rural) human_restrictions <- (get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") / 120)/(get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") / 120)  ranch_rural.params_alt11 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural*human_restrictions, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_ranch_rural_alt11 <- run(iter = nsamples, initial_compartments = ranch_rural.inits.fall, initial_compartments_steady = ranch_rural.inits.steady, params = ranch_rural.params_alt11, times = times, name = \"Restrict human interactions\")  #12. Improve indoor facility air exchange (does not apply to outdoor ranch facilities)  proj_ranch_rural <- rbind(proj_ranch_rural_null, proj_ranch_rural_alt1, proj_ranch_rural_alt2, proj_ranch_rural_alt3, proj_ranch_rural_alt4, proj_ranch_rural_alt5, proj_ranch_rural_alt6, proj_ranch_rural_alt7, proj_ranch_rural_alt8, proj_ranch_rural_alt9, proj_ranch_rural_alt10, proj_ranch_rural_alt11)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"calculate-prevalence-cumulative-infections-and-persistence-for-interventions-in-the-outdoor-ranch-wild-rural-system","dir":"Articles","previous_headings":"Establish Systems and Test Alternatives > Combined system of outdoor ranch facilities and wild deer in a rural setting","what":"Calculate prevalence, cumulative infections, and persistence for interventions in the outdoor ranch : wild, rural system","title":"Evaluation of management alternatives across systems","text":"","code":"persist.threshold <- 0.001  proj_ranch_rural %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_ranch_rural_df  proj_ranch_rural %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Outdoor ranch and rural deer\",nrow(.)), Alternative = c(rep(unique(proj_ranch_rural$Context)[1],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[2],length(times)*nsamples), rep(unique(proj_ranch_rural$Context)[3],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[4],length(times)*nsamples), rep(unique(proj_ranch_rural$Context)[5],length(times)*nsamples), rep(unique(proj_ranch_rural$Context)[6],length(times)*nsamples), rep(unique(proj_ranch_rural$Context)[7],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[8],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[9],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[10],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[11],length(times)*nsamples),rep(unique(proj_ranch_rural$Context)[12],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_ranch_rural_df, by = \"run_id\")-> alternatives_for_ranch_rural_complex"},{"path":"/articles/Management_Alternatives_Systems.html","id":"combined-system-of-intensive-captive-facilities-and-wild-deer-in-a-suburban-setting","dir":"Articles","previous_headings":"Establish Systems and Test Alternatives","what":"Combined system of intensive captive facilities and wild deer in a suburban setting","title":"Evaluation of management alternatives across systems","text":"","code":"intensive_suburban.inits.fall <- initial_compartments(draws = nsamples) intensive_suburban.inits.steady <- initial_compartments(draws = nsamples, steady = TRUE)   intensive_suburban.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_null <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params, times = times, name = \"Baseline\")  #Alternatives #1. 10% density reduction omega_ww_alt1_density.red.10 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.9)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   intensive_suburban.params_alt1 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt1_density.red.10, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt1 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt1, times = times, name = \"Reduce wild density by 10%\")  #2. 25% density reduction omega_ww_alt2_density.red.25 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  intensive_suburban.params_alt2 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt2_density.red.25, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt2 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt2, times = times, name = \"Reduce wild density by 25%\")  #3. Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  intensive_suburban.params_alt3 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt3 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt3, times = times, name = \"Eliminate baiting\")  #4. Pause research (assuming random 1-50% of human-wild deer interaction) omega_hw_alt4_pause.research <- omega_hw_suburban*runif(nsamples, min = 0.5, max = 0.99) #reduce human deer proximity rate in the wild up to 50%  intensive_suburban.params_alt4 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_alt4_pause.research, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt4 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt4, times = times, name = \"Pause Research\")  #5. Require PPE for humans in wild settings sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_suburban/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  intensive_suburban.params_alt5 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt5 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt5, times = times, name = \"PPE, Wild\")  #6. Require PPE for humans in captive settings sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_intensive/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  intensive_suburban.params_alt6 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt6 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt6, times = times, name = \"PPE, Captive\")  #7. Require PPE for humans in wild and captive settings (use derived parameters from 5 and 6)  intensive_suburban.params_alt7 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_suburban_alt7 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params =  intensive_suburban.params_alt7, times = times, name = \"PPE, Both\")  #8. Vaccinate captive deer (start with r_captive = 1) intensive_suburban.inits_alt8.fall <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) intensive_suburban.inits_alt8.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  proj_intensive_suburban_alt8 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits_alt8.fall, initial_compartments_steady = intensive_suburban.inits_alt8.steady, params = intensive_suburban.params, times = times, name = \"Vaccinate captive deer\")  #9. Vaccinate and boost captive deer (start with r_captive = 1) intensive_suburban.inits_alt9.fall <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) intensive_suburban.inits_alt9.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  boost_alt9 <- rep(0.9,nsamples)  intensive_suburban.params_alt9 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)   proj_intensive_suburban_alt9 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits_alt9.fall, initial_compartments_steady = intensive_suburban.inits_alt9.steady, params = intensive_suburban.params_alt9, times = times, name = \"Vaccinate and boost captive deer\")  #10. Double fence captive facilities omega_cw_alt10 <- rep(0, nsamples)  intensive_suburban.params_alt10 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw_alt10, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_suburban_alt10 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt10, times = times, name = \"Double-fence captive facilities\")  #11. Restrict human interaction (using proportional reduction from suburban to rural) human_restrictions <- (get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") / 120)/(get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") / 120)  intensive_suburban.params_alt11 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban*human_restrictions, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_suburban_alt11 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt11, times = times, name = \"Restrict human interactions\")  #12. Improve indoor facility air exchange sigma_aero_deer_human_intensive_alt12 <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_intensive/60, r = r_deer, nsamples = nsamples)  sigma_aero_deer_deer_intensive_alt12 <- calc_sigma_aero(C_nu = C_nu_deer, t_contact = t_contact_deer_deer_null/60, r = r_deer, nsamples = nsamples)  intensive_suburban.params_alt12 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_suburban, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive_alt12, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive_alt12, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_suburban_alt12 <- run(iter = nsamples, initial_compartments = intensive_suburban.inits.fall, initial_compartments_steady = intensive_suburban.inits.steady, params = intensive_suburban.params_alt12, times = times, name = \"Improve indoor facility air quality\")  proj_intensive_suburban <- rbind(proj_intensive_suburban_null, proj_intensive_suburban_alt1, proj_intensive_suburban_alt2, proj_intensive_suburban_alt3, proj_intensive_suburban_alt4, proj_intensive_suburban_alt5, proj_intensive_suburban_alt6, proj_intensive_suburban_alt7, proj_intensive_suburban_alt8, proj_intensive_suburban_alt9, proj_intensive_suburban_alt10, proj_intensive_suburban_alt11, proj_intensive_suburban_alt12)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"calculate-prevalence-cumulative-infections-and-persistence-for-interventions-in-the-intensive-facility-wild-suburban-system","dir":"Articles","previous_headings":"Establish Systems and Test Alternatives > Combined system of intensive captive facilities and wild deer in a suburban setting","what":"Calculate prevalence, cumulative infections, and persistence for interventions in the intensive facility : wild, suburban system","title":"Evaluation of management alternatives across systems","text":"","code":"persist.threshold <- 0.001  proj_intensive_suburban %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_intensive_suburban_df   proj_intensive_suburban %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Intensive facility and suburban deer\",nrow(.)), Alternative = c(rep(unique(proj_intensive_suburban$Context)[1],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[2],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[3],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[4],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[5],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[6],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[7],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[8],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[9],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[10],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[11],length(times)*nsamples),rep(unique(proj_intensive_suburban$Context)[12],length(times)*nsamples), rep(unique(proj_intensive_suburban$Context)[13],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%    merge(.,Persist_intensive_suburban_df, by = \"run_id\") -> alternatives_for_intensive_suburban_complex"},{"path":"/articles/Management_Alternatives_Systems.html","id":"combined-system-of-intensive-captive-facilities-and-wild-deer-in-a-rural-setting","dir":"Articles","previous_headings":"Establish Systems and Test Alternatives","what":"Combined system of intensive captive facilities and wild deer in a rural setting","title":"Evaluation of management alternatives across systems","text":"","code":"intensive_rural.inits.fall <- initial_compartments(draws = nsamples) intensive_rural.inits.steady <- initial_compartments(draws = nsamples, steady = TRUE)   intensive_rural.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_null <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params, times = times, name = \"Baseline\")  #Alternatives #1. 10% density reduction omega_ww_alt1_density.red.10 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.9)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)   intensive_rural.params_alt1 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt1_density.red.10, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt1 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt1, times = times, name = \"Reduce wild density by 10%\")  #2. 25% density reduction omega_ww_alt2_density.red.25 <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)*(get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17)  intensive_rural.params_alt2 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt2_density.red.25, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt2 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt2, times = times, name = \"Reduce wild density by 25%\")  #3. Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  intensive_rural.params_alt3 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt3 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt3, times = times, name = \"Eliminate baiting\")  #4. Pause research (assuming random 1-50% of human-wild deer interaction) omega_hw_alt4_pause.research <- omega_hw_rural*runif(nsamples, min = 0.5, max = 0.99) #reduce human deer proximity rate in the wild up to 50%  intensive_rural.params_alt4 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_alt4_pause.research, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt4 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt4, times = times, name = \"Pause Research\")  #5. Require PPE for humans in wild settings sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_rural/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  intensive_rural.params_alt5 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt5 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt5, times = times, name = \"PPE, Wild\")  #6. Require PPE for humans in captive settings sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_intensive/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  intensive_rural.params_alt6 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt6 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt6, times = times, name = \"PPE, Captive\")  #7. Require PPE for humans in wild and captive settings (use derived parameters from 5 and 6)  intensive_rural.params_alt7 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj_intensive_rural_alt7 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt7, times = times, name = \"PPE, Both\")  #8. Vaccinate captive deer (start with r_captive = 1) intensive_rural.inits.fall_alt8 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) intensive_rural.inits.steady_alt8 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  proj_intensive_rural_alt8 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall_alt8, initial_compartments_steady = intensive_rural.inits.steady_alt8, params = intensive_rural.params, times = times, name = \"Vaccinate captive deer\")  #9. Vaccinate and boost captive deer (start with r_captive = 1) intensive_rural.inits.fall_alt9 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) intensive_rural.inits.steady_alt9 <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  boost_alt9 <- rep(0.9,nsamples)  intensive_rural.params_alt9 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)   proj_intensive_rural_alt9 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall_alt9, initial_compartments_steady = intensive_rural.inits.steady_alt9, params = intensive_rural.params_alt9, times = times, name = \"Vaccinate and boost captive deer\")  #10. Double fence captive facilities omega_cw_alt10 <- rep(0, nsamples)  intensive_rural.params_alt10 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw_alt10, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_rural_alt10 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt10, times = times, name = \"Double-fence captive facilities\")  #11. Restrict human interaction (using proportional reduction from suburban to rural) human_restrictions <- (get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") / 120)/(get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") / 120)  intensive_rural.params_alt11 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural*human_restrictions, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_rural_alt11 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt11, times = times, name = \"Restrict human interactions\")  #12. Improve indoor facility air exchange sigma_aero_deer_human_intensive_alt12 <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_intensive/60, r = r_deer, nsamples = nsamples)  sigma_aero_deer_deer_intensive_alt12 <- calc_sigma_aero(C_nu = C_nu_deer, t_contact = t_contact_deer_deer_null/60, r = r_deer, nsamples = nsamples)  intensive_rural.params_alt12 <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_rural, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive_alt12, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive_alt12, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0,nsamples))   proj_intensive_rural_alt12 <- run(iter = nsamples, initial_compartments = intensive_rural.inits.fall, initial_compartments_steady = intensive_rural.inits.steady, params = intensive_rural.params_alt12, times = times, name = \"Improve indoor facility air quality\")  proj_intensive_rural <- rbind(proj_intensive_rural_null, proj_intensive_rural_alt1, proj_intensive_rural_alt2, proj_intensive_rural_alt3, proj_intensive_rural_alt4, proj_intensive_rural_alt5, proj_intensive_rural_alt6, proj_intensive_rural_alt7, proj_intensive_rural_alt8, proj_intensive_rural_alt9, proj_intensive_rural_alt10, proj_intensive_rural_alt11, proj_intensive_rural_alt12)"},{"path":"/articles/Management_Alternatives_Systems.html","id":"calculate-prevalence-cumulative-infections-and-persistence-for-interventions-in-the-intensive-facility-wild-rural-system","dir":"Articles","previous_headings":"Establish Systems and Test Alternatives > Combined system of intensive captive facilities and wild deer in a rural setting","what":"Calculate prevalence, cumulative infections, and persistence for interventions in the intensive facility : wild, rural system","title":"Evaluation of management alternatives across systems","text":"","code":"persist.threshold <- 0.001  proj_intensive_rural %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_intensive_rural_df  proj_intensive_rural %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Intensive facility and rural deer\",nrow(.)), Alternative = c(rep(unique(proj_intensive_rural$Context)[1],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[2],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[3],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[4],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[5],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[6],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[7],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[8],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[9],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[10],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[11],length(times)*nsamples),rep(unique(proj_intensive_rural$Context)[12],length(times)*nsamples), rep(unique(proj_intensive_rural$Context)[13],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%    merge(.,Persist_intensive_rural_df, by = \"run_id\") -> alternatives_for_intensive_rural_complex"},{"path":"/articles/Management_Alternatives_Systems.html","id":"combine-and-summarize-results","dir":"Articles","previous_headings":"Establish Systems and Test Alternatives","what":"Combine and summarize results","title":"Evaluation of management alternatives across systems","text":", combine results alternatives, combinations captive wild scenarios (systems). results saved package’s data folder, can accessed whitetailedSIRS::alternatives_across_systems. ##Test Impact Cross-Sector Collaboration Finally, simulated SARS-CoV-2 outbreaks system multiple alternatives applied. , implement effective alternative sector (agriculture, public health, wildlife) concert understand cumulative effects coordinated actions across sectors. results final simulation stored whitetailedSIRS::cross_sector_results.","code":"alternatives_across_systems <- rbind(alternatives_for_ranch_suburban_complex, alternatives_for_ranch_rural_complex, alternatives_for_intensive_suburban_complex, alternatives_for_intensive_rural_complex)  alternatives_across_systems %>%     group_by(., Complex, Alternative) %>%     summarize(., Wild_Cumulative = median(cumulativeWild), Captive_Cumulative = median(cumulativeCaptive)) #> `summarise()` has grouped output by 'Complex'. You can override using the #> `.groups` argument. #> # A tibble: 50 × 4 #> # Groups:   Complex [4] #>    Complex                           Alternative                 Wild_…¹ Capti…² #>    <chr>                             <chr>                         <dbl>   <dbl> #>  1 Intensive facility and rural deer Baseline                    0.812      1.46 #>  2 Intensive facility and rural deer Double-fence captive facil… 0.567      1.46 #>  3 Intensive facility and rural deer Eliminate baiting           0.00195    1.46 #>  4 Intensive facility and rural deer Improve indoor facility ai… 0.776      1.05 #>  5 Intensive facility and rural deer PPE, Both                   0.804      1.46 #>  6 Intensive facility and rural deer PPE, Captive                0.804      1.46 #>  7 Intensive facility and rural deer PPE, Wild                   0.812      1.46 #>  8 Intensive facility and rural deer Pause Research              0.812      1.46 #>  9 Intensive facility and rural deer Reduce wild density by 10%  0.738      1.46 #> 10 Intensive facility and rural deer Reduce wild density by 25%  0.526      1.46 #> # … with 40 more rows, and abbreviated variable names ¹​Wild_Cumulative, #> #   ²​Captive_Cumulative #Vaccinate.. cross_sector.inits.fall <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1) cross_sector.inits.steady <- initial_compartments(draws = nsamples, S_captive_prop = 0, R_captive_prop = 1, steady = TRUE)  #...and boost boost_alt9 <- rep(0.9,nsamples)  #PPE for all interactions sigma_aero_deer_human_capt_alt6_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_ranch/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  sigma_aero_deer_human_wild_alt5_PPE <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human, t_contact = t_contact_deer_human_rural/60, r = r_deer, V_d = 0.009*runif(nsamples, min = (1-0.994), max = (1-0.509)), nsamples = nsamples)  #Eliminate baiting omega_ww_alt3_no.baiting <- whitetailedSIRS::calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild*0.75)  #Ranch and suburban complex ranch_suburban_cross_sector.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)  proj_ranch_suburban_cross_sector <- run(iter = nsamples, initial_compartments = cross_sector.inits.fall, initial_compartments_steady = cross_sector.inits.steady, params =  ranch_suburban_cross_sector.params, times = times, name = \"Cross-Sector Collaboration: Vaccinate and Boost, PPE for all interactions, and eliminating baiting\")  proj_ranch_suburban_cross_sector %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_ranch_suburban_cross_sector_df  proj_ranch_suburban_cross_sector %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Ranch and suburban deer\",nrow(.)), Alternative = c(rep(unique(proj_ranch_suburban_cross_sector$Context)[1],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_ranch_suburban_cross_sector_df, by = \"run_id\") -> cross_sector_for_ranch_suburban_complex #> `summarise()` has grouped output by 'Complex', 'Alternative'. You can override #> using the `.groups` argument.  #Ranch and rural complex ranch_rural_cross_sector.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)  proj_ranch_rural_cross_sector <- run(iter = nsamples, initial_compartments = cross_sector.inits.fall, initial_compartments_steady = cross_sector.inits.steady, params = ranch_rural_cross_sector.params, times = times, name = \"Cross-Sector Collaboration: Vaccinate and Boost, PPE for all interactions, and eliminating baiting\")  proj_ranch_rural_cross_sector %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_ranch_rural_cross_sector_df  proj_ranch_rural_cross_sector %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Ranch and rural deer\",nrow(.)), Alternative = c(rep(unique(proj_ranch_rural_cross_sector$Context)[1],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%    merge(.,Persist_ranch_rural_cross_sector_df, by = \"run_id\")-> cross_sector_for_ranch_rural_complex #> `summarise()` has grouped output by 'Complex', 'Alternative'. You can override #> using the `.groups` argument.  #Intensive facility and suburban complex intensive_suburban_cross_sector.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_suburban, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)  proj_intensive_suburban_cross_sector <- run(iter = nsamples, initial_compartments = cross_sector.inits.fall, initial_compartments_steady = cross_sector.inits.steady, params = intensive_suburban_cross_sector.params, times = times, name = \"Cross-Sector Collaboration: Vaccinate and Boost, PPE for all interactions, and eliminating baiting\")  proj_intensive_suburban_cross_sector %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_intensive_suburban_cross_sector_df  proj_intensive_suburban_cross_sector %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Intensive facility and suburban deer\",nrow(.)), Alternative = c(rep(unique(proj_intensive_suburban_cross_sector$Context)[1],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_intensive_suburban_cross_sector_df, by = \"run_id\")-> cross_sector_for_intensive_suburban_complex #> `summarise()` has grouped output by 'Complex', 'Alternative'. You can override #> using the `.groups` argument.  #Intensive facility and rural complex intensive_rural_cross_sector.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_alt3_no.baiting, omega_cw = omega_cw, omega_cc = omega_cc_intensive,                             omega_hw = omega_hw_rural, omega_hc = omega_hc_intensive,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_alt5_PPE, sigma_aero_deer_human_capt = sigma_aero_deer_human_capt_alt6_PPE, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = boost_alt9)  proj_intensive_rural_cross_sector <- run(iter = nsamples, initial_compartments = cross_sector.inits.fall, initial_compartments_steady = cross_sector.inits.steady, params = intensive_rural_cross_sector.params, times = times, name = \"Cross-Sector Collaboration: Vaccinate and Boost, PPE for all interactions, and eliminating baiting\")  proj_intensive_rural_cross_sector %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., persistWild = I_wild > persist.threshold, persistCaptive = I_captive > persist.threshold) %>%   select(., run_id, persistWild, persistCaptive) %>%   arrange(., run_id) -> Persist_intensive_rural_cross_sector_df  proj_intensive_rural_cross_sector %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Complex = rep(\"Intensive facility and rural deer\",nrow(.)), Alternative = c(rep(unique(proj_intensive_rural_cross_sector$Context)[1],length(times)*nsamples))) %>%    group_by(Complex,Alternative, run_id) %>%    summarize(meanWild = mean(I_wild), meanCaptive = mean(I_captive),              cumulativeWild = last(I_wild_cumulative), cumulativeCaptive = last(I_captive_cumulative)) %>%     merge(.,Persist_intensive_rural_cross_sector_df, by = \"run_id\")-> cross_sector_for_intensive_rural_complex #> `summarise()` has grouped output by 'Complex', 'Alternative'. You can override #> using the `.groups` argument.   cross_sector_results <- rbind(cross_sector_for_ranch_suburban_complex, cross_sector_for_ranch_rural_complex, cross_sector_for_intensive_suburban_complex, cross_sector_for_intensive_rural_complex)  cross_sector_results %>%     group_by(Complex) %>%     summarize(., prevalenceWild = median(meanWild), prevalenceCaptive = median(meanCaptive), cumulativeWild = median(cumulativeWild), cumulativeCaptive = median(cumulativeCaptive), meanPersistWild = (sum(persistWild)/nsamples), meanPersistCaptive= (sum(persistCaptive)/nsamples)) #> # A tibble: 4 × 7 #>   Complex                        preva…¹ preva…² cumul…³ cumul…⁴ meanP…⁵ meanP…⁶ #>   <chr>                            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1 Intensive facility and rural … 1.39e-6 8.81e-7 3.00e-5 1.83e-5    0.37   0.035 #> 2 Intensive facility and suburb… 7.72e-6 8.95e-7 1.64e-4 1.85e-5    0.39   0.035 #> 3 Ranch and rural deer           1.39e-6 1.22e-7 3.00e-5 2.61e-6    0.36   0     #> 4 Ranch and suburban deer        7.72e-6 1.24e-7 1.64e-4 2.66e-6    0.39   0     #> # … with abbreviated variable names ¹​prevalenceWild, ²​prevalenceCaptive, #> #   ³​cumulativeWild, ⁴​cumulativeCaptive, ⁵​meanPersistWild, ⁶​meanPersistCaptive"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"vignette details analysis used study differences outbreak dynamics four scenarios SARS-CoV-2 transmission among white-tailed deer populations. output vignette used visualize differences vignette whitetailedSIRS::Visualize_by_context. analysis corresponds Objectives 1-3 Rosenblatt et al. Prep.","code":""},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"basic-simulation-parameters","dir":"Articles","previous_headings":"","what":"Basic Simulation Parameters","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"loading packages, set several parameters remain constant across simulations. set seed reproducible results (set.seed). define number iterations simulations particular context (nsamples). set human prevalence levels (I_human_null). define duration SIRS projection days (times).","code":"set.seed(23) nsamples <- 200 I_human_null <- 0.05 times <- seq(0, 120, by = 1)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"expert-elicitated-parameters","dir":"Articles","previous_headings":"","what":"Expert Elicitated Parameters","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"","code":"elicitation_data <- draw_elicitation_samples(nsamples = nsamples)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"contexts-for-sars-cov-2-introduction-and-spread-in-white-tailed-deer-populations","dir":"Articles","previous_headings":"","what":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Following Rosenblatt et al. (2023), four contexts defined, including outdoor captive ranch, intensive captive facility, wild deer rural conditions, wild deer suburban conditions. RMD file, contexts simulated independently . briefly describe context, calculate various proximity rates infection probabilities, derive transmission rates SARS-CoV-2 contexts.","code":""},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"outdoor-captive-ranch","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","what":"Outdoor captive ranch","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"modeled population captive deer housed outdoor ranching facility. assumed proximity rates deer context estimated wild contexts, increase proximity rates due supplemental feeding. assume proximity rates humans deer context estimated wild, suburban context, duration proximity events longer, reflecting typical captive facility.","code":""},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"proximity-rates","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations > Outdoor captive ranch","what":"Proximity Rates","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Proximity rates derived rate model developed Habib et al. (2011), function habitat conditions (habitat) density (nwild/A_W). uses Habib et al. (2011) model analysis, fixed density 10 deer per sq km habitat 26% wooded habitat (classified calc_contact_rate function type_contact = “med”). also used expert elicitation estimates probability direct contact fluid transmission. Next, define various proximity rates ranch context. Object names reflect parameters must included SIRS ODE solver (e.g. omega_ww_ranch, set 0).","code":"nWild <- rpois(nsamples,1000) #Abundance A_w <- 100 #Area habitat <- \"med\" #Habitat classification sigma_season <- 1 #Season adjustment for proximity rate  epsilon_dc <- get_EE_param_vals(data = elicitation_data, my_param = \"Direct Contact Probability\") #Probability of direct contact between deer, given proximity. omega_ww_ranch <- rep(0, nsamples) #Deer-to-deer proximity rate in wild (set to 0; events per day). omega_cw_null <- rep(0, nsamples) #Deer-to-deer proximity rate along fenceline (set to 0; events per day). omega_cc_ranch <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild, rho_attractant = get_EE_param_vals(data = elicitation_data, my_param = \"Proximity rate with baiting (17 events without baiting)\")/17) #Deer-to-deer proximity rate in ranch context, mimicing wild proximity rates with the influence of baiting (events per day).  omega_hw_ranch <- rep(0, nsamples) #Human-to-deer proximity rate in wild (set to 0; events per day). omega_hc_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 #Human-to-deer proximity rate in ranch context, mimicing suburban proximitty rates (events per day)."},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"infection-probabilities","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations > Outdoor captive ranch","what":"Infection probabilities","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"calculate infection probabilities three transmission pathways - aerosol transmission deer--deer, fluid transmission deer--deer, aerosol transmission human--deer. , use various package functions define parameters estimate infection probability given proximity contact.","code":"C_nu_human <- rnorm(n = nsamples, mean = 10^5.6, sd = 10^1.2)#viral load in humans (genomic copies per ml) C_nu_deer <- 10^5.6 * get_EE_param_vals(data = elicitation_data, my_param = \"Viral Load\") #viral load in deer saliva, relative to humans (genomic copies per ml)  r_deer <- get_EE_param_vals(data = elicitation_data, my_param = \"Dose-Response\")# Dose response coefficient for deer and SARS-CoV-2 #Infection probability calculation of aerosol transmission from deer-to-deer t_contact_deer_deer_null <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer Proximity Duration (minutes)\") #Estimate duration of proximity event... sigma_aero_deer_deer_ranch <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples) #...and estimate probability of infection given that duration of proximity event.  sigma_aero_deer_deer_wild_null <- rep(0, nsamples) #Estimate infection probability in out in the wild as 0 (needs to be included for SIRS ODE equations)  #Infection probability of 0.1 ml of saliva being transferred between deer on contact sigma_dc_deer_deer_null <- calc_sigma_dc(C_nu = C_nu_deer, nsamples = nsamples) #Calculate infection probability  #Infection probability calculation of aerosol transmission from humans-to-deer t_contact_deer_human_ranch <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\") #Estimate duration of human-deer proximity event in ranch facility context... sigma_aero_deer_human_ranch <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_ranch / 60,                                         r = r_deer, nsamples = nsamples)#... and calculate infection probability given the duration of a human-deer proximity event. sigma_aero_deer_human_wild_null <- rep(0, nsamples)#Estimate human-to-deer infection probability out in the wild as 0 (needs to be included for SIRS ODE equations)"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"recovery-and-immunity-loss-rates","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations > Outdoor captive ranch","what":"Recovery and Immunity Loss Rates","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"simulations, animals recover infection given rate (gamma_recov), lose immunity become susceptible given rate (alpha_immunity). use recovery rate based 6 day infectious period (Palmer et al. 2021), immunity loss rate based expert elicited estimates. recovery rate repeated across iterations simulation (nsamples). immunity loss rate derived [nsamples] draws error distribution estimated expert elicitation process.","code":"gamma_recov <- rep(1/6, nsamples) alpha_immunity_null <- 1 / get_EE_param_vals(data = elicitation_data, my_param = 'Temporary Immunity')"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"compile-parameters-and-run-sirs-ode-solver-for-context","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations > Outdoor captive ranch","what":"Compile parameters and run SIRS ODE solver for context","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Now parameters defined SIRS model, run three functions define starting conditions, arrange parameters defined calculated derived parameters, run ODE solver. look proj.ranch object, can see items stored first list item, including iteration identifier (run_id), initial compartment sizes (inits), SIRS parameters (params), start end projected infection ranch context. can now continue run ODE solver contexts. new parameters defined context; several referenced ranch context .","code":"captive.inits.fall <- initial_compartments(S_wild_prop = 0, draws = nsamples) captive.inits.steady <- initial_compartments(S_wild_prop = 0, draws = nsamples, steady = TRUE)  ranch.params <- alternative(alpha_immunity = alpha_immunity_null,                             omega_ww = omega_ww_ranch, omega_cw = omega_cw_null,omega_cc = omega_cc_ranch,                             omega_hw = omega_hw_ranch, omega_hc = omega_hc_ranch,                             sigma_aero_deer_deer_wild = sigma_aero_deer_deer_wild_null, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_ranch, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_null, sigma_aero_deer_human_capt = sigma_aero_deer_human_ranch, epsilon_dc = epsilon_dc, sigma_dc_deer_deer = sigma_dc_deer_deer_null, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj.ranch <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = ranch.params, times = times, name = \"Outdoor ranch\") proj.ranch$run_id[1] #> [1] 1 proj.ranch$inits.fall[1] #> [[1]] #>               S_wild               I_wild               R_wild  #>                    0                    0                    0  #>    I_wild_cumulative            S_captive            I_captive  #>                    0                    1                    0  #>            R_captive I_captive_cumulative  #>                    0                    0 proj.ranch$inits.steady[1] #> [[1]] #>    S_wild    I_wild    R_wild S_captive I_captive R_captive  #>         0         0         0         1         0         0 proj.ranch$params[1] #> [[1]] #> alpha_immunity   beta_aero_ww   beta_aero_cw   beta_aero_cc   beta_aero_hw  #>   0.0078654614   0.0000000000   0.0000000000   0.1564436786   0.0000000000  #>   beta_aero_hc     beta_dc_ww     beta_dc_cw     beta_dc_cc    gamma_recov  #>   0.0001100403   0.0000000000   0.0000000000   0.0039325117   0.1666666667  #>        I_human          boost  #>   0.0500000000   0.0000000000 head(proj.ranch$ode_proj[[1]]) #>      time S_wild I_wild R_wild I_wild_cumulative S_captive    I_captive #> [1,]    0      0      0      0                 0 1.0000000 0.000000e+00 #> [2,]    1      0      0      0                 0 0.9999941 5.484743e-06 #> [3,]    2      0      0      0                 0 0.9999873 1.093505e-05 #> [4,]    3      0      0      0                 0 0.9999796 1.635111e-05 #> [5,]    4      0      0      0                 0 0.9999711 2.173310e-05 #> [6,]    5      0      0      0                 0 0.9999617 2.708124e-05 #>         R_captive I_captive_cumulative #> [1,] 0.000000e+00         0.000000e+00 #> [2,] 4.552724e-07         5.941806e-06 #> [3,] 1.814661e-06         1.276042e-05 #> [4,] 4.065383e-06         2.045033e-05 #> [5,] 7.196358e-06         2.900672e-05 #> [6,] 1.119294e-05         3.842320e-05 tail(proj.ranch$ode_proj[[1]]) #>        time S_wild I_wild R_wild I_wild_cumulative S_captive    I_captive #> [116,]  115      0      0      0                 0 0.9960029 0.0004408439 #> [117,]  116      0      0      0                 0 0.9959550 0.0004432580 #> [118,]  117      0      0      0                 0 0.9959070 0.0004456517 #> [119,]  118      0      0      0                 0 0.9958591 0.0004480252 #> [120,]  119      0      0      0                 0 0.9958111 0.0004503785 #> [121,]  120      0      0      0                 0 0.9957631 0.0004527118 #>          R_captive I_captive_cumulative #> [116,] 0.003556224          0.005227912 #> [117,] 0.003601749          0.005304001 #> [118,] 0.003647316          0.005380471 #> [119,] 0.003692923          0.005457318 #> [120,] 0.003738564          0.005534538 #> [121,] 0.003784237          0.005612130 proj.ranch$steady_state[[1]] #> $y #>       S_wild       I_wild       R_wild    S_captive    I_captive    R_captive  #> 0.0000000000 0.0000000000 0.0000000000 0.9859190447 0.0006345043 0.0134464510  #>  #> attr(,\"istate\") #>  [1]      2      1      1      0      0     12 100000      0      0      0 #> [11]      0     41     75      0      2      2      0    116     20      0 #> [21]      0      0      0 #> attr(,\"rstate\") #> [1]  148.049  148.049 1259.299    0.000    0.000 #> attr(,\"precis\") #> [1] 3.940715e-09 #> attr(,\"steady\") #> [1] TRUE #> attr(,\"time\") #> [1] 1259.299 #> attr(,\"steps\") #> [1] 41"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"intensive-captive-facility","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","what":"Intensive captive facility","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"considered captive deer held facility focused captive breeding exposition. Deer facility predominantly indoors high stocking densities low indoor air exchange rates (AER; 1-hr). estimated proximity rates duration proximity using expert elicitation.","code":"omega_ww_intensive <- rep(0, nsamples) omega_cc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Deer Proximity Rate, Captive (per day)\") omega_hw_intensive <- rep(0, nsamples) omega_hc_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120  sigma_aero_deer_deer_intensive <- calc_sigma_aero(C_nu = C_nu_deer,                                             t_contact = t_contact_deer_deer_null / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  t_contact_deer_human_intensive <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Captive (minutes)\")   sigma_aero_deer_human_intensive <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                              t_contact = t_contact_deer_human_intensive / 60,                                             r = r_deer, nsamples = nsamples, AER = rep(1, nsamples))  intensive.params <- alternative(    omega_ww = omega_ww_intensive, omega_cw = omega_cw_null, omega_cc = omega_cc_intensive,     omega_hw = omega_hw_intensive, omega_hc = omega_hc_intensive,     sigma_aero_deer_deer_wild = sigma_aero_deer_human_wild_null, sigma_aero_deer_deer_captive =  sigma_aero_deer_deer_intensive, sigma_aero_deer_human_wild = sigma_aero_deer_human_wild_null, sigma_aero_deer_human_capt = sigma_aero_deer_human_intensive, sigma_dc_deer_deer = sigma_dc_deer_deer_null,    alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj.intensive <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = intensive.params, times = times, name = \"Intensive facility\")"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"wild-deer-in-rural-conditions","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","what":"Wild deer in rural conditions","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"context, wild deer free-ranging area rural human density (3.1 humans/km2). assumed deer context subject regulated hunting either using still-hunting, ground blind treestand approaches. also assumed baiting backyard feeding illegal may still occur. used Habib et al.’s (2011) proximity rate model. estimated duration deer-deer proximity events, rates duration human-deer proximity events using expert elicitation.","code":"omega_ww_rural <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild) omega_cc_rural <- rep(0, nsamples) omega_hw_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Rural (per 120 days)\") /120 omega_hc_rural <- rep(0, nsamples)  t_contact_deer_human_rural <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Rural (minutes)\")  sigma_aero_deer_deer_rural <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_deer_captive_null <- rep(0, nsamples)  sigma_aero_deer_human_rural <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_rural / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_human_captive_null <- rep(0, nsamples)  wild.inits.fall <- initial_compartments(S_captive_prop = 0, draws = nsamples) wild.inits.steady <- initial_compartments(S_captive_prop = 0, draws = nsamples, steady = TRUE)  rural.params <- alternative(omega_ww = omega_ww_rural, omega_cw = omega_cw_null, omega_cc = omega_cc_rural, omega_hw = omega_hw_rural, omega_hc = omega_hc_rural, sigma_aero_deer_deer_wild = sigma_aero_deer_deer_rural, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_captive_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_rural,  sigma_aero_deer_human_capt = sigma_aero_deer_human_captive_null, sigma_dc_deer_deer = sigma_dc_deer_deer_null,alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj.rural <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady ,params = rural.params, times = times, name = \"Wild, rural\")"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"wild-deer-in-suburban-conditions","dir":"Articles","previous_headings":"Contexts for SARS-CoV-2 introduction and spread in white-tailed deer populations","what":"Wild deer in suburban conditions","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Wild deer free-ranging area suburban human density (100 humans/km2). Deer--deer proximity rates derived using parameters used rural setting. primary difference context wild, rural context higher human--deer proximity rates longer duration proximity events estimated expert elicitation.","code":"omega_ww_suburban <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild) omega_cc_suburban <- rep(0, nsamples) omega_hw_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 omega_hc_suburban <- rep(0, nsamples)  t_contact_deer_human_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Suburban (minutes)\")  sigma_aero_deer_deer_suburban <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_human_suburban <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_suburban / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  suburban.params <- alternative(omega_ww = omega_ww_suburban, omega_cw = omega_cw_null, omega_cc = omega_cc_suburban, omega_hw = omega_hw_suburban, omega_hc = omega_hc_suburban, sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_captive_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban,  sigma_aero_deer_human_capt = sigma_aero_deer_human_captive_null, sigma_dc_deer_deer = sigma_dc_deer_deer_null,alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))  proj.suburban <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady, params = suburban.params, times = times, name = \"Wild, suburban\")"},{"path":"/articles/SIRS_analysis_by_contexts.html","id":"compile-dataset-across-all-contexts","dir":"Articles","previous_headings":"","what":"Compile dataset across all contexts","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings","text":"Finally, going summarize four measurements iteration summarize across contexts. First, combine projections context one list object, summarize average prevalence (Infected) cumulative infections (Cumulative_infections). save resulting summary dataframe future use. Next, join information steady-state equilibrium, using threshold value 0.1% prevalence equilibrium persistence. Next, step context’s parameters estimate strength introduction (quantified force--infection) spread (quantified basic reproductive number R0). combine prevalence persistence summary create dataset visualized another vignette. develop plots tables results data frame. simple summary end vignette, median spread (R0), probability introduction humans (FOI, log10-transformed), average prevalence 120-day fall projection (Prevalence), infections end 120-day fall projection (Persistence).","code":"sirs_results_contexts <- rbind(proj.ranch,proj.intensive, proj.rural, proj.suburban)  sirs_results_contexts %>%   mutate(ode_df = map(ode_proj, as.data.frame)) %>%   pull(ode_df) %>%   list_rbind(names_to = \"run_id\") %>%    mutate(., Context = c(rep(unique(sirs_results_contexts$Context)[1],length(times)*nsamples),rep(unique(sirs_results_contexts$Context)[2],length(times)*nsamples), rep(unique(sirs_results_contexts$Context)[3],length(times)*nsamples),rep(unique(sirs_results_contexts$Context)[4],length(times)*nsamples))) %>%    group_by(Context, run_id) %>%     summarize(Wild = mean(I_wild), Captive = mean(I_captive), Prevalence = Wild + Captive, Cumulative_wild_infections = last(I_wild_cumulative), Cumulative_captive_infections = last(I_captive_cumulative), Cumulative_infections = sum(Cumulative_wild_infections,Cumulative_captive_infections)) %>%    mutate(., Context = factor(Context, levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) %>%     select(., -Wild, -Captive, -Cumulative_wild_infections, -Cumulative_captive_infections) %>%    group_by(.,Context) %>%    arrange(., Context, run_id) -> Prev_cumulative_df  head(Prev_cumulative_df) #> # A tibble: 6 × 4 #> # Groups:   Context [1] #>   Context       run_id Prevalence Cumulative_infections #>   <fct>          <int>      <dbl>                 <dbl> #> 1 Outdoor ranch      1   0.000258               0.00561 #> 2 Outdoor ranch      2   0.0549                 1.12    #> 3 Outdoor ranch      3   0.0230                 0.490   #> 4 Outdoor ranch      4   0.0446                 0.900   #> 5 Outdoor ranch      5   0.0505                 1.02    #> 6 Outdoor ranch      6   0.000804               0.0192 persist.threshold <- 0.001  sirs_results_contexts %>%   mutate(steady_sir = map(steady_state, \"y\"),          steady_sir = map(steady_sir, as_tibble_row)) %>%   pull(steady_sir) %>%   list_rbind(names_to = \"run_id\") %>%   mutate(., Context = c(rep(unique(sirs_results_contexts$Context)[1],nsamples),rep(unique(sirs_results_contexts$Context)[2],nsamples), rep(unique(sirs_results_contexts$Context)[3],nsamples),rep(unique(sirs_results_contexts$Context)[4],nsamples))) %>%   mutate(., Context = factor(Context, levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) %>%    mutate(., Persist.I_wild = I_wild > persist.threshold, Persist.I_captive = I_captive > persist.threshold, Persist = as.logical(Persist.I_wild + Persist.I_captive)) %>%   select(., run_id,Context, Persist) %>%   arrange(., Context, run_id) %>%     merge(Prev_cumulative_df,.) -> Prev_cumulative_persist_df ranch.df <- list_cbind(map(ranch.params, as_data_frame)) colnames(ranch.df) <-  names(ranch.params) ranch.df %>%    mutate(., run_id = min(Prev_cumulative_df[which(Prev_cumulative_df$Context==\"Outdoor ranch\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Outdoor ranch\", Setting = \"Captive\") %>%    select(., run_id, Context,  Setting, r0, FOI) -> ranch.r0.FOI  intensive.df <- list_cbind(map(intensive.params, as_data_frame)) colnames(intensive.df) <-  names(intensive.params) intensive.df %>%    mutate(., run_id = min(Prev_cumulative_df[which(Prev_cumulative_df$Context==\"Intensive facility\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Intensive facility\", Setting = \"Captive\") %>%    select(., run_id, Context,  Setting, r0, FOI) -> intensive.r0.FOI  rural.df <- list_cbind(map(rural.params, as_data_frame)) colnames(rural.df) <-  names(rural.params) rural.df %>%    mutate(., run_id = min(Prev_cumulative_df[which(Prev_cumulative_df$Context==\"Wild, rural\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Wild, rural\", Setting = \"Wild\") %>%    select(., run_id, Context, Setting,  r0, FOI) -> rural.r0.FOI  suburban.df <- list_cbind(map(suburban.params, as_data_frame)) colnames(suburban.df) <-  names(suburban.params) suburban.df %>%    mutate(., run_id = min(Prev_cumulative_df[which(Prev_cumulative_df$Context==\"Wild, suburban\"),\"run_id\"])+0:(nsamples-1),r0 = unlist((beta_aero_ww+beta_aero_cc+beta_dc_ww+beta_dc_cc)/gamma_recov),          FOI = unlist((beta_aero_hw+beta_aero_hc)*I_human),          Context = \"Wild, suburban\", Setting = \"Wild\") %>%    select(., run_id, Context, Setting, r0, FOI) -> suburban.r0.FOI  r0.FOI <- rbind(ranch.r0.FOI,intensive.r0.FOI, rural.r0.FOI,suburban.r0.FOI)  #Merge with average prevalence (step 1) and persistence (step 2) merge(r0.FOI,Prev_cumulative_persist_df[,c(\"run_id\",\"Prevalence\", \"Persist\", \"Cumulative_infections\")], by = \"run_id\", all.x = TRUE) %>%    mutate(Context = factor(Context,  levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) -> df df %>%    group_by(., Context) %>%    reframe(., R0.Median = round(quantile(r0,probs = c(0.5)),2), FOI.Median = round(log10(quantile(FOI,probs = c(0.5))),2), Prevalence.Median = round(quantile(Prevalence, probs = c(0.5)),6), Prevalence.Mean = round(mean(Prevalence),4), Persistence.Mean = round(sum(Persist)/nsamples,2), Cumulative_cases = median(Cumulative_infections)) -> median.results  median.results %>%   kbl() %>%   kable_paper(\"hover\", full_width = F)"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an intial spillover","text":"vignette follows blueprint whitetailedSIRS::SIRS_analysis_by_context. primary difference initial infected compartment sizes set non-zero values human prevalence set zero. mimics initial spillover event given magnitude, test outbreak dynamics differ continuous spillover detailed whitetailedSIRS::SIRS_analysis_by_context. differences visualized vignette whitetailedSIRS::Visualize_by_context. simulation code suppresed rendered vignette, can viewed .Rmd file. analysis corresponds Objective 4 Rosenblatt et al. Prep.","code":"omega_ww_suburban <- calc_contact_rate(nsamples = nsamples, type_contact = habitat, N_w = nWild) omega_cc_suburban <- rep(0, nsamples) omega_hw_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Rate, Suburban (per 120 days)\") /120 omega_hc_suburban <- rep(0, nsamples)  t_contact_deer_human_suburban <- get_EE_param_vals(data = elicitation_data, my_param = \"Deer-Human Proximity Duration, Suburban (minutes)\")  sigma_aero_deer_deer_suburban <- calc_sigma_aero(C_nu = C_nu_deer,                                         t_contact = t_contact_deer_deer_null / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  sigma_aero_deer_human_suburban <- calc_sigma_aero(ER = 0.53, C_nu = C_nu_human,                                          t_contact = t_contact_deer_human_suburban / 60,                                         r = r_deer, nsamples = nsamples, AER = rep(4, nsamples))  suburban.params <- alternative(omega_ww = omega_ww_suburban, omega_cw = omega_cw_null, omega_cc = omega_cc_suburban, omega_hw = omega_hw_suburban, omega_hc = omega_hc_suburban, sigma_aero_deer_deer_wild = sigma_aero_deer_deer_suburban, sigma_aero_deer_deer_captive = sigma_aero_deer_deer_captive_null, sigma_aero_deer_human_wild = sigma_aero_deer_human_suburban,  sigma_aero_deer_human_capt = sigma_aero_deer_human_captive_null, sigma_dc_deer_deer = sigma_dc_deer_deer_null,alpha_immunity = alpha_immunity_null, epsilon_dc = epsilon_dc, gamma_recov = gamma_recov, I_human = rep(I_human_null, nsamples), boost = rep(0, nsamples))"},{"path":"/articles/SIRS_analysis_by_contexts_initialspill.html","id":"compile-parameters-and-run-sirs-ode-solver-for-context","dir":"Articles","previous_headings":"","what":"Compile parameters and run SIRS ODE solver for context","title":"SARS-CoV-2 outbreak characteristics across wild and captive settings, with an intial spillover","text":"transmission parameters used whitetailedSIRS::SIRS_analysis_by_context, can compile result dataset intial outbreaks different sizes. Results simulations stored whitetailedSIRS::initial_infection_results_1_in_1000, whitetailedSIRS::initial_infection_results_1_in_1mil, whitetailedSIRS::initial_infection_results_1_in_1bil.","code":"captive.inits.fall <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999, I_captive_prop = 0.001, draws = nsamples) captive.inits.steady <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999, I_captive_prop = 0.001, draws = nsamples, steady = TRUE)  wild.inits.fall <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999, I_wild_prop = 0.001, draws = nsamples) wild.inits.steady <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999, I_wild_prop = 0.001, draws = nsamples, steady = TRUE)  proj.ranch <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = ranch.params, times = times, name = \"Outdoor ranch\")  proj.intensive <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = intensive.params, times = times, name = \"Intensive facility\")  proj.rural <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady ,params = rural.params, times = times, name = \"Wild, rural\")  proj.suburban <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady, params = suburban.params, times = times, name = \"Wild, suburban\") captive.inits.fall <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999999, I_captive_prop = 0.000001, draws = nsamples) captive.inits.steady <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999999, I_captive_prop = 0.000001, draws = nsamples, steady = TRUE)  wild.inits.fall <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999999, I_wild_prop = 0.000001, draws = nsamples) wild.inits.steady <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999999, I_wild_prop = 0.000001, draws = nsamples, steady = TRUE)  proj.ranch <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = ranch.params, times = times, name = \"Outdoor ranch\")  proj.intensive <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = intensive.params, times = times, name = \"Intensive facility\")  proj.rural <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady ,params = rural.params, times = times, name = \"Wild, rural\")  proj.suburban <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady, params = suburban.params, times = times, name = \"Wild, suburban\") captive.inits.fall <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999999999, I_captive_prop = 0.000000001, draws = nsamples) captive.inits.steady <- initial_compartments(S_wild_prop = 0, S_captive_prop = 0.999999999, I_captive_prop = 0.000000001, draws = nsamples, steady = TRUE)  wild.inits.fall <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999999999, I_wild_prop = 0.000000001, draws = nsamples) wild.inits.steady <- initial_compartments(S_captive_prop = 0, S_wild_prop = 0.999999999, I_wild_prop = 0.000000001, draws = nsamples, steady = TRUE)  proj.ranch <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = ranch.params, times = times, name = \"Outdoor ranch\")  proj.intensive <- run(iter = nsamples, initial_compartments = captive.inits.fall, initial_compartments_steady = captive.inits.steady, params = intensive.params, times = times, name = \"Intensive facility\")  proj.rural <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady ,params = rural.params, times = times, name = \"Wild, rural\")  proj.suburban <- run(iter = nsamples, initial_compartments = wild.inits.fall, initial_compartments_steady = wild.inits.steady, params = suburban.params, times = times, name = \"Wild, suburban\") initial_infection_results_1_in_1000 <- df_initial_infections_1_in_1000 initial_infection_results_1_in_1mil <- df_initial_infections_1_in_1mil initial_infection_results_1_in_1bil <- df_initial_infections_1_in_1bil"},{"path":"/articles/Visualize_by_context.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Summarize introduction, spread, prevalence, and persistence","text":"Now dataset simulations vignettes whitetailedSIRS::SIRS_analysis_by_context.Rmd whitetailedSIRS::SIRS_analysis_by_context_initialspill.Rmd, can begin visualize various characteristics outbreaks differ contexts. figures used results published Rosenblatt et al. Prep.. , load data set whitetailedSIRS::scenario_results summarizing simulation (df), data set whitetailedSIRS::scenario_projections containing daily compartment sizes simulation (outbreaks), remind R many iterations run context (nsamples).","code":"df <- whitetailedSIRS::scenario_results outbreaks <- whitetailedSIRS::scenario_projections nsamples <- 200"},{"path":"/articles/Visualize_by_context.html","id":"strength-of-introduction-foi-and-spread-r0","dir":"Articles","previous_headings":"","what":"Strength of introduction (FOI) and spread (R0)","title":"Summarize introduction, spread, prevalence, and persistence","text":"summarize basic reproductive number (\\(R_0\\)) Force-Of_Infection humans deer (\\(FOI_{HD}\\)) scenario , producing Figure 3 Rosenblatt et al. Prep.:","code":"#plot r0 ggplot(df, aes(x = Context, y = r0)) +   geom_boxplot()+   stat_summary(fun=mean, geom=\"point\", shape=\"+\", size=8) +   theme_classic()+   geom_hline(yintercept = 1)+    coord_cartesian(ylim = c(0,20))+   scale_y_continuous(\"Basic reproductive number (r0)\")+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> r0  #plot FOI ggplot(df, aes(x = Context, y = log10(FOI))) +   geom_boxplot()+   stat_summary(fun.y=mean, geom=\"point\", shape=\"+\", size=8) +   theme_classic()+     coord_cartesian(ylim = c(-8,-2))+   scale_y_continuous(\"Introduction hazard from humans (FOI)\", breaks = c(-6,-5,-4,-3), labels = c(\"1:10^6\",\"1:10^5\", \"1:10^4\", \"1:10^3\"))+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> FOI  ggpubr::ggarrange(r0, FOI,nrow =1, ncol=2)"},{"path":"/articles/Visualize_by_context.html","id":"outbreak-projections","dir":"Articles","previous_headings":"","what":"Outbreak Projections","title":"Summarize introduction, spread, prevalence, and persistence","text":"can visually compare distribution outbreak frequency, peak size timing across four scenarios considered. code produces Figure 4 Rosenblatt et al. Prep.:","code":"outbreaks %>%     filter(., Context %in% c(\"Outdoor ranch\")) %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     ggplot(., aes(x = time, y = I_captive*100, group = run_id)) +    geom_line(size = 0.1) +    labs(x = \"Time (days)\", y = \"Prevalence in captive deer (%)\") +    scale_y_continuous(limits = c(0,100))+    scale_x_continuous(limits = c(0,120), breaks = c(0,30,60,90,120))+    theme_classic()+    theme(axis.title = element_text(size = 12),          axis.text = element_text(size = 10),          axis.title.x = element_blank(),          axis.text.x = element_blank())+    annotate(\"label\", label  = \"Outdoor ranch facility\", x = 80, y = 60, size = 4) -> outdoor_ranch_outbreak #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated.  outbreaks %>%     filter(., Context %in% c(\"Intensive facility\")) %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     ggplot(., aes(x = time, y = I_captive*100, group = run_id)) +    geom_line(size = 0.1) +    labs(x = \"Time (days)\", y = \"Prevalence in captive deer (%)\") +    scale_y_continuous(limits = c(0,100))+    scale_x_continuous(limits = c(0,120), breaks = c(0,30,60,90,120))+    theme_classic()+    theme(axis.title = element_blank(),          axis.text = element_blank())+    annotate(\"label\", label  = \"Intensive facility\", x = 80, y = 60, size = 4) -> intensive_facility_outbreak  outbreaks %>%     filter(., Context %in% c(\"Wild, rural\")) %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     ggplot(., aes(x = time, y = I_wild*100, group = run_id)) +    geom_line(size = 0.1) +    labs(x = \"Time (days)\", y = \"Prevalence in wild deer (%)\") +    scale_y_continuous(limits = c(0,100))+    scale_x_continuous(limits = c(0,120), breaks = c(0,30,60,90,120))+    theme_classic()+    theme(axis.title = element_text(size = 12),          axis.text = element_text(size = 10))+    annotate(\"label\", label  = \"Wild deer in rural setting\", x = 80, y = 60, size = 4) -> wild_rural_outbreak  outbreaks %>%     filter(., Context %in% c(\"Wild, suburban\")) %>%     mutate(ode_df = map(ode_proj, as.data.frame)) %>%    pull(ode_df) %>%    list_rbind(names_to = \"run_id\") %>%     ggplot(., aes(x = time, y = I_wild*100, group = run_id)) +    geom_line(size = 0.1) +    labs(x = \"Time (days)\", y = \"Prevalence in captive deer (%)\") +    scale_y_continuous(limits = c(0,100))+    scale_x_continuous(limits = c(0,120), breaks = c(0,30,60,90,120))+    theme_classic()+    theme(axis.title.x = element_text(size = 12),          axis.text.x = element_text(size = 10),          axis.title.y = element_blank(),          axis.text.y = element_blank())+    annotate(\"label\", label  = \"Wild deer in suburban setting\", x = 80, y = 60, size = 4) -> wild_suburban_outbreak  ggpubr::ggarrange(outdoor_ranch_outbreak, intensive_facility_outbreak, wild_rural_outbreak, wild_suburban_outbreak)"},{"path":"/articles/Visualize_by_context.html","id":"prevalence-and-persistence","dir":"Articles","previous_headings":"","what":"Prevalence and Persistence","title":"Summarize introduction, spread, prevalence, and persistence","text":"summarize average prevalence, cumulative infections, probability persistence scenario , producing Figure 5 Rosenblatt et al. Prep.:","code":"ggplot(df, aes(x = Context, y = Prevalence*100)) +   geom_boxplot()+   stat_summary(fun=mean, geom=\"point\", shape=\"+\", size=8) +   theme_classic()+   scale_y_continuous(\"Average prevalence (%)\")+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> prevalence  #plot persistence group_by(df, Context) %>%    summarize(., Persistence = sum(Persist)) %>%    mutate(LCL = binom.confint(Persistence, n = nsamples, methods = \"exact\")$lower, pred = binom.confint(Persistence, n = nsamples, methods = \"exact\")$mean ,UCL = binom.confint(Persistence, n = nsamples, methods = \"exact\")$upper) %>%    mutate(Context = factor(Context, levels = c(\"Outdoor ranch\", \"Intensive facility\", \"Wild, rural\",\"Wild, suburban\"))) %>%    ggplot(., aes(x = Context, y = pred))+   geom_point()+   geom_errorbar(aes(ymin = LCL, ymax = UCL))+   scale_fill_grey()+   theme_classic()+   scale_y_continuous(\"Probability of persistence\", limits = c(0,1))+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> persistence  ggplot(df, aes(x = Context, y = Cumulative_infections*100)) +   geom_boxplot()+   stat_summary(fun=mean, geom=\"point\", shape=\"+\", size=8) +   theme_classic()+   scale_y_continuous(\"Cumulative infections (%)\")+   theme(axis.text = element_text(size = 10), axis.title = element_text(size = 12),legend.text = element_text(size = 12), legend.title = element_text(size = 14), strip.text.x = element_text(size = 14), axis.title.x = element_blank(), axis.text.x = element_text(angle = 90, size = 12)) -> cumulative_infections   ggpubr::ggarrange(prevalence, persistence,cumulative_infections,nrow =1, ncol=3)"},{"path":"/articles/Visualize_by_context.html","id":"interaction-between-strengths-of-introduction-and-spread-and-prevalence-cumulative-infections-and-persistence-","dir":"Articles","previous_headings":"","what":"Interaction between strengths of introduction and spread, and prevalence, cumulative infections, and persistence.","title":"Summarize introduction, spread, prevalence, and persistence","text":"summarize Force--Infection humans deer (\\(FOI_{HD}\\)) SARS-CoV-2’s basic reproductive number (\\(R_0\\)) interact outbreak characteristics. code produces Figure 6 Rosenblatt et al. Prep.:","code":"#Composite plot showing how R0 and FOI interact to impact prevelence df %>%    mutate(., r0_bin = case_when(r0 <= 1 ~ \"Unsustained spread\",                                r0 > 1 & r0 <= 3 ~ \"Low spread\",                                r0 > 3 & r0 <= 5 ~ \"Medium spread\",                                r0 > 5 ~ \"High spread\"),           r0_bin = factor(r0_bin, levels = c(\"Unsustained spread\",\"Low spread\",\"Medium spread\",\"High spread\"))) %>%   ggplot(., aes(log10(FOI),Prevalence*100))+   geom_point(aes(color = Context))+   facet_grid(.~r0_bin)+   scale_color_manual(values = c(\"black\",\"gray80\", \"#66A61E\",\"#66D61E\"))+   stat_smooth(method = \"glm\", method.args = list(family=quasi(link='log')), formula = y~x, color = \"black\")+   scale_y_continuous(name = \"Average prevalence (%)\", limits = c(0,20))+   theme_classic()+   theme(strip.text = element_text(size = 12),         axis.text.x = element_blank(),         axis.title.x = element_blank(),         axis.title.y = element_text(size = 12),axis.text.y = element_text(size = 10), legend.text = element_text(size=10), legend.title = element_text(size=12)) -> Prevalence.plot  df %>%    mutate(., r0_bin = case_when(r0 <= 1 ~ \"Unsustained spread\",                                r0 > 1 & r0 <= 3 ~ \"Low spread\",                                r0 > 3 & r0 <= 5 ~ \"Medium spread\",                                r0 > 5 ~ \"High spread\"),           r0_bin = factor(r0_bin, levels = c(\"Unsustained spread\",\"Low spread\",\"Medium spread\",\"High spread\"))) %>%   ggplot(., aes(log10(FOI),as.numeric(Persist)))+   geom_point(aes(color = Context))+   scale_color_manual(values = c(\"black\",\"gray80\", \"#66A61E\",\"#66D61E\"))+   facet_grid(.~r0_bin)+   stat_smooth(method = \"glm\",method.args = list(family = \"binomial\"), se = F, color = \"gray20\")+   scale_y_continuous(name = \"Probability of persistence\", limits = c(0,1), breaks = c(0,0.5,1))+   theme_classic()+   theme(strip.text = element_text(size = 12),         axis.text.x = element_blank(),         axis.title.x = element_blank(),         axis.title.y = element_text(size = 12),axis.text.y = element_text(size = 10), legend.text = element_text(size=10), legend.title = element_text(size=12))  ->  Persistence.plot  df %>%    mutate(., r0_bin = case_when(r0 <= 1 ~ \"Unsustained spread\",                                r0 > 1 & r0 <= 3 ~ \"Low spread\",                                r0 > 3 & r0 <= 5 ~ \"Medium spread\",                                r0 > 5 ~ \"High spread\"),           r0_bin = factor(r0_bin, levels = c(\"Unsustained spread\",\"Low spread\",\"Medium spread\",\"High spread\"))) %>%   ggplot(., aes(log10(FOI),Cumulative_infections*100))+   geom_point(aes(color = Context))+   facet_grid(.~r0_bin)+   scale_color_manual(values = c(\"black\",\"gray80\", \"#66A61E\",\"#66D61E\"))+   stat_smooth(method = \"glm\", method.args = list(family=quasi(link='log')), formula = y~x, color = \"black\")+   scale_y_continuous(name = \"Cumulative infections (%)\")+ scale_x_continuous(name = \"Introduction hazard from humans (FOI)\", breaks = c(-9,-6,-4), labels = c(\"1:10^9\",\"1:10^6\",\"1:10 000\"))+   theme_classic()+   theme(strip.text = element_text(size = 12),         axis.title.y = element_text(size = 12),axis.text = element_text(size = 10), legend.text = element_text(size=10), legend.title = element_text(size=12)) -> Cumulative.plot  ggpubr::ggarrange(Prevalence.plot, Persistence.plot, Cumulative.plot,nrow =3, ncol=1, common.legend = T)+   annotate(\"label\", x = 0.1, y = .85, label = \"A\", fill = \"white\", size = 6) +   annotate(\"label\", x = 0.1, y = .55, label = \"B\", fill = \"white\", size = 6) +    annotate(\"label\", x = 0.1, y = .25, label = \"C\", fill = \"white\", size = 6)"},{"path":"/articles/Visualize_by_context.html","id":"compare-outbreak-characteristics-for-initial-and-continuous-spillover","dir":"Articles","previous_headings":"","what":"Compare outbreak characteristics for initial and continuous spillover","title":"Summarize introduction, spread, prevalence, and persistence","text":", visualize differences outbreak characteristics continuous transmission humans (cases plotted ) vs single, initial outbreak various sizes. initial outbreaks range 0.1% (1:1,000 deer), 0.0001% (1:1 million deer), 1e-7% (1:1 billion deer). resulting figure corresponds Figure 7 Rosenblatt et al. Prep.","code":"whitetailedSIRS::scenario_results %>%     mutate(., intro = \"Continuous\\nintroduction\") %>%     select(., -r0, -FOI) -> continuous  whitetailedSIRS::initial_infection_results_1_in_1000 %>%     mutate(., intro = \"Initial introduction\\n1 in 1,000\") %>%     select(., -r0) -> initial_high  whitetailedSIRS::initial_infection_results_1_in_1mil %>%     mutate(., intro = \"Initial introduction\\n1 in 1 million\") %>%     select(., -r0) -> initial_med  whitetailedSIRS::initial_infection_results_1_in_1bil %>%     mutate(., intro = \"Initial introduction\\n1 in 1 billion\") %>%     select(., -r0) -> initial_low  rbind(continuous, initial_high, initial_med, initial_low) %>%     mutate(intro = factor(intro, levels = c(\"Continuous\\nintroduction\",\"Initial introduction\\n1 in 1,000\", \"Initial introduction\\n1 in 1 million\", \"Initial introduction\\n1 in 1 billion\")),           Cumulative_infections = Cumulative_infections*100)-> spillover.df  spillover.df %>%     ggplot(., aes(x = intro, y = Prevalence))+    geom_boxplot()+    facet_grid(Context ~.)+    scale_y_continuous(name = \"Average prevalence (%)\")+    theme_classic()+    theme(axis.title.x = element_blank(),          strip.background = element_blank(),          strip.text.y = element_blank())-> spillover_prev_plot  spillover.df %>%     group_by(Context, intro) %>%     summarize(., LCL = binom.confint(x = sum(Persist),n = 200, methods = \"exact\", conf.level = 0.95)$lower,              mean = binom.confint(x = sum(Persist),n = 200, methods = \"exact\", conf.level = 0.95)$mean,              UCL = binom.confint(x = sum(Persist),n = 200, methods = \"exact\", conf.level = 0.95)$upper) %>%     ggplot(., aes(x = intro, y = mean))+    geom_point()+    geom_errorbar(aes(ymin = LCL, ymax = UCL))+    facet_grid(Context ~.)+    scale_y_continuous(name = \"Probability of persistence\")+    theme_classic()+    theme(axis.title.x = element_blank(),          strip.background = element_blank(),          strip.text.y = element_blank()) -> spillover_presist_plot  spillover.df %>%     ggplot(., aes(x = intro, y = Cumulative_infections))+    geom_boxplot()+    facet_grid(Context ~.)+    scale_y_continuous(name = \"Cumulative infections (%)\")+    theme_classic()+    theme(axis.title.x = element_blank()) -> spillover_cumulative_plot  ggpubr::ggarrange(spillover_prev_plot, spillover_presist_plot, spillover_cumulative_plot, ncol = 3)"},{"path":"/articles/sir_model_description.html","id":"sirs-ode-equations","dir":"Articles","previous_headings":"","what":"1. SIRS ODE Equations","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"main function package whitetailedSIRS::simple_sirs() derived equations 5-10 . explore two direct exposure pathways Susceptible-Infected-Recovered-Susceptible model (SIRS) simulates infection dynamics time. See Rosenblatt et al. Prep full description parameter values used projecting outbreaks SARS-CoV-2. \\[\\begin{align} \\tfrac{ds}{dt} &= - \\beta si + \\alpha r \\\\  \\tfrac{di}{dt} &= \\beta si - \\gamma \\\\  \\tfrac{dr}{dt} &= \\gamma - \\alpha r \\\\ \\end{align}\\] \\(s\\) proportion susceptible individuals, \\(\\) proportion infected individuals SARS-CoV-2, \\(r\\) proportion recovered individuals; thus, \\(s++r = 1\\) . \\(\\beta\\) transmission rate, \\(\\gamma\\) recovery rate, \\(\\alpha\\) immunity loss rate (inverse time loss immunity; Figure 1). \\(\\beta\\) product contact rate (\\(c\\)) probability infection (\\(\\nu\\); Equation 4 ). \\[\\begin{align} \\beta = c \\cdot \\nu \\end{align}\\] Wild deer SIRS ODE equations \\[\\begin{align} \\frac{ds_W}{dt} =                \\alpha r_W -                s_W (\\beta_{WW}^{Aero} i_W + \\beta_{WW}^{DC} i_W +                \\beta_{CW}^{Aero} i_C + \\beta_{CW}^{DC} i_C + \\beta_{HW}^{Aero} i_H) \\end{align}\\] \\[\\begin{align} \\frac{di_W}{dt} =                s_W (\\beta_{WW}^{Aero} i_W + \\beta_{WW}^{DC} i_W +                \\beta_{CW}^{Aero} i_C + \\beta_{CW}^{DC} i_C + \\beta_{HW}^{Aero} i_H)                 - \\gamma i_W \\nonumber \\end{align}\\] \\[\\begin{align} \\frac{dr_W}{dt} = \\gamma i_W - \\alpha r_W \\end{align}\\] Captive deer SIRS ODE equations \\[\\begin{align} \\frac{ds_C}{dt} =                \\alpha r_C -                s_C (\\beta_{CC}^{Aero} i_C + \\beta_{CC}^{DC} i_C +                \\beta_{CW}^{Aero} i_W + \\beta_{CW}^{DC} i_W + \\beta_{HC}^{Aero} i_H) \\end{align}\\] \\[\\begin{align} \\frac{di_C}{dt} =                s_C (\\beta_{CC}^{Aero} i_C + \\beta_{CC}^{DC} i_C +                \\beta_{CW}^{Aero} i_W + \\beta_{CW}^{DC} i_W + \\beta_{HW}^{Aero} i_H) \\end{align}\\] \\[\\begin{align} \\frac{dr_C}{dt} = \\gamma i_C - \\alpha r_C \\end{align}\\] One parameter present whitetailedSIRS::simple_sirs() listed parameter called boost. boost mimics vaccine boosting captive deer herds, transitioning captive deer Susceptible compartment Recovered compartment without infection. vaccine boosting evaluated, parameter set 0. See whitetailedSIRS::Management_Alternatives_Systems vignette details.","code":"# equation 5   dS_wild <- alpha_immunity * R_wild -          (S_wild * ((beta_aero_ww * I_wild) + (beta_dc_ww * I_wild) +                        (beta_aero_cw * I_captive) + (beta_dc_cw * I_captive) +                        (beta_aero_hw * I_human))) # equation 6  dI_wild <- (S_wild * ((beta_aero_ww * I_wild) + (beta_dc_ww * I_wild) +                                (beta_aero_cw * I_captive) + (beta_dc_cw * I_captive) +                                (beta_aero_hw * I_human))) -          (gamma_recov * I_wild) # equation 7  dR_wild <- (gamma_recov * I_wild) -          (alpha_immunity * R_wild) # equation 8  dS_captive <- alpha_immunity * R_captive -          (S_captive * ((beta_aero_cc * I_captive) + (beta_dc_cc *I_captive) +                           (beta_aero_cw * I_wild) + (beta_dc_cw * I_wild) +                           (beta_dc_hc * I_human))) # equation 9  dI_captive <- (S_captive * ((beta_aero_cc * I_captive) + (beta_dc_cc *I_captive) +                                      (beta_aero_cw*I_wild) + (beta_dc_cw * I_wild) +                                      (beta_dc_hc * I_human))) -          (gamma_recov * I_captive) # equation 10  dR_captive <- (gamma_recov * I_captive) -          (alpha_immunity * R_captive)"},{"path":"/articles/sir_model_description.html","id":"beta-definitions","dir":"Articles","previous_headings":"","what":"2 \\(\\beta\\) Definitions","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Several \\(\\beta\\) values included model incorporate various direct transmission pathways wild deer, captive deer, humans. basic structure \\(\\beta\\) values product proximity contact rate infection probability given contact. Superscripts indicate mode transmission, including: “Aero”, indicate transmission aerosols; “DC” indicate transmission via fluid exchanged direct contact. Subscripts indicate host-recipient pair particular transmission risk parameter: transmission wild deer (WW); transmission captive deer wild deer (CW); transmission captive deer (CC); transmission human wild deer (HW); transmission human captive deer (HC).","code":""},{"path":"/articles/sir_model_description.html","id":"aerosol-transmission","dir":"Articles","previous_headings":"2 \\(\\beta\\) Definitions","what":"2.1 Aerosol Transmission","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Aerosolized transmission rates (\\(\\beta^{Aero}\\)) product rate susceptible individual enters shared airspace infected individual (within 1.5m) probability infection given proximity. detail deer-deer proximity rates wild, captivity, across fence lines separating settings (Section 2.3.1.1), human-deer proximity rates wild captive environments (Section 2.3.1.2), infection probability given proximity (Section 2.3.1.3). build transmission rates (\\(\\beta^{Aero}\\)) deer humans deer various settings (Section 2.3.1.4).","code":""},{"path":"/articles/sir_model_description.html","id":"deer-deer-proximity-rates","dir":"Articles","previous_headings":"2 \\(\\beta\\) Definitions > 2.1 Aerosol Transmission","what":"2.1.1 Deer-deer proximity rates","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Wild deer - define proximity (\\(\\omega_{ij}\\)) frequency per day host recipient j within 1.5 m . estimate proximity rate wild deer, (\\(\\omega_{ww}\\)), based contact rate model developed Habib et al. (2011) chronic wasting disease white-tailed deer results intermediate transmission blends density-dependence frequency-dependence. formulation applies deer-deer transmission scenarios, cases without attractants (e.g., bait, supplemental feed). also apply model captive circumstances mimic natural conditions. given : \\[\\begin{align} \\omega_{ij} = \\kappa \\bigg( \\frac{N_{W}^{1-q}}{A_{W}} \\bigg) \\cdot \\rho_{attractant} \\end{align}\\] \\(\\kappa\\) scaling constant; \\(q\\) concavity scaling constant density-contact rate relationship ranging 0 – 1, density-dependence frequency-dependence, respectively; \\(N_W\\) total population size; \\(A_W\\) area inhabited population; \\(\\rho_{attractant}\\) adjustment presence attractant. whitetailedSIRS package, function calc_contact_rate handle calculation. Captive deer - per capita rate proximity deer captivity unstudied likely highly dependent facility type practices. lower density facilities mimic natural densities natural conditions estimate proximity rates based calculation wild populations (Eq. 11). use expert-elicited estimates deer proximity rates (proximity events per day) higher intensity captive operations (\\(\\omega_{CC}\\)). Fence line interactions – estimate per capita proximity rates along fence lines separating wild captive deer herds using multiple estimates derived literature (\\(\\omega_{WC}\\)).","code":"calc_contact_rate <- function(kappa,                               N_w,                               q,                               A_w,                               rho_attractant,                               nsamples,                               seed,                               type_contact){     contact_val <- kappa * (N_w^(1-q)/A_w) * rho_attractant    return(contact_val) }"},{"path":"/articles/sir_model_description.html","id":"human-deer-proximity-rates","dir":"Articles","previous_headings":"2 \\(\\beta\\) Definitions > 2.1 Aerosol Transmission","what":"2.1.2 Human-deer proximity rates","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"Human - wild deer proximity rates – Human-deer interactions understudied literature, instead use expert elicitation estimate rate proximity humans deer wild conditions (\\(\\omega_{HW}\\)). expert elicitation process estimated human-deer proximity rates two scenarios differed human density development, reflecting rural suburban conditions. Human – captive deer proximity rates – used expert elicitation estimate human-deer proximity rate intensive captive facilities, reflecting range activities including operational tasks, routine veterinary tasks, visitors interacting captive animals. used general description provide general, initial estimate unstudied proximity rate (\\(\\omega_{HC}\\)), acknowledging rate likely enterprise- facility-specific.","code":""},{"path":"/articles/sir_model_description.html","id":"infection-probability-given-proximity","dir":"Articles","previous_headings":"2 \\(\\beta\\) Definitions > 2.1 Aerosol Transmission","what":"2.1.3 Infection probability given proximity","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"probability infection (\\(\\sigma^{Aero}\\)) given proximity function instantaneous dose received dose response relationship. estimate dose received susceptible individual proximity infected individual, model 1) emission SARS-CoV-2 infected individual, 2) resulting concentration SARS-CoV-2 designated airspace around infected individual, considering virus emission virus loss, 3) amount SARS-CoV-2 inhaled susceptible individual given proximity infected individual. parameters exist literature focused human SARS-CoV-2 infection can adopted . First, infected individual emits SARS-CoV-2 particular rate (\\(ER_q\\); quanta/hr) product viral load sputum (\\(C_{\\nu}\\); RNA copies/ml), conversion factor (\\(C_i\\); quanta/RNA copy), inhalation/exhalation rate (\\(IR\\); \\(m^3\\)/hr), exhaled droplet volume concentration (\\(V_d\\); ml exhaled droplets/\\(m^3\\) exhaled; Mikszewski et al. 2021). \\[\\begin{align} {ER}_q = C_{\\nu} \\cdot C_i \\cdot {IR} \\cdot V_d \\end{align}\\] can model instantaneous concentration SARS-CoV-2 (\\(C\\); quanta/\\(m^3\\)) well-mixed airspace around infected individual emitting SARS-CoV-2 (\\({ER}_q\\); quanta/hr) fixed volume (\\(V\\); \\(m^3\\)), accounting loss rate (\\({IVRR}\\); \\(hr^{-1}\\)) sum air exchange (\\({AER}\\); \\(hr^{-1}\\)), settling (\\(s\\); \\(hr^{-1}\\), inactivation rates (\\(\\lambda\\); \\(hr^{-1}\\); modified Buonanno et al. 2020). \\[\\begin{align} C = \\frac{{ER}_q}{{IVRR} \\cdot V} \\end{align}\\] \\[\\begin{align} {IVRR} = {AER} + s + \\lambda \\end{align}\\] susceptible individual enters contaminated airspace surrounding infected individual, dose (\\(Q_A\\); quanta) product inhalation rate susceptible individual (\\(IR\\); \\(m^3\\)/hr), concentration SARS-CoV-2 fixed volume (\\(C\\); quanta/\\(m^3\\)), duration time susceptible individual stays within contaminated airspace contact (\\(t_{contact}\\); hr). \\[\\begin{align} Q = IR \\cdot C \\cdot t_{contact} \\end{align}\\] amount SARS-CoV-2 inhaled susceptible deer (\\(Q_A\\)) converted probability infection using Wells-Riley infection model (Equation 8). model, probability individual developing sustaining infection SARS-CoV-2 function dose received (measured quanta; \\(Q\\)) species-specific probability infection 1 quantum (\\(r\\); \\(r_{human} = 1\\) corresponds 1 quantum causing infection 63% susceptible individuals; HID63). use expert elicitation estimate dose response relationship white-tailed deer (\\(r_{deer}\\)). \\[\\begin{align} \\sigma^{Aero} = 1 - e^{-rQ} \\end{align}\\] dose received probability infection calculated deer-deer human-deer proximity events based species-specific exhalation/inhalation rate, viral loads, dose response relationships, various durations proximity events particular contexts. whitetailedSIRS package, function calc_sigma_aero automate calculation infection probability.","code":"calc_sigma_aero <- function(AER,                          s,                          lambda,                          C_nu,                          C_i,                          IR,                          V_d,                          V_air,                          t_contact,                          r) {        # Calculate the viral particle loss rate as the sum     # of air exchange, settling rate, and inactivation    IVRR <- AER + s + lambda        # calculate emission rate of viral particles    ER_q <- C_nu * C_i * IR * V_d        # Calculate instantaneous concentration of viral particles.    C_inst <- ER_q / (IVRR * V_air) #V_air is airspace volume        # Calculate viral dose in quanta as product of     # inhalation rate, instantaneous concentration of viral particles    # and the duration of the contact    Q <- IR * C_inst * t_contact        # Use Wells-Riley model to transform amount of virus inhaled    # into a probability of infection via aerosol    sigma_aero <- 1 - exp(-r * Q)        return(sigma_aero) }"},{"path":"/articles/sir_model_description.html","id":"aerosol-transmission-rates-betaaero","dir":"Articles","previous_headings":"2 \\(\\beta\\) Definitions > 2.1 Aerosol Transmission","what":"2.1.4 Aerosol transmission rates (\\(\\beta^{Aero}\\))","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"various aerosol transmission rates used SIRS model. Parameter values listed Table 1 Rosenblatt et al. Prep. Aerosol transmission wild deer: \\[\\begin{align} \\beta_{WW}^{Aero} = \\kappa \\bigg( \\frac{N_{W}^{1-q}}{A_{W}} \\bigg) \\cdot \\rho_{attractant} \\cdot \\sigma^{Aero} \\end{align}\\] \\(\\kappa\\) = scaling constant (Section 2.1.1) \\(q\\) = concavity scaling constant (Section 2.1.1) \\(N_W\\) = Total wild population size (Section 2.1.1) \\(A_W\\) = Area inhabited wild population (Section 2.1.1) \\(\\rho_{attractant}\\) = proportional adjustment attractants landscape (Section 2.1.1) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3) Aerosol transmission captive deer: \\[\\begin{align} \\beta_{CC}^{Aero} = \\omega_{CC} \\cdot \\sigma^{Aero} \\end{align}\\] \\(\\omega_{CC}\\) = Captivity proximity rate (Section 2.1.1) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3) Aerosol transmission wild captive deer across fence: \\[\\begin{align} \\beta_{CW}^{Aero} = \\omega_{WC} \\cdot \\sigma^{Aero} \\end{align}\\] \\(\\omega_{WC}\\) = Fence line proximity rate wild captive deer (Section 2.1.1) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3) Aerosol transmission humans wild deer: \\[\\begin{align} \\beta_{HW}^{Aero} = \\omega_{HW} \\cdot \\sigma^{Aero} \\end{align}\\] \\(\\omega_{HW}\\) = Proximity rate humans wild deer (Section 2.1.2) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3) Aerosol transmission humans captive deer: \\[\\begin{align} \\beta_{HC}^{Aero} = \\omega_{HC} \\cdot \\sigma^{Aero} \\end{align}\\] \\(\\omega_{HC}\\) = Proximity rate humans captive deer (Section 2.1.2) \\(\\sigma^{Aero}\\) = Probability infection aerosols (Section 2.1.3)","code":""},{"path":"/articles/sir_model_description.html","id":"fluid-transmission","dir":"Articles","previous_headings":"2 \\(\\beta\\) Definitions","what":"2.2 Fluid Transmission","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"transmission rate SARS-CoV-2 via fluid transfer direct contact (\\(\\beta^{DC}\\)) product rate susceptible individual enters shared airspace infected individual (within 1.5m), probability two individuals making physical contact, probability infection given contact. simply take deer-deer proximity rates detailed (\\(\\omega_{ij}\\)) multiply expert-elicited estimates physical contact probability (\\(\\epsilon^{DC}\\)) determine rate physical contact, probability infection given transfer 0.1 ml contaminated fluid physical contact (\\(\\sigma^{DC}\\)). detail infection probability given physical contact (Section 2.2.1). build transmission rates (\\(\\beta^{DC}\\)) deer (Section 2.2.2). consider transmission pathway deer, human deer.","code":""},{"path":"/articles/sir_model_description.html","id":"infection-probability-given-physical-contact","dir":"Articles","previous_headings":"2 \\(\\beta\\) Definitions > 2.2 Fluid Transmission","what":"2.2.1 Infection probability given physical contact","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"use Wells-Riley dose response model estimates infection probability log-logistic function dose (\\(d^{dc}\\); plaque-forming units, PFU) dose-response function (\\(k\\); Watanabe et al. 2010). dose received product typical volume sputum transferred given contact (\\(V^{DC}\\)) concentration SARS-CoV-2 sputum (\\(C_{\\nu}\\)). initially assume contact 100\\(\\mu\\)l sputum transferred individuals making contact. adjust volume across simulations identify volume threshold rapidly increases transmission risk. \\[\\begin{align} \\sigma^{DC} = 1 - e^{-((C_{v} \\cdot V_{sputum} )/k)} \\end{align}\\] whitetailedSIRS package, function calc_sigma_dc automate calculation infection probability transmission fluid.","code":"# function for sigma_direct_contact  calc_sigma_DC<- function(V_DC, C_nu, pfu_conv, k){        # calculate dose received as function of volume of sputum and viral particles concentration. There is an added parameter pfu_conv to convert RNA copies to plaque forming units, which is likely necessary given available parameter estimates.    d_DC <- V_DC * C_nu * pfu_conv        # calculate infection probability     sigma_DC <- 1 - exp(-d_DC/k)        return(sigma_DC) }"},{"path":"/articles/sir_model_description.html","id":"fluid-transmission-betadc","dir":"Articles","previous_headings":"2 \\(\\beta\\) Definitions > 2.2 Fluid Transmission","what":"2.2.2 Fluid Transmission (\\(\\beta^{DC}\\))","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"various direct contact transmission rates used SIRS model. Parameter values listed Table 1 Rosenblatt et al. Prep. Direct contact transmission wild deer: \\[\\begin{align} \\beta_{WW}^{DC} = kappa \\cdot \\bigg( \\frac{N_W^{(1-q)}}{A_W} \\bigg) \\cdot \\epsilon^{DC} \\cdot \\sigma^{DC} \\end{align}\\] \\(\\kappa\\) = scaling constant (Section 2.1.1) \\(q\\) = concavity scaling constant (Section 2.1.1) \\(N_W\\) = Total wild population size (Section 2.1.1) \\(A_W\\) = Area inhabited wild population (Section 2.1.1) \\(\\epsilon^{DC}\\) = Probability deer making direct contact (Section 2.2) \\(\\sigma^{DC}\\) = Probability infection direct contact (Section 2.2.1) Direct contact transmission captive deer: \\[\\begin{align} \\beta_{CC}^{DC} = \\omega_{CC} \\cdot \\epsilon^{DC} \\cdot \\sigma^{DC} \\end{align}\\] \\(\\omega_{CC}\\) = Captivity proximity rate (Section 2.1.1) \\(\\epsilon^{DC}\\) = Probability physical contact (Section 2.2) \\(\\sigma^{DC}\\) = Probability infection physical contact (Section 2.2.1) Direct contact transmission wild captive deer along fence line (assuming possible): \\[\\begin{align} \\beta_{CW}^{DC} = omega_{WC} \\cdot \\sigma^{DC} \\cdot \\nu^{DC} \\end{align}\\] \\(\\omega_{WC}\\) = Fenceline contact rate wild captive deer (Section 2.1.1) \\(\\epsilon^{DC}\\) = Probability physical contact (Section 2.2) \\(\\epsilon^{DC}\\) = Probability infection physical contact (Section 2.2.1)","code":""},{"path":"/articles/sir_model_description.html","id":"function-to-calculate-and-organize-betas-and-other-sir-parameters","dir":"Articles","previous_headings":"2 \\(\\beta\\) Definitions","what":"2.3 Function to calculate and organize betas and other SIR parameters","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"function whitetailedSIRS::alternatives() available calculations user.","code":"alternative <- function(alpha_immunity = NULL, omega_ww = NULL, omega_cw = NULL, omega_cc = NULL, omega_hw = NULL, omega_hc = NULL, sigma_aero_deer_deer_wild = NULL, sigma_aero_deer_deer_captive = NULL, sigma_aero_deer_human_wild = NULL, sigma_aero_deer_human_capt = NULL, sigma_dc = NULL, sigma_dc_deer_deer = NULL, gamma_recov = NULL, I_human = NULL, boost = NULL)      {list(       alpha_immunity, #Duration of immunity (Section 1)       beta_aero_ww = omega_ww * sigma_aero_deer_deer_wild, #Transmission risk, aerosols between wild deer (Section 2.1.4)       beta_aero_cw = omega_cw * sigma_aero_deer_deer_wild, #Transmission risk, aerosols across fencelines (Section 2.1.4)       beta_aero_cc = omega_cc * sigma_aero_deer_deer_captive, #Transmission risk, aerosols between captive deer  (Section 2.1.4)       beta_aero_hw = omega_hw * sigma_aero_deer_human_wild, #Transmission risk, aerosols between humans and wild deer  (Section 2.1.4)       beta_aero_hc = omega_hc * sigma_aero_deer_human_capt, #Transmission risk, aerosols between humans and captive deer  (Section 2.1.4)       beta_dc_ww = omega_ww * sigma_dc * sigma_dc_deer_deer, #Transmission risk, fluid between wild deer (Section 2.2.2)       beta_dc_cw = omega_cw * sigma_dc * sigma_dc_deer_deer, #Transmission risk, fluid across fencelines (Section 2.2.2)       beta_dc_cc = omega_cc * sigma_dc * sigma_dc_deer_deer, #Transmission risk, fluid between captive deer (Section 2.2.2)       gamma_recov = gamma_recov, #Recovery rate (Section 1)       I_human = I_human, #Human prevalence (Section 1)       boost = boost)} #Boost (See `whitetailedSIRS::Management_Alternatives_Systems` vignette for more details.)"},{"path":"/articles/sir_model_description.html","id":"tracking-cumulative-infections","dir":"Articles","previous_headings":"","what":"3. Tracking cumulative infections","title":"Epidemiological model overview for SARS-CoV-2 in white-tailed deer","text":"option track cumulative infections population course projection. modified whitetailedSIRS::simple_sirs_with_cumulative() added ODE equations calculate sum. majority function identical whitetailedSIRS::simple_sirs(), two added lines: added lines equate following calculations: \\[\\begin{align} Cumulativeinfections_{W} =  \\sum^{120}_{t=1} s_{t-1}(\\beta^{Aero}_{WW} i_{W,t-1} + \\beta^{DC}_{WW} i_{W,t-1} + \\beta^{Aero}_{CW} i_{C,t-1} + \\beta^{DC}_{CW} i_{C,t-1} + \\beta^{Aero}_{HW} i_{H}) \\end{align}\\] \\[\\begin{align}  Cumulativeinfections_{C} = \\sum^{120}_{t=1} s_{t-1}(\\beta^{Aero}_{CC} i_{C,t-1} + \\beta^{DC}_{CC} i_{C,t-1} + \\beta^{Aero}_{CW} i_{W,t-1} + \\beta^{DC}_{CW} i_{W,t-1} + \\beta^{Aero}_{HC} i_{H}) \\end{align}\\]","code":"cumulative_I_wild <- (S_wild * ((beta_aero_ww * I_wild) + (beta_dc_ww * I_wild) +                                          (beta_aero_cw * I_captive) + (beta_dc_cw * I_captive) +                                          (beta_aero_hw * I_human)))  cumulative_I_captive <- (S_captive * ((beta_aero_cc * I_captive) + (beta_dc_cc *I_captive) +                                                (beta_aero_cw*I_wild) + (beta_dc_cw * I_wild) +                                                (beta_aero_hc * I_human)))"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Elias Rosenblatt. Author, maintainer. Javi Rudolph. Author, contributor. Fer Arce. Author, contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rosenblatt E, Rudolph J, Arce F (2023). whitetailedSIRS: Generate Deer Disease Dyanmics SIRS Framework. R package version 0.0.0.9000, https://github.com/disease-decision-analysis--research/whitetailedSIRS.","code":"@Manual{,   title = {whitetailedSIRS: Generate Deer Disease Dyanmics Under an SIRS Framework},   author = {Elias Rosenblatt and Javi Rudolph and Fer Arce},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://github.com/disease-decision-analysis-and-research/whitetailedSIRS}, }"},{"path":[]},{"path":"/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Elias Rosenblatt (erosenbl@uvm.edu), Rubenstein School Environment Natural Resources, 81 Carrigan Drive, Burlington, VT, USA F. Javiera Rudolph, Department Ecosystem Sciences Management, Pennsylvania State University, University Park, PA, USA Fernando Arce, Department Environmental Conservation, University Massachusetts, Amherst, MA, USA","code":""},{"path":"/index.html","id":"information","dir":"","previous_headings":"","what":"Information","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Repository Type: Program R scripts Year Origin: 2023 Year Version: 2023 Version: 1.0.0 Digital Object Identifier (DOI): ______ USGS Information Product Data System (IPDS) .: IP-_______","code":""},{"path":"/index.html","id":"suggested-citation-for-software","dir":"","previous_headings":"","what":"Suggested Citation for Software","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Rosenblatt, E, Rudolph, J.F., Arce, F., 2023. whitetailedSIRS: package project SARS-CoV-2 outbreak dynamics white-tailed deer. Version 1.0.0: U.S. Geological Survey software release, https://doi.org/______/______","code":""},{"path":"/index.html","id":"abstract","dir":"","previous_headings":"","what":"Abstract","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"software release contains several R scripts generate epidemic projections SARS-CoV-2 white tailed deer populations using Susceptible-Infected-Recovered-Susceptible (SIRS) modeling framework. provide workflow vignettes used Rosenblatt et al. Prep Cook et al. Prep. Users able specify transmission parameters human-deer deer-deer transmission quantify changes outbreak dynamics. outputs package ggplot friendly, part, use list-column workflow working multiple simulations. Details model can found vignettes.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"can install development version whitetailedSIRS GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"disease-decision-analysis-and-research/whitetailedSIRS\")"},{"path":[]},{"path":"/index.html","id":"vignette-1-sir_model_descriptionrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 1: sir_model_description.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: introductory vignette detailing SIRS ODE equations corresponding functions, used Rosenblatt et al. prep Cook et al. Prep. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-2-example_valuesrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 2: example_values.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: vignette stepping suggested work-flow using whitetailedSIRS package. vignettes use work-flow, vignette useful new users understand replicate modify analysis presented. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-3-sirs_analysis_by_contextrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 3: SIRS_analysis_by_context.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: vignette details analysis used study differences outbreak dynamics four scenarios SARS-CoV-2 transmission among white-tailed deer populations. output vignette used visualize differences vignette whitetailedSIRS::Visualize_by_context. analysis corresponds Objectives 1-3 Rosenblatt et al. Prep. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-4-sirs_analysis_by_context_initialspillrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 4: SIRS_analysis_by_context_initialspill.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: vignette follows blueprint whitetailedSIRS::SIRS_analysis_by_context. primary difference initial infected compartment sizes set non-zero values human prevalence set zero. mimics initial spillover event given magnitude, test outbreak dynamics differ continuous spillover detailed whitetailedSIRS::SIRS_analysis_by_context. differences visualized vignette whitetailedSIRS::Visualize_by_context. simulation code suppresed rendered vignette, can viewed .Rmd file. analysis corresponds Objective 4 Rosenblatt et al. Prep. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-5-visualize_by_contextrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 5: Visualize_by_context.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: data/scenario_results.rda; data/scenario_projections.rda Details: vignette demonstrates visualize differences various characteristics outbreaks scenarios. figures used results published Rosenblatt et al. Prep.. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-6-connected_systemsrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 6: Connected_Systems.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: data/scenario_results.rda Details: vignette tests connected systems (wild captive separated fence line) differ outbreak characteristics, compared isolated scenario. scenarios connected, may differences prevalence, cumulative cases, persistence due fence line interactions. analysis corresponds Objective 5 Rosenblatt et al. Prep. Outputs: N/","code":""},{"path":"/index.html","id":"vignette-7-management_alternatives_systemsrmd","dir":"","previous_headings":"Vignettes","what":"Vignette 7: Management_Alternatives_Systems.Rmd","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: vignette runs outbreak simulations estimate effects various management alternatives dynamics SARS-CoV-2 outbreak wild captive white-tailed deer. considered captive:wild systems separated fence. management alternatives may implemented wild captive populations, one scenario. focus 11 alternatives, ranging across agriculture, public health, wildlife sectors. alternatives detailed Cook et al. Prep.. Outputs: N/","code":""},{"path":[]},{"path":"/index.html","id":"function-1-draw_elicitation_samplesr","dir":"","previous_headings":"Functions","what":"Function 1: draw_elicitation_samples.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: elicitation_data.rda Details: R function samples user-specified number values expert-elicited parameter estimates used Rosenblatt et al. Prep Cook et al. Prep. Outputs: data frame listing expert-elicited parameters, error distribution characteristics (mean, standard deviation, family) user-specified number random samples error distribution.","code":""},{"path":"/index.html","id":"function-2-get_ee_param_valsr","dir":"","previous_headings":"Functions","what":"Function 2: get_EE_param_vals.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: Output object elicitation_data.rda Details: R function prepare random draws elicitation_data.rda inputs SIRS ODE equations. Outputs: vector object containing drawn values expert-elicited parameter, length specified user.","code":""},{"path":"/index.html","id":"function-3-calc_contact_rater","dir":"","previous_headings":"Functions","what":"Function 3: calc_contact_rate.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function uses proximity rate model developed Habib et al. (2011) estimate proximity rates deer wild wild-like captive settings, conditional density habitat availability. function can also used captive settings conditions result identical deer-deer proximity rates. Outputs: vector object containing drawn deer-deer proximity rate values (proximity events per day), length specified user.","code":""},{"path":"/index.html","id":"function-4-calc_sigma_aeror","dir":"","previous_headings":"Functions","what":"Function 4: calc_sigma_aero.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function calculates probability infection aerosol transmission SARS-CoV-2. User can specify number probabilities generated derived parameter, specific parameters influencing probabilities (e.g. duration proximity, dose-response, etc.). Outputs: vector object containing drawn infection probabilities aerosol transmission, length specified user.","code":""},{"path":"/index.html","id":"function-5-calc_sigma_dcr","dir":"","previous_headings":"Functions","what":"Function 5: calc_sigma_dc.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function calculates probability infection fluid transmission SARS-CoV-2. User can specify number probabilities generated derived parameter, specific parameters influencing probabilities (e.g. duration proximity, dose-response, etc.). Outputs: vector object containing drawn infection probabilities fluid transmission, length specified user.","code":""},{"path":"/index.html","id":"function-6-initial_compartmentsr","dir":"","previous_headings":"Functions","what":"Function 6: initial_compartments.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function populates list initial Susceptible (S) - Infected () - Recovered (R) compartment sizes. function argument format output allow calculation size compartment equilibrium (steady = TRUE), format output allow calculation cumulative infections course projected outbreak (steady = FALSE). two process done execution function, rather run separately. length vector object list determined user. formatted output ready fed run.R function, uses Epi_sirs.R Epi_sirs_with_cumulative.R functions project compartment sizes change projection. Outputs: list object containing vector objects containing starting size SIR compartment. steady = FALSE, list includes 2 additional vectors “I_wild_cumulative” “I_captive_cumulative”. list object prepared fed run.R function.","code":""},{"path":"/index.html","id":"function-7-alternativer","dir":"","previous_headings":"Functions","what":"Function 7: alternative.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function helps prepare parameters used solve SIRS ODE equations wild captive deer, fed params argument run.R function. 15 parameters must defined lengths equal number simulations run. function takes parameter inputs calculates derived transmission rate parameters use ODE equations. Outputs: list vector objects containing estimates derived parameters, use run.R function.","code":""},{"path":"/index.html","id":"function-8-runr","dir":"","previous_headings":"Functions","what":"Function 8: run.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: N/Details: R function Run ODE Solver SIRS model, using parameter estimates (output alternatives.R), initial compartment sizes projection (output initial_compartments.R argument steady = FALSE) initial compartment sizes formatted steady state calculation (output initial_compartments.R argument steady = TRUE). Outputs: list containing run identifier (run_id), initial compartment sizes projection (inits.fall), initial compartment sizes steady state calculation (inits.steady), parameter values used run (params), compartment sizes time step reach run (ode_proj), compartment sizes steady-state equilibrium (steady_state), scenario label run_id (Context). output used visualization table summaries. results Rosenblatt et al. Prep, output stored package scenario_results.rda.","code":""},{"path":"/index.html","id":"function-9-simple_sirsr","dir":"","previous_headings":"Functions","what":"Function 9: simple_sirs.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: Outputs alternatives.R initial_compartments.R. Details: R function defines ODE SIR equations work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points. function used package calculate persistence, steady state equilibrium (via rootSolve::run_steady()), along compartment sizes change projection. Outputs: N/","code":""},{"path":"/index.html","id":"function-10-simple_sirs_with_cumulativer","dir":"","previous_headings":"Functions","what":"Function 10: simple_sirs_with_cumulative.R","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Data inputs: Outputs alternatives.R initial_compartments.R. Details: Similar whitetailedSIRS::simple_sirs, R function defines ODE SIR equations work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points. added feature function ODE equations calculate cumulative infections day 0 day t. Outputs: N/","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"basic example run simple projection using basic functions fake data. Functions whitetailedSIRS allow complex calculations, core concepts remain .","code":"library(whitetailedSIRS) ## basic example code example_inits <- c(S_wild = 1,                     I_wild = 0,                     R_wild = 0,                    I_wild_cumulative = 0,                    S_captive = 1,                    I_captive = 0,                    R_captive = 0,                    I_captive_cumulative = 0)  example_inits_steady <- c(S_wild = 1,                     I_wild = 0,                     R_wild = 0,                    S_captive = 1,                    I_captive = 0,                    R_captive = 0)  # length of time to run this for   example_times <-  seq(0, 500, by = 1)  # The parameters we are using in the simulation example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     phi_cw = 0,                     phi_wc = 0,                     gamma_recov = 0.01,                     I_human = 0.05,                     boost = 0) library(deSolve) library(rootSolve)  example_out <- ode(y = example_inits, times = example_times, parms = example_params, func = whitetailedSIRS::simple_sirs_with_cumulative)  example_eq <- runsteady(y = example_inits_steady, parms = example_params, func = whitetailedSIRS::simple_sirs) library(tidyverse) example_out %>%     as_tibble() %>%     select(., -I_wild_cumulative, -I_captive_cumulative) %>%     pivot_longer(-time, names_to = \"compartment\", values_to = \"proportion\") %>%     separate(compartment, sep = \"_\", c(\"sir_type\", \"pop_type\")) %>%     mutate(sir_type = factor(sir_type, levels = c(\"S\", \"I\", \"R\")),           pop_type = factor(pop_type, levels = c(\"wild\", \"captive\"))) %>%     ggplot(aes(x = time, y = proportion, color = sir_type, linetype = pop_type)) +    geom_line() +    labs(title = \"SIR dynamics\", y = \"Proportion of population\", x = \"Time in days\",         color = \"SIR\", linetype = \"Population type\") +    theme_bw() example_out %>%     as_tibble() %>%     select(., -S_wild, -I_wild, -R_wild, -S_captive, -I_captive, -R_captive) %>%     rename(., Wild = I_wild_cumulative, Captive = I_captive_cumulative) %>%     pivot_longer(-time, names_to = \"population\", values_to = \"cumulative_proportion\") %>%     mutate(population = factor(population, levels = c(\"Wild\", \"Captive\"))) %>%     ggplot(aes(x = time, y = cumulative_proportion, linetype = population)) +    geom_line() +    labs(title = \"Cumulative infections\", y = \"Proportion of population\", x = \"Time in days\",         linetype = \"Population type\") +    theme_bw() example_eq$y %>%     as_tibble_row() %>%     pivot_longer(cols = everything(), names_to = \"compartment\", values_to = \"proportion\") %>%     separate(compartment, sep = \"_\", c(\"sir_type\", \"pop_type\")) %>%     mutate(sir_type = factor(sir_type, levels = c(\"S\", \"I\", \"R\")),           pop_type = factor(pop_type, levels = c(\"wild\", \"captive\"))) %>%     ggplot(aes(x = sir_type,                alpha = pop_type,               y = proportion, fill = sir_type)) +    geom_col(position = \"dodge\") +    labs(title = \"Equilibrium proportions\", x = \"Compartment\", alpha = \"Population type\", fill = \"SIR\") +    scale_alpha_discrete(range = c(1, 0.4)) +    ylim(0, 1) +    theme_bw()"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Generate Deer Disease Dyanmics Under an SIRS Framework","text":"Cook, J.D., E. Rosenblatt, G.V. Direnzo, E.H.C. Grant, B.. Mosher, F. Arce, S. Christensen, R. Ghai, M.C. Runge. Prep. Using decision science evaluate risk management SARS-CoV-2 zoonotic transmission humans white-tailed deer. Rosenblatt, E., J.D. Cook, G.V. Direnzo, E.H.C. Grant, F. Arce, K. Pepin, F.J. Rudolph, M.C. Runge, S. Shriner, D. Walsh, B.. Mosher. Prep. Epidemiological modeling SARS-CoV-2 white-tailed deer (Odocoileus virginianus) reveals conditions introduction widespread transmission.","code":""},{"path":"/reference/alternative.html","id":null,"dir":"Reference","previous_headings":"","what":"Define parameters for solving white-tailed deer SIRS ODE equations under different management alternatives — alternative","title":"Define parameters for solving white-tailed deer SIRS ODE equations under different management alternatives — alternative","text":"alternative() helps prepare parameters used solve SIRS ODE equations wild captive deer, fed params argument run() function.","code":""},{"path":"/reference/alternative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define parameters for solving white-tailed deer SIRS ODE equations under different management alternatives — alternative","text":"","code":"alternative(   alpha_immunity = NULL,   omega_ww = NULL,   omega_cw = NULL,   omega_cc = NULL,   omega_hw = NULL,   omega_hc = NULL,   sigma_aero_deer_deer_wild = NULL,   sigma_aero_deer_deer_captive = NULL,   sigma_aero_deer_human_wild = NULL,   sigma_aero_deer_human_capt = NULL,   epsilon_dc = NULL,   sigma_dc_deer_deer = NULL,   gamma_recov = NULL,   I_human = NULL,   boost = NULL )"},{"path":"/reference/alternative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define parameters for solving white-tailed deer SIRS ODE equations under different management alternatives — alternative","text":"alpha_immunity Inverse duration temporary immunity entering recovered compartment (per day, 0-1). omega_ww Deer-deer proximity rate wild setting (proximity events per day). omega_cw Captive wild deer proximity rate along fence lines demarking captive wild populations (proximity events per day). omega_cc Deer-deer proximity rate captive setting (proximity events per day). omega_hw Human-deer proximity rate wild setting (proximity events per day). omega_hc Human-deer proximity rate captive setting(proximity events per day). sigma_aero_deer_deer_wild Probability infection via aerosol transmission wild deer. Derived using calc_sigma_aero() function. sigma_aero_deer_deer_captive Probability infection via aerosol transmission captive deer. Derived using calc_sigma_aero() function. sigma_aero_deer_human_wild Probability infection via aerosol transmission humans wild deer. Derived using calc_sigma_aero() function. sigma_aero_deer_human_capt Probability infection via aerosol transmission humans captive deer. Derived using calc_sigma_aero() function. epsilon_dc Probability direct contact deer, given proximity. sigma_dc_deer_deer Probability infection via fluid transmission deer. Derived using calc_sigma_dc() function. gamma_recov Inverse duration recovery infection (per day, 0-1). I_human Prevalence human population (proportion). boost Proportion susceptible deer captivity receiving vaccine boosters, per day.","code":""},{"path":"/reference/alternative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define parameters for solving white-tailed deer SIRS ODE equations under different management alternatives — alternative","text":"Returns list vectors parameter","code":""},{"path":"/reference/alternative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define parameters for solving white-tailed deer SIRS ODE equations under different management alternatives — alternative","text":"alternative() creates list parameter values fed SIRS ODE solver. length item output determined length arguments, must equal. argument(s) filled outputs another function package (e.g. calc_contact_rate, calc_sigma_aero, calc_sigma_dc, draw_elicitation_samples), user must fill argument vector values length arguments. Parameter values defined function remained fixed SIRS ODE solves. parameter values can derived random processes, projections deterministic. Proximity, default calc_sigma_aero() function, defined two individuals entering within 1.5m . proximity limit can modified V_air argument calc_sigma_aero() function, defines half-sphere volume aerosolized virus exhaled infectious individual.","code":""},{"path":[]},{"path":"/reference/alternative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define parameters for solving white-tailed deer SIRS ODE equations under different management alternatives — alternative","text":"","code":"alternative(alpha_immunity = c((1/30),(1/60),(1/90),(1/120),(1/150)), omega_ww = rep(10,5), omega_cw = rep(1,5), omega_cc = rep(20,5), omega_hw = rep(0.01,5), omega_hc = rep(0.25,5), sigma_aero_deer_deer_wild = rep(0.01,5), sigma_aero_deer_deer_captive = rep(0.1,5), sigma_aero_deer_human_wild = rep(0.001,5), sigma_aero_deer_human_capt = rep(0.05,5), epsilon_dc = rep(0.2,5), sigma_dc_deer_deer = rep(0.02,5), gamma_recov = rep(1/6,5), I_human = rep(0.05,5), boost = rep(0,5)) #> $alpha_immunity #> [1] 0.033333333 0.016666667 0.011111111 0.008333333 0.006666667 #>  #> $beta_aero_ww #> [1] 0.1 0.1 0.1 0.1 0.1 #>  #> $beta_aero_cw #> [1] 0.01 0.01 0.01 0.01 0.01 #>  #> $beta_aero_cc #> [1] 2 2 2 2 2 #>  #> $beta_aero_hw #> [1] 1e-05 1e-05 1e-05 1e-05 1e-05 #>  #> $beta_aero_hc #> [1] 0.0125 0.0125 0.0125 0.0125 0.0125 #>  #> $beta_dc_ww #> [1] 0.04 0.04 0.04 0.04 0.04 #>  #> $beta_dc_cw #> [1] 0.004 0.004 0.004 0.004 0.004 #>  #> $beta_dc_cc #> [1] 0.08 0.08 0.08 0.08 0.08 #>  #> $gamma_recov #> [1] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 #>  #> $I_human #> [1] 0.05 0.05 0.05 0.05 0.05 #>  #> $boost #> [1] 0 0 0 0 0 #>"},{"path":"/reference/alternatives_across_systems.html","id":null,"dir":"Reference","previous_headings":"","what":"alternatives_across_systems — alternatives_across_systems","title":"alternatives_across_systems — alternatives_across_systems","text":"dataframe containing results used compare influences potential management alternatives prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations. 200 iterations (run_id) run captive wild populations white-tailed deer, seperated single fenceline allows proximity direct contact captive wild deer (Complex), alternative implemented (Alternative). Complexes include captive deer outdoor ranch facilities wild deer rural areas (Outdoor ranch rural deer), captive deer outdoor ranch facilities wild deer suburban areas (Outdoor ranch suburban deer), captive deer intensive facilities wild deer rural areas (Intensive facility rural deer), captive deer intensive facilities wild deer suburban areas (Intensive facility suburban deer). Management alternatives (Alternative) include 1) action (baseline), 2) improve separation captive wild deer improving fencing (double-fence captive facilities), 3) reduce eliminate baiting practices legislation, enforcement, education (Eliminate baiting), 4) increase air flow indoor facilities match air exchange rate outdoor settings (Improve indoor facility air quality; applies complexes intensive facilities), 5) Cease research activities bring research management staff close proximity wild deer (Pause Research), 6) Require personal protective equipment humans interactions deer captive wild settings (PPE, ), 7) Require PPE captive settings (PPE, Captive), 8) Require PPE wild settings (PPE, Wild), 9) Reduce wild deer densities 10% reduce deer-deer contact rate spread SARS-CoV-2 (Reduce wild density 10%), 10) Reduce wild deer densities 25% reduce deer-deer contact rate spread SARS-CoV-2 (Reduce wild density 25%), 11) restrict human activities areas posing elevated probability human-deer interactions, suburban neighborhoods, parks, trail heads, etc. (Restrict human interactions), 12) Vaccinate repeatedly boost captive deer (Vaccinate boost captive deer), 13) provide initial vaccination captive deer secondary boosting (Vaccinate captive deer). Wild captive prevalence (meanWild meanCaptive, respectively) reported percent population infected, averaged simulated 120-day projection (run_id), particular alternative applied particular context. Cumulative infections reports total proportion wild captive populations infected course 120-fall projection (cumulativeWild cumulativeCaptive, respectively), can exceed 1, indicating individuals infected least fall season, particular alternative applied particular context. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium wild captive deer (persistWild persistCaptive, respectively), particular alternative applied particular context.","code":""},{"path":"/reference/alternatives_across_systems.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alternatives_across_systems — alternatives_across_systems","text":"","code":"alternatives_across_systems"},{"path":"/reference/alternatives_across_systems.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"alternatives_across_systems — alternatives_across_systems","text":"alternatives_across_systems","code":""},{"path":"/reference/alternatives_across_systems.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"alternatives_across_systems — alternatives_across_systems","text":"Derived Management_Alternatives_Systems.Rmd","code":""},{"path":"/reference/calc_contact_rate.html","id":null,"dir":"Reference","previous_headings":"","what":"Contact rate calculation for wild deer — calc_contact_rate","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"calc_contact_rate() uses proximity rate model developed Habib et al. (2011) estimate proximity rates deer wild settings, conditional density habitat availability. function can also used captive settings conditions result identical deer-deer proximity rates. user can alter proximity rates inclusion attractants landscape.","code":""},{"path":"/reference/calc_contact_rate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"","code":"calc_contact_rate(   kappa = NULL,   N_w = NULL,   q = NULL,   A_w = NULL,   rho_attractant = NULL,   nsamples = NULL,   seed = NULL,   type_contact = NULL )"},{"path":"/reference/calc_contact_rate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"kappa value contact scaling constant (influences slope density-contact relationship; reported Habib et al. 2011) N_w total population size deer. Defaults random draw Poisson distribution mean = 1000. q value concavity scaling constant (0-1, 0 equating density dependence 1 equating frequency dependence; reported Habib et al. 2011) A_w area inhabited N, square kilometers. Default set 100 square kilometers match Habib et al.'s (2011) approach. nsamples number values returned. Default 1, return vector > 2 seed specified, sets seed function type_contact option \"low\", \"medium\", \"high\" based parameters Habib et al. 2011 particular values wooded habitat available deer population question. \"low\" contact fixes kappa 16.37 q 0.53, mimicking proximity rates areas 53% wooded habitat. \"med\" contact fixes kappa 11.35 q 0.34, mimicking proximity rates areas 26% wooded habitat. \"high\" contact fixes kappa 15.58 q 0.32, mimicking proximity rates areas 12% wooded habitat. set \"manual\", manual input kappa q needed. values Habib et al. (2011) available contact_rate_params dataset. who_attractant proportional change attractants present simulated conditions (optional). Default set 1","code":""},{"path":"/reference/calc_contact_rate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"returns number numeric vector nsamples > 1","code":""},{"path":"/reference/calc_contact_rate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contact rate calculation for wild deer — calc_contact_rate","text":"","code":"calc_contact_rate(type_contact = \"low\") #> [1] 4.250995 calc_contact_rate(sigma_season = 1, kappa = 16.37, N_w = 1000, q = 0.53, A_w = 100, type_contact = \"manual\") #> Error in calc_contact_rate(sigma_season = 1, kappa = 16.37, N_w = 1000,     q = 0.53, A_w = 100, type_contact = \"manual\"): unused argument (sigma_season = 1) calc_contact_rate(c(1,1), c(16.37, 16.37), rpois(2, 1000), c(0.53, 0.53), c(100, 100), type_contact = \"manual\") #> [1] 0 0"},{"path":"/reference/calc_sigma_aero.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"calc_sigma_aero calculate one value probability infection using defaults arguments provided. Defaults described sir_model_description document sourced literature expert elicitation.","code":""},{"path":"/reference/calc_sigma_aero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"","code":"calc_sigma_aero(   AER = NULL,   s = NULL,   lambda = NULL,   C_nu = NULL,   C_i = NULL,   IR = NULL,   ER = NULL,   V_d = NULL,   V_air = NULL,   t_contact = NULL,   r = NULL,   nsamples = NULL,   seed = NULL )"},{"path":"/reference/calc_sigma_aero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"AER air exchange rate \\(hr^{-1}\\). Default set \\(4 hr^{-1}\\) s settling rate; \\(hr^{-1}\\) Default set \\(0.24 hr^{-1}\\) lambda inactivation rates \\(hr^{-1}\\). Default set \\(0.63 hr^{-1}\\) C_nu viral load sputum; RNA copies/ml. Default samples expert elicited distribution parameter 'Viral Load' C_i conversion factor quanta/RNA copy. Default set 0.0014 IR inhalation rate; \\(m^3/hr\\).Default set 0.846 deer ER exhalation rate; \\(m^3/hr\\). Default IR = ER V_d exhaled droplet volume concentration; ml exhaled droplets/ \\(m^3\\). Default 0.009 V_air fixed volume; \\(m^3\\). Default \\(7.07m^3\\), corresponding half-sphere 1.5m radius t_contact time contact contaminated airspace (hr). r species-specific probability infection 1 quantum. Default r_deer expert elicited values. nsamples default 1, specified > 1 draw nsamples default distributions parameters seed setting seed, specify number","code":""},{"path":"/reference/calc_sigma_aero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"numeric vector length equal nsamples values sigma_aero","code":""},{"path":"/reference/calc_sigma_aero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"Mathematical background calculation. infected individual emits viral particles particular rate \\(ER_q\\) quanta/hr product arguments described : $$ER_q = C_{\\nu} \\cdot C_i   \\cdot ER \\cdot V_d$$ used model instantaneous concentration viral particles (C) well-mixed air space (quanta/\\(m^3\\)) around infected individual follows: $$C = \\frac{ER_q}{IVRR \\cdot V_{air}}$$ loss rate (IVRR) given : $$AER + s + \\lambda$$ susceptible individual enters contaminated airspace surrounding infected individual, dose (\\(Q_A\\)) product inhalation rate, concentration viral particles, time contact: $$Q_A = IR   \\cdot C \\cdot t_{contact}$$ dose \\(Q_A\\) converted probability infection using Wells-Riley infection model function dose received species-specific probability infection 1 quantum. $$\\sigma^{AERO} = 1 - e^{-rQ}$$","code":""},{"path":"/reference/calc_sigma_aero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate probability of infection via aerosol \\(\\sigma^{AERO}\\) — calc_sigma_aero","text":"","code":"calc_sigma_aero() # will return a single value using defaults #> [1] 0.004431362 calc_sigma_aero(nsamples = 10) #>  [1] 0.026320220 0.001356907 0.006438860 0.077051586 0.011450593 0.054995838 #>  [7] 0.010608434 0.019352118 0.011537737 0.050243955"},{"path":"/reference/calc_sigma_dc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate probability of infection given physical contact \\(\\sigma^{DC}\\) — calc_sigma_dc","title":"Calculate probability of infection given physical contact \\(\\sigma^{DC}\\) — calc_sigma_dc","text":"calc_sigma_dc calculate one value probability infection using defaults arguments provided. Defaults described sir_model_description document sourced literature expert elicitation.","code":""},{"path":"/reference/calc_sigma_dc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate probability of infection given physical contact \\(\\sigma^{DC}\\) — calc_sigma_dc","text":"","code":"calc_sigma_dc(   V_DC = NULL,   C_nu = NULL,   pfu_conv = NULL,   k = NULL,   nsamples = NULL,   seed = NULL )"},{"path":"/reference/calc_sigma_dc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate probability of infection given physical contact \\(\\sigma^{DC}\\) — calc_sigma_dc","text":"V_DC Transferred volume (ml). Default 0.1 C_nu viral load sputum; RNA copies/ml. Default samples expert elicited distribution parameter 'Viral Load'. Concentration infectious particles sputum (gc per ml) pfu_conv conversion value (PFU per GC). Set 1/10^5.2 k set 410 default nsamples number samples wanted. Default set 1 seed sets seed random draws parameter default distributions.","code":""},{"path":"/reference/calc_sigma_dc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate probability of infection given physical contact \\(\\sigma^{DC}\\) — calc_sigma_dc","text":"returns number vector probability values probability infection via direct contact.","code":""},{"path":"/reference/calc_sigma_dc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate probability of infection given physical contact \\(\\sigma^{DC}\\) — calc_sigma_dc","text":"Mathematical background calculate infection probability given physical contact. use Wells-Riley dose response model estimates infection probability log-logistic function dose (\\(d^{dc}\\); plaque-forming units, PFU) dose-response function (\\(k\\); Watanabe et al. 2010). dose received product typical volume sputum transferred given contact (\\(V^{DC}\\)) concentration SARS-CoV-2 sputum (\\(C_{\\nu}\\)). initially assume contact \\(100\\mu l\\) sputum transferred individuals making contact. $$\\sigma^{DC} = 1 - e^{-(d^{DC}/k)}$$ $$d^{DC} = V^{DC} \\cdot C_{\\nu} \\cdot pfuConv$$","code":""},{"path":"/reference/calc_sigma_dc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate probability of infection given physical contact \\(\\sigma^{DC}\\) — calc_sigma_dc","text":"","code":"calc_sigma_dc() # will run the defaults #> [1] 0.0007134571 calc_sigma_dc(nsamples = 10) # use defaults with a random draw for values of C_nu from expert elicitation #>  [1] 0.0007543533 0.0005366258 0.0006794774 0.0009067434 0.0007146434 #>  [6] 0.0004525384 0.0006618033 0.0004796926 0.0012779930 0.0006934002"},{"path":"/reference/contact_rate_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Contact rate parameters — contact_rate_params","title":"Contact rate parameters — contact_rate_params","text":"Modeling relationship density contact rates wild deer populations. Habib et al. (2011) used radio-collared deer eastern Alberta , part, estimate contact rates deer group deer different groups. results unique calculate per capita contact rate terms deer contacted/individual/time. differs many approaches, just look raw probability two collared individuals place time. Habib et al. (2011) estimated home ranges, contact rates, resource selection functions across variable densities habitat conditions (areas 12%, 26%, 53%, 67% wooded habitat). simulated individual white-tailed deer movements based observed data estimate total number individuals contact, sum contact rates within group different groups. estimated likely parameters per-capita contact rate.","code":""},{"path":"/reference/contact_rate_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contact rate parameters — contact_rate_params","text":"","code":"contact_rate_params"},{"path":"/reference/contact_rate_params.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Contact rate parameters — contact_rate_params","text":"contact_rate_params","code":""},{"path":"/reference/contact_rate_params.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Contact rate parameters — contact_rate_params","text":"https://doi.org/10.1016/j.ecolmodel.2011.05.007","code":""},{"path":"/reference/cross_sector_results.html","id":null,"dir":"Reference","previous_headings":"","what":"cross_sector_results — cross_sector_results","title":"cross_sector_results — cross_sector_results","text":"dataframe containing results used compare cumulative influences top performing alternative action OneHealth sectors (public health, agriculture, wildlife sectors) prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations. 200 iterations (run_id) run captive wild populations white-tailed deer, separated single fenceline allows proximity direct contact captive wild deer (Complex), alternative identified public health, agriculture, wildlife (Alternative) greatest reduction prevalence, persistence, cumulative infections. Complexes include captive deer outdoor ranch facilities wild deer rural areas (Outdoor ranch rural deer), captive deer outdoor ranch facilities wild deer suburban areas (Outdoor ranch suburban deer), captive deer intensive facilities wild deer rural areas (Intensive facility rural deer), captive deer intensive facilities wild deer suburban areas (Intensive facility suburban deer). Cross-sector collaboration vaccinate boost captive deer (agriculture sector), require personal protective equipment humans interacting deer wild captive settings (public health sector), eliminate baiting practices legislation, enforcement, education (wildlife sector). Wild captive prevalence (meanWild meanCaptive, respectively) reported percent population infected, averaged simulated 120-day projection (run_id), particular alternative applied particular context. Cumulative infections reports total proportion wild captive populations infected course 120-fall projection (cumulativeWild cumulativeCaptive, respectively), can exceed 1, indicating individuals infected least fall season, particular alternative applied particular context. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium wild captive deer (persistWild persistCaptive, respectively), particular alternative applied particular context.","code":""},{"path":"/reference/cross_sector_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cross_sector_results — cross_sector_results","text":"","code":"cross_sector_results"},{"path":"/reference/cross_sector_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"cross_sector_results — cross_sector_results","text":"cross_sector_results","code":""},{"path":"/reference/cross_sector_results.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"cross_sector_results — cross_sector_results","text":"Derived Management_Alternatives_Systems.Rmd, compared single alternative impacts stored alternatives_across_systems.rda","code":""},{"path":"/reference/draw_elicitation_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Random draw of parameters from expert elicitation — draw_elicitation_samples","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"Random draw parameters expert elicitation","code":""},{"path":"/reference/draw_elicitation_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"","code":"draw_elicitation_samples(   elicitation_data = NULL,   nsamples = NULL,   seed = NULL,   return_df = FALSE )"},{"path":"/reference/draw_elicitation_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"elicitation_data defaults package data expert elicitation. requires dataframe columns parameter name, mu, sd, distribution family. function written around elicitation_data dataset provided package. nsamples number samples draw. none set, defaults 1. seed specified, seed set. left NULL seed set. return_df TRUE object returned data frame. FALSE return list column","code":""},{"path":"/reference/draw_elicitation_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"returns tibble list column samples drawn unless otherwise specified return_df argument.","code":""},{"path":"/reference/draw_elicitation_samples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random draw of parameters from expert elicitation — draw_elicitation_samples","text":"","code":"draw_elicitation_samples() # this will return the default elicitation_data with an additional column for a random sample of 1 for each parameter. #> # A tibble: 15 × 5 #>    parameter                                             mu    sd family my_sa…¹ #>    <chr>                                              <dbl> <dbl> <chr>  <list>  #>  1 Temporary Immunity                                4.72   0.626 log-n… <dbl>   #>  2 Wastewater Infections                            -1.35   1.49  log-n… <dbl>   #>  3 Fomite Infections                                -0.0414 1.03  log-n… <dbl>   #>  4 Viral Load                                        0.216  0.344 log-n… <dbl>   #>  5 Dose-Response                                     0.277  0.272 log-n… <dbl>   #>  6 Deer Proximity Duration (minutes)                 1.55   1.27  log-n… <dbl>   #>  7 Direct Contact Probability                       -1.46   0.708 logit… <dbl>   #>  8 Proximity rate with baiting (17 events without …  3.47   0.226 log-n… <dbl>   #>  9 Deer-Human Proximity Rate, Rural (per 120 days)  -1.59   1.70  log-n… <dbl>   #> 10 Deer-Human Proximity Duration, Rural (minutes)   -0.355  0.979 log-n… <dbl>   #> 11 Deer-Human Proximity Rate, Suburban (per 120 da…  0.573  0.951 log-n… <dbl>   #> 12 Deer-Human Proximity Duration, Suburban (minute…  0.432  0.929 log-n… <dbl>   #> 13 Deer-Human Proximity Rate, Captive (per 120 day…  2.52   1.13  log-n… <dbl>   #> 14 Deer-Human Proximity Duration, Captive (minutes)  1.79   1.15  log-n… <dbl>   #> 15 Deer-Deer Proximity Rate, Captive (per day)       3.47   0.913 log-n… <dbl>   #> # … with abbreviated variable name ¹​my_sample draw_elicitation_samples(return_df = TRUE) # will return the same as above but expanded as a dataframe instead of a tibble with a list column #> # A tibble: 15 × 5 #>    parameter                                             mu    sd family my_sa…¹ #>    <chr>                                              <dbl> <dbl> <chr>    <dbl> #>  1 Temporary Immunity                                4.72   0.626 log-n… 2.69e+2 #>  2 Wastewater Infections                            -1.35   1.49  log-n… 2.24e-2 #>  3 Fomite Infections                                -0.0414 1.03  log-n… 1.78e-1 #>  4 Viral Load                                        0.216  0.344 log-n… 9.32e-1 #>  5 Dose-Response                                     0.277  0.272 log-n… 1.05e+0 #>  6 Deer Proximity Duration (minutes)                 1.55   1.27  log-n… 1.18e+2 #>  7 Direct Contact Probability                       -1.46   0.708 logit… 1.72e-1 #>  8 Proximity rate with baiting (17 events without …  3.47   0.226 log-n… 2.80e+1 #>  9 Deer-Human Proximity Rate, Rural (per 120 days)  -1.59   1.70  log-n… 1.01e-1 #> 10 Deer-Human Proximity Duration, Rural (minutes)   -0.355  0.979 log-n… 2.00e+0 #> 11 Deer-Human Proximity Rate, Suburban (per 120 da…  0.573  0.951 log-n… 5.86e+0 #> 12 Deer-Human Proximity Duration, Suburban (minute…  0.432  0.929 log-n… 3.61e+0 #> 13 Deer-Human Proximity Rate, Captive (per 120 day…  2.52   1.13  log-n… 3.38e+1 #> 14 Deer-Human Proximity Duration, Captive (minutes)  1.79   1.15  log-n… 1.23e+1 #> 15 Deer-Deer Proximity Rate, Captive (per day)       3.47   0.913 log-n… 1.31e+1 #> # … with abbreviated variable name ¹​my_sample"},{"path":"/reference/elicitation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"elicitation_data — elicitation_data","title":"elicitation_data — elicitation_data","text":"Group averaged (using quantile averaging) parameter estimates parameters derived using expert elicitation. Parameters include 1) Days recovered individual can reinfected SARS-CoV-2 (Parameter = Temporary Immunity; units = days), 2) Number individuals infected via wastewater every 100 individuals infected via direct transmission (Parameter = Wastewater Infections; units = individuals), 3) Number individuals infected via formites every 100 individuals infected via direct transmission (Parameter = Fomite Infections; units = individuals), 4) Ratio deer sputum viral load : humansputum viral load (Parameter = Viral Load; units = multiplicative ratio), 5) Dose-response value quantum dosage using Wells-Riley dose response model (Parameter = Dose-Response; units = r value). 6) deer-deer contact duration (minutes), 7) deer-deer direct contact probability, 8) deer-deer proximity rate baiting (per day; 17 events per day without baiting), 9) deer-human proximity rate, rural (per 120 days), 10) deer-human proximity duration, rural (minutes), 11) deer-human proximity rate, suburban (per 120 days), 12) deer-human proximity duration, suburban (minutes), 13) deer-human proximity rate, captive (per 120 days), 14) deer-human proximity duration, captive (minutes), 15) deer-deer proximity rate captivity (per day).","code":""},{"path":"/reference/elicitation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"elicitation_data — elicitation_data","text":"","code":"elicitation_data"},{"path":[]},{"path":"/reference/elicitation_data.html","id":"elicitation-data","dir":"Reference","previous_headings":"","what":"elicitation_data","title":"elicitation_data — elicitation_data","text":"data frame 4 columns 15 rows, row corresponding elicited parameter: parameter Parameter elicited mu mean value sd standard deviation family distribution family parameters given","code":""},{"path":"/reference/elicitation_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"elicitation_data — elicitation_data","text":"Contact: Elias Rosenblatt erosenbl@uvm.edu","code":""},{"path":"/reference/get_EE_param_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"get_EE_param_vals: Prepare random draws inputs SIRS ODE equations.","code":""},{"path":"/reference/get_EE_param_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"","code":"get_EE_param_vals(data, my_param)"},{"path":"/reference/get_EE_param_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"data Dataset containing random draws parameters estimate expert elicitation. my_param Character string parameters estimated expert elicitation.","code":""},{"path":"/reference/get_EE_param_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"vector random samples error distributions estimated expert elicitation, length determined number iterations run simulation (nsamples argument, draw_elicitation_samples.R).","code":""},{"path":"/reference/get_EE_param_vals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"function requires draw_elicitation_samples() run prior. output draw_elicitation_samples input argument function (my_param).  Options parameters include: \"Temporary Immunity\", \"Wastewater Infections\",\"Fomite Infections\",\"Viral Load\",\"Dose-Response\", \"Deer Proximity Duration (minutes)\", \"Direct Contact Probability\", \"Proximity rate baiting (17 events without baiting)\", \"Deer-Human Proximity Rate, Rural (per 120 days)\", \"Deer-Human Proximity Duration, Rural (minutes)\", \"Deer-Human Proximity Rate, Suburban (per 120 days)\", \"Deer-Human Proximity Duration, Suburban (minutes)\", \"Deer-Human Proximity Rate, Captive (per 120 days)\", \"Deer-Human Proximity Duration, Captive (minutes)\", \"Deer-Deer Proximity Rate, Captive (per day)\". one parameter may retrieved get_EE_param_vals() call.","code":""},{"path":[]},{"path":"/reference/get_EE_param_vals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"get_EE_param_vals: Prepare random draws for inputs in the SIRS ODE equations. — get_EE_param_vals","text":"","code":"draw_elicitation_samples(nsamples = 50) #> # A tibble: 15 × 5 #>    parameter                                             mu    sd family my_sa…¹ #>    <chr>                                              <dbl> <dbl> <chr>  <list>  #>  1 Temporary Immunity                                4.72   0.626 log-n… <dbl>   #>  2 Wastewater Infections                            -1.35   1.49  log-n… <dbl>   #>  3 Fomite Infections                                -0.0414 1.03  log-n… <dbl>   #>  4 Viral Load                                        0.216  0.344 log-n… <dbl>   #>  5 Dose-Response                                     0.277  0.272 log-n… <dbl>   #>  6 Deer Proximity Duration (minutes)                 1.55   1.27  log-n… <dbl>   #>  7 Direct Contact Probability                       -1.46   0.708 logit… <dbl>   #>  8 Proximity rate with baiting (17 events without …  3.47   0.226 log-n… <dbl>   #>  9 Deer-Human Proximity Rate, Rural (per 120 days)  -1.59   1.70  log-n… <dbl>   #> 10 Deer-Human Proximity Duration, Rural (minutes)   -0.355  0.979 log-n… <dbl>   #> 11 Deer-Human Proximity Rate, Suburban (per 120 da…  0.573  0.951 log-n… <dbl>   #> 12 Deer-Human Proximity Duration, Suburban (minute…  0.432  0.929 log-n… <dbl>   #> 13 Deer-Human Proximity Rate, Captive (per 120 day…  2.52   1.13  log-n… <dbl>   #> 14 Deer-Human Proximity Duration, Captive (minutes)  1.79   1.15  log-n… <dbl>   #> 15 Deer-Deer Proximity Rate, Captive (per day)       3.47   0.913 log-n… <dbl>   #> # … with abbreviated variable name ¹​my_sample get_EE_param_vals(my_param = \"Temporary Immunity\") #> Error in data %>% filter(parameter == my_param) %>% unnest(cols = c(my_sample)) %>%     pull(my_sample): could not find function \"%>%\""},{"path":"/reference/initial_compartments.html","id":null,"dir":"Reference","previous_headings":"","what":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"Define starting compartment sizes SIRS ODE Solver","code":""},{"path":"/reference/initial_compartments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"","code":"initial_compartments(   S_wild_prop = 1,   I_wild_prop = 0,   R_wild_prop = 0,   S_captive_prop = 1,   I_captive_prop = 0,   R_captive_prop = 0,   draws = NULL,   steady = FALSE )"},{"path":"/reference/initial_compartments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"S_wild_prop Size susceptible compartment wild population (proportion) I_wild_prop Size infectious compartment wild population (proportion) R_wild_prop Size recovered compartment wild population (proportion) S_captive_prop Size susceptible compartment captive population (proportion) I_captive_prop Size infectious compartment captive population (proportion) R_captive_prop Size recovered compartment captive population (proportion) draws $Number iterations simulation I_wild_cumulative Cumulative infected wild segment, starting always 0 I_captive_cumulative Cumulative infected captive segment, starting always 0","code":""},{"path":"/reference/initial_compartments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"List six vectors, repeating starting conditions specified user. Length vectors determined draws argument.","code":""},{"path":"/reference/initial_compartments.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"Provides vector compartment sizes wild captive populations. function pairs wild captive deer populations transmission populations can occur. Values (except draws parameter) must proportions, must sum one population.","code":""},{"path":"/reference/initial_compartments.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Define starting compartment sizes for SIRS ODE Solver — initial_compartments","text":"","code":"initial_compartments(S_wild_prop = 0, draws = 5) #Starting conditions for a simulation focused only on captive deer #> $S_wild #> [1] 0 0 0 0 0 #>  #> $I_wild #> [1] 0 0 0 0 0 #>  #> $R_wild #> [1] 0 0 0 0 0 #>  #> $I_wild_cumulative #> [1] 0 0 0 0 0 #>  #> $S_captive #> [1] 1 1 1 1 1 #>  #> $I_captive #> [1] 0 0 0 0 0 #>  #> $R_captive #> [1] 0 0 0 0 0 #>  #> $I_captive_cumulative #> [1] 0 0 0 0 0 #>  initial_compartments(draws = 5) #Starting conditions for a simulation of introduction and spread in both wild and captive deer. #> $S_wild #> [1] 1 1 1 1 1 #>  #> $I_wild #> [1] 0 0 0 0 0 #>  #> $R_wild #> [1] 0 0 0 0 0 #>  #> $I_wild_cumulative #> [1] 0 0 0 0 0 #>  #> $S_captive #> [1] 1 1 1 1 1 #>  #> $I_captive #> [1] 0 0 0 0 0 #>  #> $R_captive #> [1] 0 0 0 0 0 #>  #> $I_captive_cumulative #> [1] 0 0 0 0 0 #>"},{"path":"/reference/initial_infection_results_1_in_1000.html","id":null,"dir":"Reference","previous_headings":"","what":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","title":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","text":"dataframe containing results used compare degrees introduction, spread, prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations initial infection 1 1000 deer day 0. results include continuous human introduction 120-day fall simulation, thus represent risk single introductions spawn persisting infections white-tailed deer. 200 iterations (run_id) run scenario (Context). Scenarios included captive deer outdoor ranch facilities, captive deer intensive facilities, wild deer rural areas, wild deer suburban areas. Setting indicates whether deer captive wild. r0, basic reproductive number, indicates number secondary infections caused single infectious deer course infection. Prevalence percent population infected, averaged simulated 120-day projection. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium. Cumulative infections reports total proportion population infected course 120-fall projection, can exceed 1, indicating individuals infected least fall season.","code":""},{"path":"/reference/initial_infection_results_1_in_1000.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","text":"","code":"initial_infection_results_1_in_1000"},{"path":"/reference/initial_infection_results_1_in_1000.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","text":"initial_infection_results_1_in_1000","code":""},{"path":"/reference/initial_infection_results_1_in_1000.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"initial_infection_results_1_in_1000 — initial_infection_results_1_in_1000","text":"Derived SIRS_analysis_by_contexts_initialspill.Rmd, compared continual introduction results SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/initial_infection_results_1_in_1bil.html","id":null,"dir":"Reference","previous_headings":"","what":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","title":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","text":"dataframe containing results used compare degrees introduction, spread, prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations initial infection 1 1 billion deer day 0. results include continuous human introduction 120-day fall simulation, thus represent risk single introductions spawn persisting infections white-tailed deer. 200 iterations (run_id) run scenario (Context). Scenarios included captive deer outdoor ranch facilities, captive deer intensive facilities, wild deer rural areas, wild deer suburban areas. Setting indicates whether deer captive wild. r0, basic reproductive number, indicates number secondary infections caused single infectious deer course infection. Prevalence percent population infected, averaged simulated 120-day projection. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium. Cumulative infections reports total proportion population infected course 120-fall projection, can exceed 1, indicating individuals infected least fall season.","code":""},{"path":"/reference/initial_infection_results_1_in_1bil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","text":"","code":"initial_infection_results_1_in_1bil"},{"path":"/reference/initial_infection_results_1_in_1bil.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","text":"initial_infection_results_1_in_1bil","code":""},{"path":"/reference/initial_infection_results_1_in_1bil.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"initial_infection_results_1_in_1bil — initial_infection_results_1_in_1bil","text":"Derived SIRS_analysis_by_contexts_initialspill.Rmd, compared continual introduction results SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/initial_infection_results_1_in_1mil.html","id":null,"dir":"Reference","previous_headings":"","what":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","title":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","text":"dataframe containing results used compare degrees introduction, spread, prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations initial infection 1 1 million deer day 0. results include continuous human introduction 120-day fall simulation, thus represent risk single introductions spawn persisting infections white-tailed deer. 200 iterations (run_id) run scenario (Context). Scenarios included captive deer outdoor ranch facilities, captive deer intensive facilities, wild deer rural areas, wild deer suburban areas. Setting indicates whether deer captive wild. r0, basic reproductive number, indicates number secondary infections caused single infectious deer course infection. Prevalence percent population infected, averaged simulated 120-day projection. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium. Cumulative infections reports total proportion population infected course 120-fall projection, can exceed 1, indicating individuals infected least fall season.","code":""},{"path":"/reference/initial_infection_results_1_in_1mil.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","text":"","code":"initial_infection_results_1_in_1mil"},{"path":"/reference/initial_infection_results_1_in_1mil.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","text":"initial_infection_results_1_in_1mil","code":""},{"path":"/reference/initial_infection_results_1_in_1mil.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"initial_infection_results_1_in_1mil — initial_infection_results_1_in_1mil","text":"Derived SIRS_analysis_by_contexts_initialspill.Rmd, compared continual introduction results SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/run.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ODE Solver for SIRS model — run","title":"Run ODE Solver for SIRS model — run","text":"Run ODE Solver SIRS model","code":""},{"path":"/reference/run.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ODE Solver for SIRS model — run","text":"","code":"run(   iter = NULL,   initial_compartments = NULL,   initial_compartments_steady = NULL,   params = NULL,   times = NULL,   name = NULL )"},{"path":"/reference/run.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run ODE Solver for SIRS model — run","text":"iter Number iterations, often referred 'nsamples' package examples initial_compartments Initial compartment sizes, including  (proportions, stored list) initial_compartments_steady Initial compartment sizes steady state calculation (proportions, stored list) times Length projection (days) name Name context simulated parameters SIRS parameters, stored list","code":""},{"path":"/reference/run.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ODE Solver for SIRS model — run","text":"#List containing iteration details, including initial compartment sizes ODE solver steady state calculation, parameters, context name, daily, proportional sizes SIRS compartment cumulative infections 120 day projection, whether SARS-CoV-2 persists equilibrium.","code":""},{"path":"/reference/run.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run ODE Solver for SIRS model — run","text":"","code":"nsamples = 10  example_inits <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, I_wild_cumulative = 0,                    S_captive = 1, I_captive = 0,                    R_captive = 0, I_captive_cumulative = 0)  example_inits_steady <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, S_captive = 1,                    I_captive = 0, R_captive = 0)  # set the time to run example_times <-  seq(0, 365, by = 1) # Set parameters of transmission, immunity, recovery  example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     gamma_recov = 0.01,                     I_human = 0.05,                     boost = 0)  run(iter = nsamples, initial_compartments = example_inits, initial_compartments_steady = example_inits_steady, params = example_params, times = example_times, name = Test) #> Error in run(iter = nsamples, initial_compartments = example_inits, initial_compartments_steady = example_inits_steady,     params = example_params, times = example_times, name = Test): object 'Test' not found"},{"path":"/reference/scenario_projections.html","id":null,"dir":"Reference","previous_headings":"","what":"scenario_projections — scenario_projections","title":"scenario_projections — scenario_projections","text":"tibble containing projected SIR compartment sizes every simulation run. Columns tibble include scenario (Context), scenario run (run_id), list containing daily (time) compartment sizes wild captive SIR compartments (S_wild, I_wild, R_wild, & S_captive, I_captive, R_captive) cumulative infections (I_wild_cumulative I_captive_cumulative).","code":""},{"path":"/reference/scenario_projections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scenario_projections — scenario_projections","text":"","code":"scenario_projections"},{"path":"/reference/scenario_projections.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"scenario_projections — scenario_projections","text":"scenario_projections","code":""},{"path":"/reference/scenario_projections.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"scenario_projections — scenario_projections","text":"Derived using SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/scenario_results.html","id":null,"dir":"Reference","previous_headings":"","what":"scenario_results — scenario_results","title":"scenario_results — scenario_results","text":"dataframe containing results used compare degrees introduction, spread, prevalence, persistence cumulative infections SARS-CoV-2 simulated white-tailed deer populations. 200 iterations (run_id) run scenario (Context). Scenarios included captive deer outdoor ranch facilities, captive deer intensive facilities, wild deer rural areas, wild deer suburban areas. Setting indicates whether deer captive wild. r0, basic reproductive number, indicates number secondary infections caused single infectious deer course infection. FOI, Force--Infection, hazard rate deer becoming infected infectious humans, per day. Prevalence percent population infected, averaged simulated 120-day projection. Persistence logical condition indicating equilibrium determined SIRS ODE equations run_steady() rootSolve package predicts least 1 1,000 deer infected equilibrium. Cumulative infections reports total proportion population infected course 120-fall projection, can exceed 1, indicating individuals infected least fall season.","code":""},{"path":"/reference/scenario_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"scenario_results — scenario_results","text":"","code":"scenario_results"},{"path":"/reference/scenario_results.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"scenario_results — scenario_results","text":"scenario_results","code":""},{"path":"/reference/scenario_results.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"scenario_results — scenario_results","text":"Derived using SIRS_analysis_by_contexts.Rmd","code":""},{"path":"/reference/simple_sirs.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple function to generate SIRS model projections — simple_sirs","title":"Simple function to generate SIRS model projections — simple_sirs","text":"simple_sirs written work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points.","code":""},{"path":"/reference/simple_sirs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple function to generate SIRS model projections — simple_sirs","text":"","code":"simple_sirs(time, state, parameters)"},{"path":"/reference/simple_sirs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple function to generate SIRS model projections — simple_sirs","text":"time vector values generate projection (length days). state initial state compartment populations. named vector starting values S_wild, I_wild, R_wild, S_captive, I_captive, R_captive. parameters list parameters generate projection. parameters include transmission parameters, immunity recovery rates, proportion infected humans. @details Use simple_sirs calculate persistence (via rootSolve::run_steady()), along compartment sizes change projection. cumulative infections desired, use simple_sir_with_cumulative instead. parameter boost included ODE equations captive deer allow implementation applying vaccine boosters captive deer herds potential management alternative influence outbreak dynamics. See vignette Management_Alternative_Systems.Rmd see example use. cases boosters applied, boost set 0.","code":""},{"path":"/reference/simple_sirs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple function to generate SIRS model projections — simple_sirs","text":"used deSolve::ode() function, return dataframe proportion individuals SIR compartments time point.","code":""},{"path":"/reference/simple_sirs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple function to generate SIRS model projections — simple_sirs","text":"","code":"# prepare the input parameters: example_inits <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, S_captive = 1,                    I_captive = 0, R_captive = 0)  # set the time to run example_times <-  seq(0, 500, by = 1) # Set parameters of transmission, immunity, recovery  example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     gamma_recov = 0.01,                     I_human = 0.05,                     boost = 0)  # run the ode function:  deSolve::ode(y = example_inits, times = example_times, parms = example_params, func = whitetailedSIRS::simple_sirs) #>     time    S_wild       I_wild       R_wild S_captive  I_captive    R_captive #> 1      0 1.0000000 0.0000000000 0.000000e+00 1.0000000 0.00000000 0.000000e+00 #> 2      1 0.9993937 0.0006033453 2.972120e-06 0.9898960 0.01005447 4.952954e-05 #> 3      2 0.9985719 0.0014152679 1.282810e-05 0.9795861 0.02021672 1.971848e-04 #> 4      3 0.9975291 0.0024394532 3.143763e-05 0.9690747 0.03048420 4.411150e-04 #> 5      4 0.9962606 0.0036789666 6.042078e-05 0.9583659 0.04085440 7.797231e-04 #> 6      5 0.9947604 0.0051376972 1.019176e-04 0.9474655 0.05132361 1.210903e-03 #> 7      6 0.9930238 0.0068185479 1.576558e-04 0.9363788 0.06188829 1.732952e-03 #> 8      7 0.9910463 0.0087243155 2.294167e-04 0.9251115 0.07254442 2.344106e-03 #> 9      8 0.9888235 0.0108575342 3.189569e-04 0.9136698 0.08328762 3.042611e-03 #> 10     9 0.9863516 0.0132203970 4.280010e-04 0.9020602 0.09411306 3.826719e-03 #> 11    10 0.9836270 0.0158147917 5.582446e-04 0.8902898 0.10501553 4.694687e-03 #> 12    11 0.9806464 0.0186422575 7.113503e-04 0.8783658 0.11598946 5.644766e-03 #> 13    12 0.9774071 0.0217039608 8.889445e-04 0.8662959 0.12702886 6.675204e-03 #> 14    13 0.9739067 0.0250006762 1.092615e-03 0.8540884 0.13812738 7.784242e-03 #> 15    14 0.9701433 0.0285327644 1.323910e-03 0.8417516 0.14927827 8.970104e-03 #> 16    15 0.9661155 0.0323001547 1.584329e-03 0.8292946 0.16047443 1.023100e-02 #> 17    16 0.9618223 0.0363023277 1.875330e-03 0.8167265 0.17170841 1.156513e-02 #> 18    17 0.9572634 0.0405382982 2.198316e-03 0.8040569 0.18297243 1.297065e-02 #> 19    18 0.9524388 0.0450066010 2.554638e-03 0.7912959 0.19425837 1.444571e-02 #> 20    19 0.9473491 0.0497052787 2.945591e-03 0.7784537 0.20555783 1.598844e-02 #> 21    20 0.9419957 0.0546318712 3.372409e-03 0.7655410 0.21686212 1.759692e-02 #> 22    21 0.9363803 0.0597834082 3.836263e-03 0.7525685 0.22816231 1.926922e-02 #> 23    22 0.9305053 0.0651564035 4.338258e-03 0.7395474 0.23944927 2.100335e-02 #> 24    23 0.9243737 0.0707468522 4.879429e-03 0.7264890 0.25071363 2.279733e-02 #> 25    24 0.9179890 0.0765502310 5.460738e-03 0.7134050 0.26194590 2.464910e-02 #> 26    25 0.9113554 0.0825615008 6.083072e-03 0.7003070 0.27313645 2.655660e-02 #> 27    26 0.9044776 0.0887751127 6.747240e-03 0.6872067 0.28427555 2.851773e-02 #> 28    27 0.8973610 0.0951850166 7.453969e-03 0.6741162 0.29535344 3.053033e-02 #> 29    28 0.8900114 0.1017846729 8.203903e-03 0.6610474 0.30636033 3.259225e-02 #> 30    29 0.8824353 0.1085670677 8.997600e-03 0.6480123 0.31728644 3.470126e-02 #> 31    30 0.8746397 0.1155247296 9.835530e-03 0.6350228 0.32812207 3.685515e-02 #> 32    31 0.8666322 0.1226497512 1.071807e-02 0.6220908 0.33885761 3.905164e-02 #> 33    32 0.8584207 0.1299338118 1.164552e-02 0.6092280 0.34948358 4.128843e-02 #> 34    33 0.8500137 0.1373682032 1.261807e-02 0.5964461 0.35999071 4.356323e-02 #> 35    34 0.8414203 0.1449438585 1.363582e-02 0.5837564 0.37036992 4.587367e-02 #> 36    35 0.8326498 0.1526513823 1.469878e-02 0.5711702 0.38061237 4.821741e-02 #> 37    36 0.8237120 0.1604810834 1.580688e-02 0.5586984 0.39070954 5.059208e-02 #> 38    37 0.8146171 0.1684230094 1.695992e-02 0.5463515 0.40065322 5.299528e-02 #> 39    38 0.8053754 0.1764669821 1.815764e-02 0.5341398 0.41043553 5.542463e-02 #> 40    39 0.7959977 0.1846026354 1.939966e-02 0.5220733 0.42004899 5.787772e-02 #> 41    40 0.7864950 0.1928194528 2.068554e-02 0.5101613 0.42948655 6.035215e-02 #> 42    41 0.7768785 0.2011068067 2.201472e-02 0.4984129 0.43874156 6.284552e-02 #> 43    42 0.7671594 0.2094539972 2.338657e-02 0.4868367 0.44780783 6.535545e-02 #> 44    43 0.7573494 0.2178502916 2.480035e-02 0.4754408 0.45667967 6.787956e-02 #> 45    44 0.7474598 0.2262849633 2.625527e-02 0.4642327 0.46535184 7.041549e-02 #> 46    45 0.7375022 0.2347473302 2.775042e-02 0.4532195 0.47381964 7.296089e-02 #> 47    46 0.7274884 0.2432267924 2.928485e-02 0.4424077 0.48207886 7.551346e-02 #> 48    47 0.7174296 0.2517128691 3.085751e-02 0.4318033 0.49012582 7.807090e-02 #> 49    48 0.7073375 0.2601952334 3.246728e-02 0.4214117 0.49795734 8.063098e-02 #> 50    49 0.6972233 0.2686637464 3.411297e-02 0.4112378 0.50557078 8.319146e-02 #> 51    50 0.6870982 0.2771084887 3.579335e-02 0.4012858 0.51296403 8.575019e-02 #> 52    51 0.6769731 0.2855197912 3.750709e-02 0.3915595 0.52013547 8.830503e-02 #> 53    52 0.6668589 0.2938882623 3.925285e-02 0.3820621 0.52708398 9.085391e-02 #> 54    53 0.6567660 0.3022048140 4.102921e-02 0.3727962 0.53380898 9.339481e-02 #> 55    54 0.6467046 0.3104606848 4.283470e-02 0.3637639 0.54031032 9.592576e-02 #> 56    55 0.6366847 0.3186474614 4.466783e-02 0.3549668 0.54658834 9.844485e-02 #> 57    56 0.6267158 0.3267570966 4.652706e-02 0.3464059 0.55264384 1.009502e-01 #> 58    57 0.6168073 0.3347819252 4.841082e-02 0.3380818 0.55847803 1.034401e-01 #> 59    58 0.6069678 0.3427146779 5.031752e-02 0.3299946 0.56409255 1.059128e-01 #> 60    59 0.5972060 0.3505484922 5.224552e-02 0.3221439 0.56948942 1.083667e-01 #> 61    60 0.5875299 0.3582769207 5.419321e-02 0.3145289 0.57467103 1.108001e-01 #> 62    61 0.5779471 0.3658939373 5.615892e-02 0.3071483 0.57964012 1.132116e-01 #> 63    62 0.5684651 0.3733939416 5.814100e-02 0.3000005 0.58439974 1.155997e-01 #> 64    63 0.5590905 0.3807717599 6.013778e-02 0.2930836 0.58895325 1.179632e-01 #> 65    64 0.5498297 0.3880226453 6.214761e-02 0.2863951 0.59330427 1.203006e-01 #> 66    65 0.5406889 0.3951422751 6.416883e-02 0.2799325 0.59745667 1.226108e-01 #> 67    66 0.5316735 0.4021267465 6.619978e-02 0.2736927 0.60141456 1.248927e-01 #> 68    67 0.5227886 0.4089725708 6.823883e-02 0.2676726 0.60518223 1.271452e-01 #> 69    68 0.5140390 0.4156766659 7.028436e-02 0.2618685 0.60876416 1.293673e-01 #> 70    69 0.5054289 0.4222363471 7.233477e-02 0.2562769 0.61216496 1.315582e-01 #> 71    70 0.4969622 0.4286493172 7.438848e-02 0.2508937 0.61538940 1.337169e-01 #> 72    71 0.4886424 0.4349136551 7.644394e-02 0.2457150 0.61844234 1.358427e-01 #> 73    72 0.4804726 0.4410278030 7.849962e-02 0.2407363 0.62132874 1.379349e-01 #> 74    73 0.4724554 0.4469905538 8.055403e-02 0.2359534 0.62405362 1.399930e-01 #> 75    74 0.4645933 0.4528010368 8.260571e-02 0.2313617 0.62662205 1.420163e-01 #> 76    75 0.4568881 0.4584587030 8.465324e-02 0.2269566 0.62903913 1.440043e-01 #> 77    76 0.4493415 0.4639633108 8.669523e-02 0.2227334 0.63130998 1.459567e-01 #> 78    77 0.4419547 0.4693149099 8.873035e-02 0.2186873 0.63343973 1.478730e-01 #> 79    78 0.4347289 0.4745138262 9.075728e-02 0.2148135 0.63543347 1.497530e-01 #> 80    79 0.4276646 0.4795606459 9.277477e-02 0.2111073 0.63729628 1.515964e-01 #> 81    80 0.4207622 0.4844562000 9.478161e-02 0.2075637 0.63903319 1.534031e-01 #> 82    81 0.4140218 0.4892015482 9.677662e-02 0.2041780 0.64064917 1.551728e-01 #> 83    82 0.4074434 0.4937979639 9.875868e-02 0.2009452 0.64214914 1.569057e-01 #> 84    83 0.4010264 0.4982469185 1.007267e-01 0.1978606 0.64353795 1.586015e-01 #> 85    84 0.3947703 0.5025500663 1.026797e-01 0.1949193 0.64482035 1.602604e-01 #> 86    85 0.3886742 0.5067092301 1.046166e-01 0.1921167 0.64600102 1.618823e-01 #> 87    86 0.3827371 0.5107263866 1.065366e-01 0.1894480 0.64708452 1.634675e-01 #> 88    87 0.3769577 0.5146036523 1.084387e-01 0.1869087 0.64807534 1.650160e-01 #> 89    88 0.3713347 0.5183432703 1.103220e-01 0.1844941 0.64897783 1.665281e-01 #> 90    89 0.3658665 0.5219475973 1.121859e-01 0.1821998 0.64979627 1.680040e-01 #> 91    90 0.3605513 0.5254190909 1.140296e-01 0.1800213 0.65053478 1.694439e-01 #> 92    91 0.3553874 0.5287602977 1.158523e-01 0.1779545 0.65119739 1.708481e-01 #> 93    92 0.3503727 0.5319738418 1.176535e-01 0.1759949 0.65178802 1.722170e-01 #> 94    93 0.3455052 0.5350624143 1.194324e-01 0.1741386 0.65231045 1.735510e-01 #> 95    94 0.3407827 0.5380287623 1.211886e-01 0.1723813 0.65276833 1.748503e-01 #> 96    95 0.3362028 0.5408756796 1.229215e-01 0.1707193 0.65316522 1.761155e-01 #> 97    96 0.3317633 0.5436059976 1.246307e-01 0.1691486 0.65350452 1.773468e-01 #> 98    97 0.3274618 0.5462225761 1.263156e-01 0.1676655 0.65378955 1.785449e-01 #> 99    98 0.3232957 0.5487282953 1.279760e-01 0.1662664 0.65402347 1.797101e-01 #> 100   99 0.3192624 0.5511260487 1.296115e-01 0.1649477 0.65420934 1.808429e-01 #> 101  100 0.3153595 0.5534187353 1.312218e-01 0.1637060 0.65435010 1.819439e-01 #> 102  101 0.3115842 0.5556092533 1.328065e-01 0.1625380 0.65444856 1.830135e-01 #> 103  102 0.3079340 0.5577004941 1.343655e-01 0.1614403 0.65450743 1.840522e-01 #> 104  103 0.3044061 0.5596953363 1.358985e-01 0.1604100 0.65452931 1.850607e-01 #> 105  104 0.3009979 0.5615966410 1.374054e-01 0.1594440 0.65451667 1.860394e-01 #> 106  105 0.2977067 0.5634072464 1.388861e-01 0.1585393 0.65447188 1.869888e-01 #> 107  106 0.2945296 0.5651299640 1.403404e-01 0.1576931 0.65439721 1.879096e-01 #> 108  107 0.2914642 0.5667675744 1.417683e-01 0.1569028 0.65429483 1.888024e-01 #> 109  108 0.2885075 0.5683228237 1.431696e-01 0.1561656 0.65416678 1.896676e-01 #> 110  109 0.2856570 0.5697984204 1.445445e-01 0.1554791 0.65401504 1.905058e-01 #> 111  110 0.2829100 0.5711970324 1.458929e-01 0.1548408 0.65384148 1.913177e-01 #> 112  111 0.2802638 0.5725212844 1.472149e-01 0.1542483 0.65364787 1.921038e-01 #> 113  112 0.2777157 0.5737737559 1.485105e-01 0.1536994 0.65343590 1.928647e-01 #> 114  113 0.2752632 0.5749569789 1.497798e-01 0.1531920 0.65320717 1.936008e-01 #> 115  114 0.2729037 0.5760734363 1.510229e-01 0.1527239 0.65296321 1.943129e-01 #> 116  115 0.2706345 0.5771255608 1.522399e-01 0.1522930 0.65270544 1.950015e-01 #> 117  116 0.2684532 0.5781157329 1.534311e-01 0.1518976 0.65243524 1.956671e-01 #> 118  117 0.2663573 0.5790462808 1.545964e-01 0.1515357 0.65215389 1.963104e-01 #> 119  118 0.2643443 0.5799194788 1.557363e-01 0.1512056 0.65186260 1.969318e-01 #> 120  119 0.2624117 0.5807375474 1.568507e-01 0.1509056 0.65156252 1.975319e-01 #> 121  120 0.2605573 0.5815026521 1.579400e-01 0.1506340 0.65125473 1.981113e-01 #> 122  121 0.2587786 0.5822169037 1.590045e-01 0.1503892 0.65094026 1.986705e-01 #> 123  122 0.2570734 0.5828823582 1.600442e-01 0.1501699 0.65062005 1.992101e-01 #> 124  123 0.2554394 0.5835010163 1.610595e-01 0.1499745 0.65029501 1.997305e-01 #> 125  124 0.2538744 0.5840748239 1.620507e-01 0.1498017 0.64996599 2.002323e-01 #> 126  125 0.2523762 0.5846056723 1.630181e-01 0.1496502 0.64963376 2.007160e-01 #> 127  126 0.2509427 0.5850953985 1.639619e-01 0.1495187 0.64929908 2.011822e-01 #> 128  127 0.2495718 0.5855457857 1.648824e-01 0.1494061 0.64896263 2.016312e-01 #> 129  128 0.2482615 0.5859585635 1.657799e-01 0.1493112 0.64862506 2.020637e-01 #> 130  129 0.2470097 0.5863354092 1.666549e-01 0.1492329 0.64828697 2.024801e-01 #> 131  130 0.2458146 0.5866779477 1.675075e-01 0.1491703 0.64794893 2.028808e-01 #> 132  131 0.2446742 0.5869877526 1.683381e-01 0.1491222 0.64761145 2.032664e-01 #> 133  132 0.2435866 0.5872663472 1.691470e-01 0.1490878 0.64727501 2.036372e-01 #> 134  133 0.2425501 0.5875152046 1.699347e-01 0.1490662 0.64694006 2.039938e-01 #> 135  134 0.2415629 0.5877357495 1.707014e-01 0.1490565 0.64660702 2.043365e-01 #> 136  135 0.2406232 0.5879293584 1.714475e-01 0.1490579 0.64627626 2.046659e-01 #> 137  136 0.2397294 0.5880973608 1.721732e-01 0.1490696 0.64594814 2.049822e-01 #> 138  137 0.2388798 0.5882410400 1.728791e-01 0.1490910 0.64562297 2.052860e-01 #> 139  138 0.2380729 0.5883616346 1.735654e-01 0.1491213 0.64530104 2.055777e-01 #> 140  139 0.2373071 0.5884603386 1.742325e-01 0.1491598 0.64498263 2.058575e-01 #> 141  140 0.2365809 0.5885383032 1.748808e-01 0.1492060 0.64466798 2.061260e-01 #> 142  141 0.2358928 0.5885966376 1.755106e-01 0.1492592 0.64435730 2.063834e-01 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 359 rows ]"},{"path":"/reference/simple_sirs_with_cumulative.html","id":null,"dir":"Reference","previous_headings":"","what":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"simple_sirs_with_cumulative written work alongside deSolve::ode() function, return object proportion individuals found SIR compartments specified time points.","code":""},{"path":"/reference/simple_sirs_with_cumulative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"","code":"simple_sirs_with_cumulative(time, state, parameters)"},{"path":"/reference/simple_sirs_with_cumulative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"time vector values generate projection (length days). state initial state compartment populations. named vector starting values S_wild, I_wild, R_wild, I_wild_cumulative, S_captive, I_captive, R_captive, I_captive_cumulative. parameters list parameters generate projection. parameters include transmission parameters, immunity recovery rates, proportion infected humans.","code":""},{"path":"/reference/simple_sirs_with_cumulative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"used deSolve::ode() function, return dataframe proportion individuals SIR compartments time point, well cumulative case count (proportion)","code":""},{"path":"/reference/simple_sirs_with_cumulative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"simple_sirs_with_cumulative() run run_steady() estimate probability persistence. Instead, use simple_sirs(), return cumulative proportion population infected. parameter boost included ODE equations captive deer allow implementation applying vaccine boosters captive deer herds potential management alternative influence outbreak dynamics. See vignette Management_Alternative_Systems.Rmd see example use. cases boosters applied, boost set 0.","code":""},{"path":"/reference/simple_sirs_with_cumulative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simple function to generate SIRS model projections — simple_sirs_with_cumulative","text":"","code":"# prepare the input parameters: example_inits <- c(S_wild = 1, I_wild = 0,                    R_wild = 0, I_wild_cumulative = 0,S_captive = 1,                    I_captive = 0, R_captive = 0, I_captive_cumulative = 0)  # set the time to run example_times <-  seq(0, 500, by = 1) # Set parameters of transmission, immunity, recovery  example_params <- c(alpha_immunity = 0.03,                     beta_aero_ww = 0.01,                     beta_aero_cw = 0.01,                     beta_aero_cc = 0.02,                     beta_aero_hw = 0.01,                     beta_aero_hc = 0.2,                     beta_dc_ww = 0.01,                     beta_dc_cw = 0.01,                     beta_dc_cc = 0.01,                     gamma_recov = 0.01,                     I_human = 0.05,                     boost = 0)  # run the ode function:  deSolve::ode(y = example_inits, times = example_times, parms = example_params, func = whitetailedSIRS::simple_sirs_with_cumulative) #>     time    S_wild       I_wild       R_wild I_wild_cumulative S_captive #> 1      0 1.0000000 0.0000000000 0.000000e+00       0.000000000 1.0000000 #> 2      1 0.9993938 0.0006032662 2.933373e-06       0.000606240 0.9898959 #> 3      2 0.9985724 0.0014149177 1.265074e-05       0.001427826 0.9795857 #> 4      3 0.9975295 0.0024391790 3.129759e-05       0.002471399 0.9690743 #> 5      4 0.9962610 0.0036787369 6.030486e-05       0.003741305 0.9583656 #> 6      5 0.9947607 0.0051374689 1.018029e-04       0.005243935 0.9474652 #> 7      6 0.9930241 0.0068183183 1.575419e-04       0.006984378 0.9363785 #> 8      7 0.9910466 0.0087240926 2.293044e-04       0.008967677 0.9251112 #> 9      8 0.9888238 0.0108573121 3.188457e-04       0.011198612 0.9136695 #> 10     9 0.9863519 0.0132201759 4.278909e-04       0.013681671 0.9020600 #> 11    10 0.9836273 0.0158145719 5.581356e-04       0.016421047 0.8902896 #> 12    11 0.9806467 0.0186420392 7.112424e-04       0.019420603 0.8783656 #> 13    12 0.9774074 0.0217037439 8.888377e-04       0.022683841 0.8662957 #> 14    13 0.9739070 0.0250004607 1.092510e-03       0.026213882 0.8540882 #> 15    14 0.9701436 0.0285325502 1.323805e-03       0.030013441 0.8417514 #> 16    15 0.9661158 0.0322999419 1.584225e-03       0.034084799 0.8292944 #> 17    16 0.9618227 0.0363021163 1.875227e-03       0.038429788 0.8167263 #> 18    17 0.9572637 0.0405380882 2.198214e-03       0.043049767 0.8040567 #> 19    18 0.9524391 0.0450063925 2.554537e-03       0.047945601 0.7912957 #> 20    19 0.9473494 0.0497050716 2.945491e-03       0.053117646 0.7784536 #> 21    20 0.9419960 0.0546316656 3.372310e-03       0.058565735 0.7655408 #> 22    21 0.9363806 0.0597832040 3.836165e-03       0.064289162 0.7525683 #> 23    22 0.9305056 0.0651562008 4.338161e-03       0.070286673 0.7395472 #> 24    23 0.9243740 0.0707466510 4.879333e-03       0.076556458 0.7264889 #> 25    24 0.9179893 0.0765500313 5.460642e-03       0.083096146 0.7134049 #> 26    25 0.9113557 0.0825613027 6.082977e-03       0.089902803 0.7003068 #> 27    26 0.9044779 0.0887749162 6.747146e-03       0.096972931 0.6872066 #> 28    27 0.8973613 0.0951848217 7.453876e-03       0.104302475 0.6741161 #> 29    28 0.8900117 0.1017844797 8.203810e-03       0.111886824 0.6610473 #> 30    29 0.8824356 0.1085668761 8.997508e-03       0.119720828 0.6480122 #> 31    30 0.8746400 0.1155245398 9.835439e-03       0.127798806 0.6350227 #> 32    31 0.8666325 0.1226495632 1.071798e-02       0.136114564 0.6220907 #> 33    32 0.8584209 0.1299336255 1.164543e-02       0.144661413 0.6092279 #> 34    33 0.8500140 0.1373680188 1.261798e-02       0.153432193 0.5964460 #> 35    34 0.8414206 0.1449436760 1.363573e-02       0.162419295 0.5837563 #> 36    35 0.8326501 0.1526512018 1.469870e-02       0.171614689 0.5711701 #> 37    36 0.8237123 0.1604809049 1.580679e-02       0.181009955 0.5586983 #> 38    37 0.8146173 0.1684228328 1.695983e-02       0.190596312 0.5463514 #> 39    38 0.8053756 0.1764668076 1.815755e-02       0.200364655 0.5341398 #> 40    39 0.7959980 0.1846024630 1.939958e-02       0.210305584 0.5220732 #> 41    40 0.7864953 0.1928192827 2.068546e-02       0.220409449 0.5101613 #> 42    41 0.7768787 0.2011066388 2.201464e-02       0.230666381 0.4984129 #> 43    42 0.7671597 0.2094538316 2.338648e-02       0.241066331 0.4868367 #> 44    43 0.7573496 0.2178501284 2.480027e-02       0.251599111 0.4754407 #> 45    44 0.7474600 0.2262848024 2.625519e-02       0.262254432 0.4642326 #> 46    45 0.7375025 0.2347471717 2.775035e-02       0.273021942 0.4532194 #> 47    46 0.7274886 0.2432266364 2.928477e-02       0.283891266 0.4424077 #> 48    47 0.7174299 0.2517127157 3.085743e-02       0.294852041 0.4318033 #> 49    48 0.7073377 0.2601950825 3.246720e-02       0.305893954 0.4214117 #> 50    49 0.6972235 0.2686635980 3.411290e-02       0.317006779 0.4112377 #> 51    50 0.6870984 0.2771083431 3.579327e-02       0.328180408 0.4012858 #> 52    51 0.6769733 0.2855196483 3.750702e-02       0.339404885 0.3915595 #> 53    52 0.6668591 0.2938881221 3.925278e-02       0.350670437 0.3820621 #> 54    53 0.6567662 0.3022046764 4.102914e-02       0.361967502 0.3727962 #> 55    54 0.6467048 0.3104605501 4.283463e-02       0.373286756 0.3637639 #> 56    55 0.6366849 0.3186473295 4.466776e-02       0.384619136 0.3549668 #> 57    56 0.6267160 0.3267569675 4.652699e-02       0.395955863 0.3464059 #> 58    57 0.6168074 0.3347817989 4.841076e-02       0.407288462 0.3380819 #> 59    58 0.6069680 0.3427145546 5.031745e-02       0.418608779 0.3299946 #> 60    59 0.5972062 0.3505483718 5.224546e-02       0.429908996 0.3221439 #> 61    60 0.5875301 0.3582768031 5.419314e-02       0.441181643 0.3145289 #> 62    61 0.5779473 0.3658938226 5.615885e-02       0.452419611 0.3071483 #> 63    62 0.5684652 0.3733938298 5.814093e-02       0.463616157 0.3000005 #> 64    63 0.5590906 0.3807716510 6.013772e-02       0.474764909 0.2930836 #> 65    64 0.5498299 0.3880225394 6.214755e-02       0.485859876 0.2863952 #> 66    65 0.5406891 0.3951421720 6.416877e-02       0.496895443 0.2799325 #> 67    66 0.5316736 0.4021266463 6.619972e-02       0.507866376 0.2736927 #> 68    67 0.5227888 0.4089724735 6.823877e-02       0.518767815 0.2676726 #> 69    68 0.5140391 0.4156765714 7.028430e-02       0.529595278 0.2618685 #> 70    69 0.5054290 0.4222362555 7.233471e-02       0.540344647 0.2562769 #> 71    70 0.4969623 0.4286492284 7.438842e-02       0.551012171 0.2508937 #> 72    71 0.4886425 0.4349135691 7.644388e-02       0.561594450 0.2457150 #> 73    72 0.4804727 0.4410277198 7.849956e-02       0.572088433 0.2407363 #> 74    73 0.4724556 0.4469904733 8.055397e-02       0.582491404 0.2359534 #> 75    74 0.4645934 0.4528009589 8.260565e-02       0.592800974 0.2313617 #> 76    75 0.4568882 0.4584586278 8.465318e-02       0.603015068 0.2269566 #> 77    76 0.4493416 0.4639632382 8.669518e-02       0.613131916 0.2227334 #> 78    77 0.4419549 0.4693148399 8.873029e-02       0.623150035 0.2186873 #> 79    78 0.4347290 0.4745137588 9.075723e-02       0.633068224 0.2148136 #> 80    79 0.4276647 0.4795605810 9.277472e-02       0.642885544 0.2111073 #> 81    80 0.4207623 0.4844561375 9.478156e-02       0.652601310 0.2075638 #> 82    81 0.4140219 0.4892014881 9.677657e-02       0.662215074 0.2041780 #> 83    82 0.4074435 0.4937979062 9.875863e-02       0.671726612 0.2009452 #> 84    83 0.4010265 0.4982468630 1.007267e-01       0.681135915 0.1978606 #> 85    84 0.3947704 0.5025500131 1.026796e-01       0.690443170 0.1949193 #> 86    85 0.3886743 0.5067091792 1.046166e-01       0.699648751 0.1921167 #> 87    86 0.3827371 0.5107263378 1.065365e-01       0.708753205 0.1894480 #> 88    87 0.3769578 0.5146036056 1.084386e-01       0.717757238 0.1869087 #> 89    88 0.3713348 0.5183432256 1.103220e-01       0.726661706 0.1844941 #> 90    89 0.3658665 0.5219475547 1.121859e-01       0.735467601 0.1821998 #> 91    90 0.3605514 0.5254190502 1.140296e-01       0.744176039 0.1800214 #> 92    91 0.3553875 0.5287602588 1.158523e-01       0.752788252 0.1779545 #> 93    92 0.3503728 0.5319738048 1.176534e-01       0.761305573 0.1759949 #> 94    93 0.3455053 0.5350623791 1.194324e-01       0.769729432 0.1741386 #> 95    94 0.3407827 0.5380287288 1.211885e-01       0.778061338 0.1723814 #> 96    95 0.3362029 0.5408756479 1.229215e-01       0.786302877 0.1707193 #> 97    96 0.3317634 0.5436059675 1.246306e-01       0.794455700 0.1691486 #> 98    97 0.3274619 0.5462225475 1.263156e-01       0.802521517 0.1676656 #> 99    98 0.3232957 0.5487282683 1.279760e-01       0.810502083 0.1662664 #> 100   99 0.3192625 0.5511260232 1.296115e-01       0.818399198 0.1649477 #> 101  100 0.3153595 0.5534187112 1.312217e-01       0.826214696 0.1637060 #> 102  101 0.3115843 0.5556092306 1.328065e-01       0.833950439 0.1625380 #> 103  102 0.3079341 0.5577004727 1.343655e-01       0.841608311 0.1614404 #> 104  103 0.3044062 0.5596953162 1.358985e-01       0.849190213 0.1604100 #> 105  104 0.3009980 0.5615966221 1.374054e-01       0.856698055 0.1594440 #> 106  105 0.2977067 0.5634072287 1.388861e-01       0.864133755 0.1585393 #> 107  106 0.2945297 0.5651299474 1.403404e-01       0.871499232 0.1576932 #> 108  107 0.2914642 0.5667675589 1.417682e-01       0.878796401 0.1569028 #> 109  108 0.2885076 0.5683228093 1.431696e-01       0.886027170 0.1561656 #> 110  109 0.2856571 0.5697984070 1.445445e-01       0.893193440 0.1554791 #> 111  110 0.2829101 0.5711970200 1.458929e-01       0.900297093 0.1548408 #>      I_captive    R_captive I_captive_cumulative #> 1   0.00000000 0.000000e+00           0.00000000 #> 2   0.01005452 4.956801e-05           0.01010477 #> 3   0.02021696 1.973599e-04           0.02041848 #> 4   0.03048440 4.412525e-04           0.03093945 #> 5   0.04085456 7.798360e-04           0.04166619 #> 6   0.05132376 1.211014e-03           0.05259620 #> 7   0.06188843 1.733061e-03           0.06372685 #> 8   0.07254456 2.344213e-03           0.07505508 #> 9   0.08328776 3.042716e-03           0.08657736 #> 10  0.09411319 3.826823e-03           0.09828973 #> 11  0.10501566 4.694789e-03           0.11018779 #> 12  0.11598958 5.644866e-03           0.12226668 #> 13  0.12702898 6.675303e-03           0.13452111 #> 14  0.13812749 7.784339e-03           0.14694536 #> 15  0.14927837 8.970199e-03           0.15953323 #> 16  0.16047453 1.023109e-02           0.17227812 #> 17  0.17170851 1.156522e-02           0.18517299 #> 18  0.18297252 1.297074e-02           0.19821038 #> 19  0.19425846 1.444580e-02           0.21138246 #> 20  0.20555791 1.598853e-02           0.22468098 #> 21  0.21686219 1.759701e-02           0.23809737 #> 22  0.22816239 1.926930e-02           0.25162269 #> 23  0.23944933 2.100343e-02           0.26524771 #> 24  0.25071369 2.279741e-02           0.27896291 #> 25  0.26194596 2.464918e-02           0.29275850 #> 26  0.27313650 2.655668e-02           0.30662449 #> 27  0.28427560 2.851780e-02           0.32055070 #> 28  0.29535349 3.053040e-02           0.33452679 #> 29  0.30636037 3.259232e-02           0.34854231 #> 30  0.31728648 3.470133e-02           0.36258672 #> 31  0.32812210 3.685522e-02           0.37664946 #> 32  0.33885763 3.905170e-02           0.39071998 #> 33  0.34948361 4.128850e-02           0.40478776 #> 34  0.35999073 4.356329e-02           0.41884236 #> 35  0.37036993 4.587373e-02           0.43287347 #> 36  0.38061238 4.821747e-02           0.44687095 #> 37  0.39070955 5.059214e-02           0.46082485 #> 38  0.40065322 5.299534e-02           0.47472547 #> 39  0.41043553 5.542468e-02           0.48856336 #> 40  0.42004899 5.787777e-02           0.50232939 #> 41  0.42948655 6.035220e-02           0.51601477 #> 42  0.43874155 6.284557e-02           0.52961107 #> 43  0.44780782 6.535550e-02           0.54311025 #> 44  0.45667965 6.787961e-02           0.55650468 #> 45  0.46535183 7.041553e-02           0.56978718 #> 46  0.47381962 7.296093e-02           0.58295101 #> 47  0.48207884 7.551350e-02           0.59598989 #> 48  0.49012579 7.807094e-02           0.60889804 #> 49  0.49795731 8.063102e-02           0.62167016 #> 50  0.50557076 8.319150e-02           0.63430143 #> 51  0.51296400 8.575022e-02           0.64678753 #> 52  0.52013544 8.830507e-02           0.65912465 #> 53  0.52708395 9.085395e-02           0.67130945 #> 54  0.53380895 9.339484e-02           0.68333909 #> 55  0.54031028 9.592579e-02           0.69521121 #> 56  0.54658831 9.844487e-02           0.70692391 #> 57  0.55264380 1.009503e-01           0.71847575 #> 58  0.55847799 1.034402e-01           0.72986574 #> 59  0.56409251 1.059128e-01           0.74109329 #> 60  0.56948938 1.083667e-01           0.75215825 #> 61  0.57467099 1.108001e-01           0.76306084 #> 62  0.57964008 1.132116e-01           0.77380166 #> 63  0.58439970 1.155998e-01           0.78438165 #> 64  0.58895321 1.179632e-01           0.79480210 #> 65  0.59330423 1.203006e-01           0.80506457 #> 66  0.59745664 1.226108e-01           0.81517095 #> 67  0.60141453 1.248927e-01           0.82512335 #> 68  0.60518220 1.271452e-01           0.83492416 #> 69  0.60876412 1.293673e-01           0.84457597 #> 70  0.61216492 1.315582e-01           0.85408157 #> 71  0.61538936 1.337169e-01           0.86344393 #> 72  0.61844231 1.358427e-01           0.87266617 #> 73  0.62132871 1.379350e-01           0.88175156 #> 74  0.62405358 1.399930e-01           0.89070348 #> 75  0.62662201 1.420163e-01           0.89952541 #> 76  0.62903910 1.440043e-01           0.90822093 #> 77  0.63130995 1.459567e-01           0.91679365 #> 78  0.63343970 1.478730e-01           0.92524726 #> 79  0.63543344 1.497530e-01           0.93358548 #> 80  0.63729625 1.515964e-01           0.94181204 #> 81  0.63903316 1.534031e-01           0.94993070 #> 82  0.64064914 1.551729e-01           0.95794519 #> 83  0.64214912 1.569057e-01           0.96585926 #> 84  0.64353792 1.586015e-01           0.97367659 #> 85  0.64482033 1.602604e-01           0.98140087 #> 86  0.64600099 1.618823e-01           0.98903572 #> 87  0.64708449 1.634675e-01           0.99658473 #> 88  0.64807531 1.650160e-01           1.00405142 #> 89  0.64897781 1.665281e-01           1.01143926 #> 90  0.64979624 1.680040e-01           1.01875163 #> 91  0.65053476 1.694439e-01           1.02599186 #> 92  0.65119737 1.708481e-01           1.03316320 #> 93  0.65178800 1.722170e-01           1.04026882 #> 94  0.65231042 1.735510e-01           1.04731179 #> 95  0.65276831 1.748503e-01           1.05429512 #> 96  0.65316520 1.761155e-01           1.06122172 #> 97  0.65350450 1.773469e-01           1.06809443 #> 98  0.65378953 1.785449e-01           1.07491597 #> 99  0.65402345 1.797101e-01           1.08168899 #> 100 0.65420932 1.808429e-01           1.08841607 #> 101 0.65435008 1.819439e-01           1.09509966 #> 102 0.65444854 1.830135e-01           1.10174215 #> 103 0.65450742 1.840522e-01           1.10834584 #> 104 0.65452930 1.850607e-01           1.11491293 #> 105 0.65451666 1.860394e-01           1.12144554 #> 106 0.65447187 1.869888e-01           1.12794573 #> 107 0.65439720 1.879096e-01           1.13441543 #> 108 0.65429481 1.888024e-01           1.14085652 #> 109 0.65416677 1.896676e-01           1.14727081 #> 110 0.65401503 1.905058e-01           1.15366000 #> 111 0.65384147 1.913177e-01           1.16002574 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 390 rows ]"}]
